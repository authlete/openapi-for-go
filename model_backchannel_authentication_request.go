/*
Authlete API

Authlete API Document. 

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// checks if the BackchannelAuthenticationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackchannelAuthenticationRequest{}

// BackchannelAuthenticationRequest struct for BackchannelAuthenticationRequest
type BackchannelAuthenticationRequest struct {
	// Parameters of a backchannel authentication request which are the request parameters that the backchannel authentication endpoint of the OpenID provider implementation received from the client application.  The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from the client application. 
	Parameters string `json:"parameters"`
	// The client ID extracted from Authorization header of the backchannel authentication request from the client application.  If the backchannel authentication endpoint of the OpenID provider implementation supports Basic Authentication as a means of client authentication, and the request from the client application contained its client ID in Authorization header, the value should be extracted and set to this parameter. 
	ClientId *string `json:"clientId,omitempty"`
	// The client secret extracted from Authorization header of the backchannel authentication request from the client application.  If the backchannel authentication endpoint of the OpenID provider implementation supports Basic Authentication as a means of client authentication, and the request from the client application contained its client secret in Authorization header, the value should be extracted and set to this parameter. 
	ClientSecret *string `json:"clientSecret,omitempty"`
	// The client certification used in the TLS connection between the client application and the backchannel authentication endpoint of the OpenID provider. 
	ClientCertificate *string `json:"clientCertificate,omitempty"`
	// The client certificate path presented by the client during client authentication. Each element is a string in PEM format.
	ClientCertificatePath *string `json:"clientCertificatePath,omitempty"`
}

// NewBackchannelAuthenticationRequest instantiates a new BackchannelAuthenticationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackchannelAuthenticationRequest(parameters string) *BackchannelAuthenticationRequest {
	this := BackchannelAuthenticationRequest{}
	this.Parameters = parameters
	return &this
}

// NewBackchannelAuthenticationRequestWithDefaults instantiates a new BackchannelAuthenticationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackchannelAuthenticationRequestWithDefaults() *BackchannelAuthenticationRequest {
	this := BackchannelAuthenticationRequest{}
	return &this
}

// GetParameters returns the Parameters field value
func (o *BackchannelAuthenticationRequest) GetParameters() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *BackchannelAuthenticationRequest) GetParametersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parameters, true
}

// SetParameters sets field value
func (o *BackchannelAuthenticationRequest) SetParameters(v string) {
	o.Parameters = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *BackchannelAuthenticationRequest) GetClientId() string {
	if o == nil || isNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackchannelAuthenticationRequest) GetClientIdOk() (*string, bool) {
	if o == nil || isNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *BackchannelAuthenticationRequest) HasClientId() bool {
	if o != nil && !isNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *BackchannelAuthenticationRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *BackchannelAuthenticationRequest) GetClientSecret() string {
	if o == nil || isNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackchannelAuthenticationRequest) GetClientSecretOk() (*string, bool) {
	if o == nil || isNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *BackchannelAuthenticationRequest) HasClientSecret() bool {
	if o != nil && !isNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *BackchannelAuthenticationRequest) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetClientCertificate returns the ClientCertificate field value if set, zero value otherwise.
func (o *BackchannelAuthenticationRequest) GetClientCertificate() string {
	if o == nil || isNil(o.ClientCertificate) {
		var ret string
		return ret
	}
	return *o.ClientCertificate
}

// GetClientCertificateOk returns a tuple with the ClientCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackchannelAuthenticationRequest) GetClientCertificateOk() (*string, bool) {
	if o == nil || isNil(o.ClientCertificate) {
		return nil, false
	}
	return o.ClientCertificate, true
}

// HasClientCertificate returns a boolean if a field has been set.
func (o *BackchannelAuthenticationRequest) HasClientCertificate() bool {
	if o != nil && !isNil(o.ClientCertificate) {
		return true
	}

	return false
}

// SetClientCertificate gets a reference to the given string and assigns it to the ClientCertificate field.
func (o *BackchannelAuthenticationRequest) SetClientCertificate(v string) {
	o.ClientCertificate = &v
}

// GetClientCertificatePath returns the ClientCertificatePath field value if set, zero value otherwise.
func (o *BackchannelAuthenticationRequest) GetClientCertificatePath() string {
	if o == nil || isNil(o.ClientCertificatePath) {
		var ret string
		return ret
	}
	return *o.ClientCertificatePath
}

// GetClientCertificatePathOk returns a tuple with the ClientCertificatePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackchannelAuthenticationRequest) GetClientCertificatePathOk() (*string, bool) {
	if o == nil || isNil(o.ClientCertificatePath) {
		return nil, false
	}
	return o.ClientCertificatePath, true
}

// HasClientCertificatePath returns a boolean if a field has been set.
func (o *BackchannelAuthenticationRequest) HasClientCertificatePath() bool {
	if o != nil && !isNil(o.ClientCertificatePath) {
		return true
	}

	return false
}

// SetClientCertificatePath gets a reference to the given string and assigns it to the ClientCertificatePath field.
func (o *BackchannelAuthenticationRequest) SetClientCertificatePath(v string) {
	o.ClientCertificatePath = &v
}

func (o BackchannelAuthenticationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackchannelAuthenticationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parameters"] = o.Parameters
	if !isNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !isNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if !isNil(o.ClientCertificate) {
		toSerialize["clientCertificate"] = o.ClientCertificate
	}
	if !isNil(o.ClientCertificatePath) {
		toSerialize["clientCertificatePath"] = o.ClientCertificatePath
	}
	return toSerialize, nil
}

type NullableBackchannelAuthenticationRequest struct {
	value *BackchannelAuthenticationRequest
	isSet bool
}

func (v NullableBackchannelAuthenticationRequest) Get() *BackchannelAuthenticationRequest {
	return v.value
}

func (v *NullableBackchannelAuthenticationRequest) Set(val *BackchannelAuthenticationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBackchannelAuthenticationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBackchannelAuthenticationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackchannelAuthenticationRequest(val *BackchannelAuthenticationRequest) *NullableBackchannelAuthenticationRequest {
	return &NullableBackchannelAuthenticationRequest{value: val, isSet: true}
}

func (v NullableBackchannelAuthenticationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackchannelAuthenticationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


