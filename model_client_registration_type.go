/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// ClientRegistrationType Values for the `client_registration_types` RP metadata and the  `client_registration_types_supported` OP metadata that are defined in  [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html). 
type ClientRegistrationType string

// List of client_registration_type
const (
	CLIENTREGISTRATIONTYPE_AUTOMATIC ClientRegistrationType = "AUTOMATIC"
	CLIENTREGISTRATIONTYPE_EXPLICIT ClientRegistrationType = "EXPLICIT"
)

// All allowed values of ClientRegistrationType enum
var AllowedClientRegistrationTypeEnumValues = []ClientRegistrationType{
	"AUTOMATIC",
	"EXPLICIT",
}

func (v *ClientRegistrationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientRegistrationType(value)
	for _, existing := range AllowedClientRegistrationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientRegistrationType", value)
}

// NewClientRegistrationTypeFromValue returns a pointer to a valid ClientRegistrationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientRegistrationTypeFromValue(v string) (*ClientRegistrationType, error) {
	ev := ClientRegistrationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientRegistrationType: valid values are %v", v, AllowedClientRegistrationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientRegistrationType) IsValid() bool {
	for _, existing := range AllowedClientRegistrationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to client_registration_type value
func (v ClientRegistrationType) Ptr() *ClientRegistrationType {
	return &v
}

type NullableClientRegistrationType struct {
	value *ClientRegistrationType
	isSet bool
}

func (v NullableClientRegistrationType) Get() *ClientRegistrationType {
	return v.value
}

func (v *NullableClientRegistrationType) Set(val *ClientRegistrationType) {
	v.value = val
	v.isSet = true
}

func (v NullableClientRegistrationType) IsSet() bool {
	return v.isSet
}

func (v *NullableClientRegistrationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientRegistrationType(val *ClientRegistrationType) *NullableClientRegistrationType {
	return &NullableClientRegistrationType{value: val, isSet: true}
}

func (v NullableClientRegistrationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientRegistrationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

