/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// checks if the ClientExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientExtension{}

// ClientExtension struct for ClientExtension
type ClientExtension struct {
	// The set of scopes that the client application is allowed to request. This paramter will be one of the following.    - `null`   - an empty set   - a set with at least one element  When the value of this parameter is `null`, it means that the set of scopes that the client application is allowed to request is the set of the scopes that the service supports. When the value of this parameter is an empty set, it means that the client application is not allowed to request any scopes. When the value of this parameter is a set with at least one element, it means that the set is the set of scopes that the client application is allowed to request. 
	RequestableScopes []string `json:"requestableScopes,omitempty"`
	// The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you can define the set of scopes which this client application can request. If `false`, this client application can request any scope which is supported by the authorization server. 
	RequestableScopesEnabled *bool `json:"requestableScopesEnabled,omitempty"`
	// The value of the duration of access tokens per client in seconds. In normal cases, the value of the service's `accessTokenDuration` property is used as the duration of access tokens issued by the service. However, if this `accessTokenDuration` property holds a non-zero positive number and its value is less than the duration configured by the service, the value is used as the duration of access tokens issued to the client application.  Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`, too. Authlete chooses the minimum value among the candidates. 
	AccessTokenDuration *int64 `json:"accessTokenDuration,omitempty"`
	// The value of the duration of refresh tokens per client in seconds. In normal cases, the value of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number and its value is less than the duration configured by the service, the value is used as the duration of refresh tokens issued to the client application.  Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`, too. Authlete chooses the minimum value among the candidates. 
	RefreshTokenDuration *int64 `json:"refreshTokenDuration,omitempty"`
	// Get the flag indicating whether the client is explicitly given a permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
	TokenExchangePermitted *bool `json:"tokenExchangePermitted,omitempty"`
}

// NewClientExtension instantiates a new ClientExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientExtension() *ClientExtension {
	this := ClientExtension{}
	return &this
}

// NewClientExtensionWithDefaults instantiates a new ClientExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientExtensionWithDefaults() *ClientExtension {
	this := ClientExtension{}
	return &this
}

// GetRequestableScopes returns the RequestableScopes field value if set, zero value otherwise.
func (o *ClientExtension) GetRequestableScopes() []string {
	if o == nil || isNil(o.RequestableScopes) {
		var ret []string
		return ret
	}
	return o.RequestableScopes
}

// GetRequestableScopesOk returns a tuple with the RequestableScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientExtension) GetRequestableScopesOk() ([]string, bool) {
	if o == nil || isNil(o.RequestableScopes) {
		return nil, false
	}
	return o.RequestableScopes, true
}

// HasRequestableScopes returns a boolean if a field has been set.
func (o *ClientExtension) HasRequestableScopes() bool {
	if o != nil && !isNil(o.RequestableScopes) {
		return true
	}

	return false
}

// SetRequestableScopes gets a reference to the given []string and assigns it to the RequestableScopes field.
func (o *ClientExtension) SetRequestableScopes(v []string) {
	o.RequestableScopes = v
}

// GetRequestableScopesEnabled returns the RequestableScopesEnabled field value if set, zero value otherwise.
func (o *ClientExtension) GetRequestableScopesEnabled() bool {
	if o == nil || isNil(o.RequestableScopesEnabled) {
		var ret bool
		return ret
	}
	return *o.RequestableScopesEnabled
}

// GetRequestableScopesEnabledOk returns a tuple with the RequestableScopesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientExtension) GetRequestableScopesEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.RequestableScopesEnabled) {
		return nil, false
	}
	return o.RequestableScopesEnabled, true
}

// HasRequestableScopesEnabled returns a boolean if a field has been set.
func (o *ClientExtension) HasRequestableScopesEnabled() bool {
	if o != nil && !isNil(o.RequestableScopesEnabled) {
		return true
	}

	return false
}

// SetRequestableScopesEnabled gets a reference to the given bool and assigns it to the RequestableScopesEnabled field.
func (o *ClientExtension) SetRequestableScopesEnabled(v bool) {
	o.RequestableScopesEnabled = &v
}

// GetAccessTokenDuration returns the AccessTokenDuration field value if set, zero value otherwise.
func (o *ClientExtension) GetAccessTokenDuration() int64 {
	if o == nil || isNil(o.AccessTokenDuration) {
		var ret int64
		return ret
	}
	return *o.AccessTokenDuration
}

// GetAccessTokenDurationOk returns a tuple with the AccessTokenDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientExtension) GetAccessTokenDurationOk() (*int64, bool) {
	if o == nil || isNil(o.AccessTokenDuration) {
		return nil, false
	}
	return o.AccessTokenDuration, true
}

// HasAccessTokenDuration returns a boolean if a field has been set.
func (o *ClientExtension) HasAccessTokenDuration() bool {
	if o != nil && !isNil(o.AccessTokenDuration) {
		return true
	}

	return false
}

// SetAccessTokenDuration gets a reference to the given int64 and assigns it to the AccessTokenDuration field.
func (o *ClientExtension) SetAccessTokenDuration(v int64) {
	o.AccessTokenDuration = &v
}

// GetRefreshTokenDuration returns the RefreshTokenDuration field value if set, zero value otherwise.
func (o *ClientExtension) GetRefreshTokenDuration() int64 {
	if o == nil || isNil(o.RefreshTokenDuration) {
		var ret int64
		return ret
	}
	return *o.RefreshTokenDuration
}

// GetRefreshTokenDurationOk returns a tuple with the RefreshTokenDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientExtension) GetRefreshTokenDurationOk() (*int64, bool) {
	if o == nil || isNil(o.RefreshTokenDuration) {
		return nil, false
	}
	return o.RefreshTokenDuration, true
}

// HasRefreshTokenDuration returns a boolean if a field has been set.
func (o *ClientExtension) HasRefreshTokenDuration() bool {
	if o != nil && !isNil(o.RefreshTokenDuration) {
		return true
	}

	return false
}

// SetRefreshTokenDuration gets a reference to the given int64 and assigns it to the RefreshTokenDuration field.
func (o *ClientExtension) SetRefreshTokenDuration(v int64) {
	o.RefreshTokenDuration = &v
}

// GetTokenExchangePermitted returns the TokenExchangePermitted field value if set, zero value otherwise.
func (o *ClientExtension) GetTokenExchangePermitted() bool {
	if o == nil || isNil(o.TokenExchangePermitted) {
		var ret bool
		return ret
	}
	return *o.TokenExchangePermitted
}

// GetTokenExchangePermittedOk returns a tuple with the TokenExchangePermitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientExtension) GetTokenExchangePermittedOk() (*bool, bool) {
	if o == nil || isNil(o.TokenExchangePermitted) {
		return nil, false
	}
	return o.TokenExchangePermitted, true
}

// HasTokenExchangePermitted returns a boolean if a field has been set.
func (o *ClientExtension) HasTokenExchangePermitted() bool {
	if o != nil && !isNil(o.TokenExchangePermitted) {
		return true
	}

	return false
}

// SetTokenExchangePermitted gets a reference to the given bool and assigns it to the TokenExchangePermitted field.
func (o *ClientExtension) SetTokenExchangePermitted(v bool) {
	o.TokenExchangePermitted = &v
}

func (o ClientExtension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RequestableScopes) {
		toSerialize["requestableScopes"] = o.RequestableScopes
	}
	if !isNil(o.RequestableScopesEnabled) {
		toSerialize["requestableScopesEnabled"] = o.RequestableScopesEnabled
	}
	if !isNil(o.AccessTokenDuration) {
		toSerialize["accessTokenDuration"] = o.AccessTokenDuration
	}
	if !isNil(o.RefreshTokenDuration) {
		toSerialize["refreshTokenDuration"] = o.RefreshTokenDuration
	}
	if !isNil(o.TokenExchangePermitted) {
		toSerialize["tokenExchangePermitted"] = o.TokenExchangePermitted
	}
	return toSerialize, nil
}

type NullableClientExtension struct {
	value *ClientExtension
	isSet bool
}

func (v NullableClientExtension) Get() *ClientExtension {
	return v.value
}

func (v *NullableClientExtension) Set(val *ClientExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableClientExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableClientExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientExtension(val *ClientExtension) *NullableClientExtension {
	return &NullableClientExtension{value: val, isSet: true}
}

func (v NullableClientExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


