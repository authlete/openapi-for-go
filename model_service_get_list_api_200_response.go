/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// ServiceGetListApi200Response - struct for ServiceGetListApi200Response
type ServiceGetListApi200Response struct {
	ServiceGetListLimitedResponse *ServiceGetListLimitedResponse
	ServiceGetListResponse *ServiceGetListResponse
}

// ServiceGetListLimitedResponseAsServiceGetListApi200Response is a convenience function that returns ServiceGetListLimitedResponse wrapped in ServiceGetListApi200Response
func ServiceGetListLimitedResponseAsServiceGetListApi200Response(v *ServiceGetListLimitedResponse) ServiceGetListApi200Response {
	return ServiceGetListApi200Response{
		ServiceGetListLimitedResponse: v,
	}
}

// ServiceGetListResponseAsServiceGetListApi200Response is a convenience function that returns ServiceGetListResponse wrapped in ServiceGetListApi200Response
func ServiceGetListResponseAsServiceGetListApi200Response(v *ServiceGetListResponse) ServiceGetListApi200Response {
	return ServiceGetListApi200Response{
		ServiceGetListResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServiceGetListApi200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ServiceGetListLimitedResponse
	err = json.Unmarshal(data, &dst.ServiceGetListLimitedResponse)
	if err == nil {
		jsonServiceGetListLimitedResponse, _ := json.Marshal(dst.ServiceGetListLimitedResponse)
		if string(jsonServiceGetListLimitedResponse) == "{}" { // empty struct
			dst.ServiceGetListLimitedResponse = nil
		} else {
			match++
		}
	} else {
		dst.ServiceGetListLimitedResponse = nil
	}

	// try to unmarshal data into ServiceGetListResponse
	err = json.Unmarshal(data, &dst.ServiceGetListResponse)
	if err == nil {
		jsonServiceGetListResponse, _ := json.Marshal(dst.ServiceGetListResponse)
		if string(jsonServiceGetListResponse) == "{}" { // empty struct
			dst.ServiceGetListResponse = nil
		} else {
			match++
		}
	} else {
		dst.ServiceGetListResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ServiceGetListLimitedResponse = nil
		dst.ServiceGetListResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ServiceGetListApi200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ServiceGetListApi200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServiceGetListApi200Response) MarshalJSON() ([]byte, error) {
	if src.ServiceGetListLimitedResponse != nil {
		return json.Marshal(&src.ServiceGetListLimitedResponse)
	}

	if src.ServiceGetListResponse != nil {
		return json.Marshal(&src.ServiceGetListResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServiceGetListApi200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ServiceGetListLimitedResponse != nil {
		return obj.ServiceGetListLimitedResponse
	}

	if obj.ServiceGetListResponse != nil {
		return obj.ServiceGetListResponse
	}

	// all schemas are nil
	return nil
}

type NullableServiceGetListApi200Response struct {
	value *ServiceGetListApi200Response
	isSet bool
}

func (v NullableServiceGetListApi200Response) Get() *ServiceGetListApi200Response {
	return v.value
}

func (v *NullableServiceGetListApi200Response) Set(val *ServiceGetListApi200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceGetListApi200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceGetListApi200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceGetListApi200Response(val *ServiceGetListApi200Response) *NullableServiceGetListApi200Response {
	return &NullableServiceGetListApi200Response{value: val, isSet: true}
}

func (v NullableServiceGetListApi200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceGetListApi200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


