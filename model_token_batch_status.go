/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// checks if the TokenBatchStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenBatchStatus{}

// TokenBatchStatus struct for TokenBatchStatus
type TokenBatchStatus struct {
	// The kind of the batch.
	BatchKind *string `json:"batchKind,omitempty"`
	// The request ID associated with the status.
	RequestId *string `json:"requestId,omitempty"`
	Result *TokenBatchStatusResult `json:"result,omitempty"`
	// The number of access tokens processed by the batch.
	TokenCount *int64 `json:"tokenCount,omitempty"`
	// The error code for the batch operation
	ErrorCode *string `json:"errorCode,omitempty"`
	// The error description for the batch operation
	ErrorDescription *string `json:"errorDescription,omitempty"`
	// The time when this status was created
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// The time when this status was modified
	ModifiedAt *int64 `json:"modifiedAt,omitempty"`
}

// NewTokenBatchStatus instantiates a new TokenBatchStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenBatchStatus() *TokenBatchStatus {
	this := TokenBatchStatus{}
	return &this
}

// NewTokenBatchStatusWithDefaults instantiates a new TokenBatchStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenBatchStatusWithDefaults() *TokenBatchStatus {
	this := TokenBatchStatus{}
	return &this
}

// GetBatchKind returns the BatchKind field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetBatchKind() string {
	if o == nil || isNil(o.BatchKind) {
		var ret string
		return ret
	}
	return *o.BatchKind
}

// GetBatchKindOk returns a tuple with the BatchKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetBatchKindOk() (*string, bool) {
	if o == nil || isNil(o.BatchKind) {
		return nil, false
	}
	return o.BatchKind, true
}

// HasBatchKind returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasBatchKind() bool {
	if o != nil && !isNil(o.BatchKind) {
		return true
	}

	return false
}

// SetBatchKind gets a reference to the given string and assigns it to the BatchKind field.
func (o *TokenBatchStatus) SetBatchKind(v string) {
	o.BatchKind = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetRequestId() string {
	if o == nil || isNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetRequestIdOk() (*string, bool) {
	if o == nil || isNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasRequestId() bool {
	if o != nil && !isNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *TokenBatchStatus) SetRequestId(v string) {
	o.RequestId = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetResult() TokenBatchStatusResult {
	if o == nil || isNil(o.Result) {
		var ret TokenBatchStatusResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetResultOk() (*TokenBatchStatusResult, bool) {
	if o == nil || isNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given TokenBatchStatusResult and assigns it to the Result field.
func (o *TokenBatchStatus) SetResult(v TokenBatchStatusResult) {
	o.Result = &v
}

// GetTokenCount returns the TokenCount field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetTokenCount() int64 {
	if o == nil || isNil(o.TokenCount) {
		var ret int64
		return ret
	}
	return *o.TokenCount
}

// GetTokenCountOk returns a tuple with the TokenCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetTokenCountOk() (*int64, bool) {
	if o == nil || isNil(o.TokenCount) {
		return nil, false
	}
	return o.TokenCount, true
}

// HasTokenCount returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasTokenCount() bool {
	if o != nil && !isNil(o.TokenCount) {
		return true
	}

	return false
}

// SetTokenCount gets a reference to the given int64 and assigns it to the TokenCount field.
func (o *TokenBatchStatus) SetTokenCount(v int64) {
	o.TokenCount = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetErrorCode() string {
	if o == nil || isNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetErrorCodeOk() (*string, bool) {
	if o == nil || isNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasErrorCode() bool {
	if o != nil && !isNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *TokenBatchStatus) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetErrorDescription() string {
	if o == nil || isNil(o.ErrorDescription) {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.ErrorDescription) {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasErrorDescription() bool {
	if o != nil && !isNil(o.ErrorDescription) {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *TokenBatchStatus) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetCreatedAt() int64 {
	if o == nil || isNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetCreatedAtOk() (*int64, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *TokenBatchStatus) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *TokenBatchStatus) GetModifiedAt() int64 {
	if o == nil || isNil(o.ModifiedAt) {
		var ret int64
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenBatchStatus) GetModifiedAtOk() (*int64, bool) {
	if o == nil || isNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *TokenBatchStatus) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given int64 and assigns it to the ModifiedAt field.
func (o *TokenBatchStatus) SetModifiedAt(v int64) {
	o.ModifiedAt = &v
}

func (o TokenBatchStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenBatchStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BatchKind) {
		toSerialize["batchKind"] = o.BatchKind
	}
	if !isNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !isNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !isNil(o.TokenCount) {
		toSerialize["tokenCount"] = o.TokenCount
	}
	if !isNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !isNil(o.ErrorDescription) {
		toSerialize["errorDescription"] = o.ErrorDescription
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	return toSerialize, nil
}

type NullableTokenBatchStatus struct {
	value *TokenBatchStatus
	isSet bool
}

func (v NullableTokenBatchStatus) Get() *TokenBatchStatus {
	return v.value
}

func (v *NullableTokenBatchStatus) Set(val *TokenBatchStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenBatchStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenBatchStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenBatchStatus(val *TokenBatchStatus) *NullableTokenBatchStatus {
	return &NullableTokenBatchStatus{value: val, isSet: true}
}

func (v NullableTokenBatchStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenBatchStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


