/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// TokenBatchStatusResult the model 'TokenBatchStatusResult'
type TokenBatchStatusResult string

// List of token_batch_status_result
const (
	TOKENBATCHSTATUSRESULT_FAILED TokenBatchStatusResult = "FAILED"
	TOKENBATCHSTATUSRESULT_SUCCEED TokenBatchStatusResult = "SUCCEED"
)

// All allowed values of TokenBatchStatusResult enum
var AllowedTokenBatchStatusResultEnumValues = []TokenBatchStatusResult{
	"FAILED",
	"SUCCEED",
}

func (v *TokenBatchStatusResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenBatchStatusResult(value)
	for _, existing := range AllowedTokenBatchStatusResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenBatchStatusResult", value)
}

// NewTokenBatchStatusResultFromValue returns a pointer to a valid TokenBatchStatusResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenBatchStatusResultFromValue(v string) (*TokenBatchStatusResult, error) {
	ev := TokenBatchStatusResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenBatchStatusResult: valid values are %v", v, AllowedTokenBatchStatusResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenBatchStatusResult) IsValid() bool {
	for _, existing := range AllowedTokenBatchStatusResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to token_batch_status_result value
func (v TokenBatchStatusResult) Ptr() *TokenBatchStatusResult {
	return &v
}

type NullableTokenBatchStatusResult struct {
	value *TokenBatchStatusResult
	isSet bool
}

func (v NullableTokenBatchStatusResult) Get() *TokenBatchStatusResult {
	return v.value
}

func (v *NullableTokenBatchStatusResult) Set(val *TokenBatchStatusResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenBatchStatusResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenBatchStatusResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenBatchStatusResult(val *TokenBatchStatusResult) *NullableTokenBatchStatusResult {
	return &NullableTokenBatchStatusResult{value: val, isSet: true}
}

func (v NullableTokenBatchStatusResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenBatchStatusResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

