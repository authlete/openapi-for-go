/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// checks if the IdtokenReissueRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdtokenReissueRequest{}

// IdtokenReissueRequest struct for IdtokenReissueRequest
type IdtokenReissueRequest struct {
	// <p> The value of this parameter should be (a) the value of the \"`jwtAccessToken`\" parameter in a response from the `/auth/token` API when the value is available, or (b) the value of the \"`accessToken`\" parameter in the response from the `/auth/token` API when the value of the \"`jwtAccessToken`\" parameter is not available. </p> 
	AccessToken string `json:"accessToken"`
	// <p> The value of this parameter should be the value of the \"`refreshToken`\" parameter in a response from the `/auth/token` API. </p> 
	RefreshToken string `json:"refreshToken"`
	// The value that should be used as the value of the \"`sub`\" claim of the ID token.  <p> This parameter is optional. When omitted, the value of the subject associated with the access token is used. </p> 
	Sub *string `json:"sub,omitempty"`
	// Additional claims that should be embedded in the payload part of the ID token. The format is a JSON object.  <p> This parameter is optional. </p> 
	Claims *string `json:"claims,omitempty"`
	// Additional parameters that should be embedded in the JWS header of the ID token. The format is a JSON object.  <p> This parameter is optional. </p> 
	IdtHeaderParams *string `json:"idtHeaderParams,omitempty"`
	// The type of the \"`aud`\" claim of the ID token being issued.  <p> Valid values of this parameter are as follows. </p>  <blockquote> <table border=\"1\" cellpadding=\"5\" style=\"border-collapse: collapse;\">   <tr bgcolor=\"orange\">     <th>Value</th>     <th>Description</th>   </tr>   <tr>     <td>\"`array`\"</td>     <td>The type of the `aud` claim becomes an array of strings.</td>   </tr>   <tr>     <td>\"`string`\"</td>     <td>The type of the `aud` claim becomes a single string.</td>   </tr> </table> </blockquote>  <p> This parameter is optional, and the default value on omission is \"`array`\". </p>  <p> This parameter takes precedence over the `idTokenAudType` property of {@link Service} (cf. {@link Service#getIdTokenAudType()}). </p>
	IdTokenAudType *string `json:"idTokenAudType,omitempty"`
}

// NewIdtokenReissueRequest instantiates a new IdtokenReissueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdtokenReissueRequest(accessToken string, refreshToken string) *IdtokenReissueRequest {
	this := IdtokenReissueRequest{}
	this.AccessToken = accessToken
	this.RefreshToken = refreshToken
	return &this
}

// NewIdtokenReissueRequestWithDefaults instantiates a new IdtokenReissueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdtokenReissueRequestWithDefaults() *IdtokenReissueRequest {
	this := IdtokenReissueRequest{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *IdtokenReissueRequest) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *IdtokenReissueRequest) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *IdtokenReissueRequest) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetRefreshToken returns the RefreshToken field value
func (o *IdtokenReissueRequest) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *IdtokenReissueRequest) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *IdtokenReissueRequest) SetRefreshToken(v string) {
	o.RefreshToken = v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *IdtokenReissueRequest) GetSub() string {
	if o == nil || isNil(o.Sub) {
		var ret string
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdtokenReissueRequest) GetSubOk() (*string, bool) {
	if o == nil || isNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *IdtokenReissueRequest) HasSub() bool {
	if o != nil && !isNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given string and assigns it to the Sub field.
func (o *IdtokenReissueRequest) SetSub(v string) {
	o.Sub = &v
}

// GetClaims returns the Claims field value if set, zero value otherwise.
func (o *IdtokenReissueRequest) GetClaims() string {
	if o == nil || isNil(o.Claims) {
		var ret string
		return ret
	}
	return *o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdtokenReissueRequest) GetClaimsOk() (*string, bool) {
	if o == nil || isNil(o.Claims) {
		return nil, false
	}
	return o.Claims, true
}

// HasClaims returns a boolean if a field has been set.
func (o *IdtokenReissueRequest) HasClaims() bool {
	if o != nil && !isNil(o.Claims) {
		return true
	}

	return false
}

// SetClaims gets a reference to the given string and assigns it to the Claims field.
func (o *IdtokenReissueRequest) SetClaims(v string) {
	o.Claims = &v
}

// GetIdtHeaderParams returns the IdtHeaderParams field value if set, zero value otherwise.
func (o *IdtokenReissueRequest) GetIdtHeaderParams() string {
	if o == nil || isNil(o.IdtHeaderParams) {
		var ret string
		return ret
	}
	return *o.IdtHeaderParams
}

// GetIdtHeaderParamsOk returns a tuple with the IdtHeaderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdtokenReissueRequest) GetIdtHeaderParamsOk() (*string, bool) {
	if o == nil || isNil(o.IdtHeaderParams) {
		return nil, false
	}
	return o.IdtHeaderParams, true
}

// HasIdtHeaderParams returns a boolean if a field has been set.
func (o *IdtokenReissueRequest) HasIdtHeaderParams() bool {
	if o != nil && !isNil(o.IdtHeaderParams) {
		return true
	}

	return false
}

// SetIdtHeaderParams gets a reference to the given string and assigns it to the IdtHeaderParams field.
func (o *IdtokenReissueRequest) SetIdtHeaderParams(v string) {
	o.IdtHeaderParams = &v
}

// GetIdTokenAudType returns the IdTokenAudType field value if set, zero value otherwise.
func (o *IdtokenReissueRequest) GetIdTokenAudType() string {
	if o == nil || isNil(o.IdTokenAudType) {
		var ret string
		return ret
	}
	return *o.IdTokenAudType
}

// GetIdTokenAudTypeOk returns a tuple with the IdTokenAudType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdtokenReissueRequest) GetIdTokenAudTypeOk() (*string, bool) {
	if o == nil || isNil(o.IdTokenAudType) {
		return nil, false
	}
	return o.IdTokenAudType, true
}

// HasIdTokenAudType returns a boolean if a field has been set.
func (o *IdtokenReissueRequest) HasIdTokenAudType() bool {
	if o != nil && !isNil(o.IdTokenAudType) {
		return true
	}

	return false
}

// SetIdTokenAudType gets a reference to the given string and assigns it to the IdTokenAudType field.
func (o *IdtokenReissueRequest) SetIdTokenAudType(v string) {
	o.IdTokenAudType = &v
}

func (o IdtokenReissueRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdtokenReissueRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessToken"] = o.AccessToken
	toSerialize["refreshToken"] = o.RefreshToken
	if !isNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	if !isNil(o.Claims) {
		toSerialize["claims"] = o.Claims
	}
	if !isNil(o.IdtHeaderParams) {
		toSerialize["idtHeaderParams"] = o.IdtHeaderParams
	}
	if !isNil(o.IdTokenAudType) {
		toSerialize["idTokenAudType"] = o.IdTokenAudType
	}
	return toSerialize, nil
}

type NullableIdtokenReissueRequest struct {
	value *IdtokenReissueRequest
	isSet bool
}

func (v NullableIdtokenReissueRequest) Get() *IdtokenReissueRequest {
	return v.value
}

func (v *NullableIdtokenReissueRequest) Set(val *IdtokenReissueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIdtokenReissueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIdtokenReissueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdtokenReissueRequest(val *IdtokenReissueRequest) *NullableIdtokenReissueRequest {
	return &NullableIdtokenReissueRequest{value: val, isSet: true}
}

func (v NullableIdtokenReissueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdtokenReissueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


