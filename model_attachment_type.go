/*
Authlete API

Authlete API Document. 

API version: 2.3.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// AttachmentType Supported attachment types. This property corresponds to the `attachments_supported`  server metadata which was added by the third implementer's draft of OpenID Connect  for Identity Assurance 1.0. 
type AttachmentType string

// List of attachment_type
const (
	ATTACHMENTTYPE_EMBEDDED AttachmentType = "EMBEDDED"
	ATTACHMENTTYPE_EXTERNAL AttachmentType = "EXTERNAL"
)

// All allowed values of AttachmentType enum
var AllowedAttachmentTypeEnumValues = []AttachmentType{
	"EMBEDDED",
	"EXTERNAL",
}

func (v *AttachmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttachmentType(value)
	for _, existing := range AllowedAttachmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttachmentType", value)
}

// NewAttachmentTypeFromValue returns a pointer to a valid AttachmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttachmentTypeFromValue(v string) (*AttachmentType, error) {
	ev := AttachmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttachmentType: valid values are %v", v, AllowedAttachmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttachmentType) IsValid() bool {
	for _, existing := range AllowedAttachmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to attachment_type value
func (v AttachmentType) Ptr() *AttachmentType {
	return &v
}

type NullableAttachmentType struct {
	value *AttachmentType
	isSet bool
}

func (v NullableAttachmentType) Get() *AttachmentType {
	return v.value
}

func (v *NullableAttachmentType) Set(val *AttachmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentType(val *AttachmentType) *NullableAttachmentType {
	return &NullableAttachmentType{value: val, isSet: true}
}

func (v NullableAttachmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

