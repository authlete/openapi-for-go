/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// FapiMode the model 'FapiMode'
type FapiMode string

// List of fapi_mode
const (
	FAPIMODE_FAPI1_ADVANCED FapiMode = "FAPI1_ADVANCED"
	FAPIMODE_FAPI1_BASELINE FapiMode = "FAPI1_BASELINE"
	FAPIMODE_FAPI2_MESSAGE_SIGNING_AUTH_REQ FapiMode = "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
	FAPIMODE_FAPI2_MESSAGE_SIGNING_AUTH_RES FapiMode = "FAPI2_MESSAGE_SIGNING_AUTH_RES"
	FAPIMODE_FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES FapiMode = "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
	FAPIMODE_FAPI2_SECURITY FapiMode = "FAPI2_SECURITY"
)

// All allowed values of FapiMode enum
var AllowedFapiModeEnumValues = []FapiMode{
	"FAPI1_ADVANCED",
	"FAPI1_BASELINE",
	"FAPI2_MESSAGE_SIGNING_AUTH_REQ",
	"FAPI2_MESSAGE_SIGNING_AUTH_RES",
	"FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES",
	"FAPI2_SECURITY",
}

func (v *FapiMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FapiMode(value)
	for _, existing := range AllowedFapiModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FapiMode", value)
}

// NewFapiModeFromValue returns a pointer to a valid FapiMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFapiModeFromValue(v string) (*FapiMode, error) {
	ev := FapiMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FapiMode: valid values are %v", v, AllowedFapiModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FapiMode) IsValid() bool {
	for _, existing := range AllowedFapiModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to fapi_mode value
func (v FapiMode) Ptr() *FapiMode {
	return &v
}

type NullableFapiMode struct {
	value *FapiMode
	isSet bool
}

func (v NullableFapiMode) Get() *FapiMode {
	return v.value
}

func (v *NullableFapiMode) Set(val *FapiMode) {
	v.value = val
	v.isSet = true
}

func (v NullableFapiMode) IsSet() bool {
	return v.isSet
}

func (v *NullableFapiMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFapiMode(val *FapiMode) *NullableFapiMode {
	return &NullableFapiMode{value: val, isSet: true}
}

func (v NullableFapiMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFapiMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

