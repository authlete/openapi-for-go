/*
Authlete API

Authlete API Document.

API version: 2.3.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type FederationEndpointApi interface {

	/*
			FederationConfigurationApi /api/federation/configuration API

			This API gathers the federation configuration about a service.

		The authorization server implementation should
		retrieve the value of the <code>action</code>
		response parameter from the API response and take the following steps
		according to the value.

		<h3><code>OK</code></h3>

		When the value of the <code> action</code> response
		parameter is <code>OK</code>, it means that Authlete
		could prepare an entity configuration successfully.

		In this case, the implementation of the entity configuration endpoint of the
		authorization server should return an HTTP response to the client application
		with the HTTP status code "`200 OK`" and the content type
		"`application/entity-statement+jwt`". The message body (= an entity
		configuration in the JWT format) of the response has been prepared by
		Authlete's `/federation/configuration` API and it is available as the
		<code>responseContent</code> response parameter.

		The implementation of the entity configuration endpoint can construct an
		HTTP response by doing like below.

		<pre style="border: solid 1px black; padding: 0.5em;">
		200 OK
		Content-Type: application/entity-statement+jwt
		(Other HTTP headers)

		<i>(the value of the responseContent response parameter)</i></pre>

		<h3><code>NOT_FOUND</code></h3>

		When the value of the <code> action</code> response
		parameter is <code>NOT_FOUND</code>, it means that
		the service configuration has not enabled the feature of <a href=
		"https://openid.net/specs/openid-connect-federation-1_0.html">OpenID Connect
		Federation 1.0</a> and so the client application should have not access the
		entity configuration endpoint.

		In this case, the implementation of the entity configuration endpoint of the
		authorization server should return an HTTP response to the client application
		with the HTTP status code "`404 Not Found`" and the content type
		"`application/json`". The message body (= error information in the JSON
		format) of the response has been prepared by Authlete's
		`/federation/configuration` API and it is available as the
		<code>responseContent</code> response parameter.

		The implementation of the entity configuration endpoint can construct an
		HTTP response by doing like below.

		<pre style="border: solid 1px black; padding: 0.5em;">
		404 Not Found
		Content-Type: application/json
		(Other HTTP headers)

		<i>(the value of the responseContent response parameter)</i></pre>

		<h3><code>INTERNAL_SERVER_ERROR</code></h3>

		could prepare an entity configuration successfully.

		In this case, the implementation of the entity configuration endpoint of the
		authorization server should return an HTTP response to the client application
		with the HTTP status code "`200 OK`" and the content type
		"`application/entity-statement+jwt`". The message body (= an entity
		configuration in the JWT format) of the response has been prepared by
		Authlete's `/federation/configuration` API and it is available as the
		<code>responseContent</code> response parameter.

		The implementation of the entity configuration endpoint can construct an
		HTTP response by doing like below.

		<pre style="border: solid 1px black; padding: 0.5em;">
		200 OK
		Content-Type: application/entity-statement+jwt
		(Other HTTP headers)

		<i>(the value of the responseContent response parameter)</i></pre>


		</details>


			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiFederationConfigurationApiRequest
	*/
	FederationConfigurationApi(ctx context.Context) ApiFederationConfigurationApiRequest

	// FederationConfigurationApiExecute executes the request
	//  @return FederationConfigurationResponse
	FederationConfigurationApiExecute(r ApiFederationConfigurationApiRequest) (*FederationConfigurationResponse, *http.Response, error)

	/*
			FederationRegistrationApi /api/federation/registration API

			The Authlete API is for implementations of the <b>federation registration
		endpoint</b> that accepts "explicit client registration". Its details are
		defined in <a href="https://openid.net/specs/openid-connect-federation-1_0.html"
		>OpenID Connect Federation 1.0</a>.
		</p>

		<p>
		The endpoint accepts `POST` requests whose `Content-Type`
		is either of the following.
		</p>

		<ol>
		  <li>`application/entity-statement+jwt`
		  <li>`application/trust-chain+json`
		</ol>

		<p>
		When the `Content-Type` of a request is
		`application/entity-statement+jwt`, the content of the request is
		the entity configuration of a relying party that is to be registered.
		In this case, the implementation of the federation registration endpoint
		should call Authlete's `/federation/registration` API with the
		entity configuration set to the `entityConfiguration` request
		parameter.
		</p>

		<p>
		On the other hand, when the `Content-Type` of a request is
		`application/trust-chain+json`, the content of the request is a
		JSON array that contains entity statements in JWT format. The sequence
		of the entity statements composes the trust chain of a relying party
		that is to be registered. In this case, the implementation of the
		federation registration endpoint should call Authlete's
		`/federation/registration` API with the trust chain set to the
		`trustChain` request parameter.
		</p>


			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiFederationRegistrationApiRequest
	*/
	FederationRegistrationApi(ctx context.Context) ApiFederationRegistrationApiRequest

	// FederationRegistrationApiExecute executes the request
	//  @return FederationRegistrationResponse
	FederationRegistrationApiExecute(r ApiFederationRegistrationApiRequest) (*FederationRegistrationResponse, *http.Response, error)
}

// FederationEndpointApiService FederationEndpointApi service
type FederationEndpointApiService service

type ApiFederationConfigurationApiRequest struct {
	ctx        context.Context
	ApiService FederationEndpointApi
	body       *map[string]interface{}
}

func (r ApiFederationConfigurationApiRequest) Body(body map[string]interface{}) ApiFederationConfigurationApiRequest {
	r.body = &body
	return r
}

func (r ApiFederationConfigurationApiRequest) Execute() (*FederationConfigurationResponse, *http.Response, error) {
	return r.ApiService.FederationConfigurationApiExecute(r)
}

/*
FederationConfigurationApi /api/federation/configuration API

This API gathers the federation configuration about a service.

The authorization server implementation should
retrieve the value of the <code>action</code>
response parameter from the API response and take the following steps
according to the value.

<h3><code>OK</code></h3>

When the value of the <code> action</code> response
parameter is <code>OK</code>, it means that Authlete
could prepare an entity configuration successfully.

In this case, the implementation of the entity configuration endpoint of the
authorization server should return an HTTP response to the client application
with the HTTP status code "`200 OK`" and the content type
"`application/entity-statement+jwt`". The message body (= an entity
configuration in the JWT format) of the response has been prepared by
Authlete's `/federation/configuration` API and it is available as the
<code>responseContent</code> response parameter.

The implementation of the entity configuration endpoint can construct an
HTTP response by doing like below.

<pre style="border: solid 1px black; padding: 0.5em;">
200 OK
Content-Type: application/entity-statement+jwt
(Other HTTP headers)

<i>(the value of the responseContent response parameter)</i></pre>

<h3><code>NOT_FOUND</code></h3>

When the value of the <code> action</code> response
parameter is <code>NOT_FOUND</code>, it means that
the service configuration has not enabled the feature of <a href=
"https://openid.net/specs/openid-connect-federation-1_0.html">OpenID Connect
Federation 1.0</a> and so the client application should have not access the
entity configuration endpoint.

In this case, the implementation of the entity configuration endpoint of the
authorization server should return an HTTP response to the client application
with the HTTP status code "`404 Not Found`" and the content type
"`application/json`". The message body (= error information in the JSON
format) of the response has been prepared by Authlete's
`/federation/configuration` API and it is available as the
<code>responseContent</code> response parameter.

The implementation of the entity configuration endpoint can construct an
HTTP response by doing like below.

<pre style="border: solid 1px black; padding: 0.5em;">
404 Not Found
Content-Type: application/json
(Other HTTP headers)

<i>(the value of the responseContent response parameter)</i></pre>

<h3><code>INTERNAL_SERVER_ERROR</code></h3>

could prepare an entity configuration successfully.

In this case, the implementation of the entity configuration endpoint of the
authorization server should return an HTTP response to the client application
with the HTTP status code "`200 OK`" and the content type
"`application/entity-statement+jwt`". The message body (= an entity
configuration in the JWT format) of the response has been prepared by
Authlete's `/federation/configuration` API and it is available as the
<code>responseContent</code> response parameter.

The implementation of the entity configuration endpoint can construct an
HTTP response by doing like below.

<pre style="border: solid 1px black; padding: 0.5em;">
200 OK
Content-Type: application/entity-statement+jwt
(Other HTTP headers)

<i>(the value of the responseContent response parameter)</i></pre>

</details>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFederationConfigurationApiRequest
*/
func (a *FederationEndpointApiService) FederationConfigurationApi(ctx context.Context) ApiFederationConfigurationApiRequest {
	return ApiFederationConfigurationApiRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FederationConfigurationResponse
func (a *FederationEndpointApiService) FederationConfigurationApiExecute(r ApiFederationConfigurationApiRequest) (*FederationConfigurationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FederationConfigurationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FederationEndpointApiService.FederationConfigurationApi")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/federation/configuration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFederationRegistrationApiRequest struct {
	ctx                           context.Context
	ApiService                    FederationEndpointApi
	federationRegistrationRequest *FederationRegistrationRequest
}

func (r ApiFederationRegistrationApiRequest) FederationRegistrationRequest(federationRegistrationRequest FederationRegistrationRequest) ApiFederationRegistrationApiRequest {
	r.federationRegistrationRequest = &federationRegistrationRequest
	return r
}

func (r ApiFederationRegistrationApiRequest) Execute() (*FederationRegistrationResponse, *http.Response, error) {
	return r.ApiService.FederationRegistrationApiExecute(r)
}

/*
FederationRegistrationApi /api/federation/registration API

The Authlete API is for implementations of the <b>federation registration
endpoint</b> that accepts "explicit client registration". Its details are
defined in <a href="https://openid.net/specs/openid-connect-federation-1_0.html"
>OpenID Connect Federation 1.0</a>.
</p>

<p>
The endpoint accepts `POST` requests whose `Content-Type`
is either of the following.
</p>

<ol>

	<li>`application/entity-statement+jwt`
	<li>`application/trust-chain+json`

</ol>

<p>
When the `Content-Type` of a request is
`application/entity-statement+jwt`, the content of the request is
the entity configuration of a relying party that is to be registered.
In this case, the implementation of the federation registration endpoint
should call Authlete's `/federation/registration` API with the
entity configuration set to the `entityConfiguration` request
parameter.
</p>

<p>
On the other hand, when the `Content-Type` of a request is
`application/trust-chain+json`, the content of the request is a
JSON array that contains entity statements in JWT format. The sequence
of the entity statements composes the trust chain of a relying party
that is to be registered. In this case, the implementation of the
federation registration endpoint should call Authlete's
`/federation/registration` API with the trust chain set to the
`trustChain` request parameter.
</p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFederationRegistrationApiRequest
*/
func (a *FederationEndpointApiService) FederationRegistrationApi(ctx context.Context) ApiFederationRegistrationApiRequest {
	return ApiFederationRegistrationApiRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FederationRegistrationResponse
func (a *FederationEndpointApiService) FederationRegistrationApiExecute(r ApiFederationRegistrationApiRequest) (*FederationRegistrationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FederationRegistrationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FederationEndpointApiService.FederationRegistrationApi")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/federation/registration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.federationRegistrationRequest == nil {
		return localVarReturnValue, nil, reportError("federationRegistrationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.federationRegistrationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Result
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
