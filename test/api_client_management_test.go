/*
Authlete API

Testing ClientManagementApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authlete

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/authlete/openapi-for-go"
)

func Test_authlete_ClientManagementApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientManagementApiService ClientAuthorizationDeleteApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var subject string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientAuthorizationDeleteApi(context.Background(), clientId, subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientAuthorizationGetListApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subject string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientAuthorizationGetListApi(context.Background(), subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientAuthorizationUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientAuthorizationUpdateApi(context.Background(), clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientCreateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientManagementApi.ClientCreateApi(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientDeleteApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string

		httpRes, err := apiClient.ClientManagementApi.ClientDeleteApi(context.Background(), clientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientGetApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientGetApi(context.Background(), clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientGetListApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientManagementApi.ClientGetListApi(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientGrantedScopesDeleteApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var subject string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientGrantedScopesDeleteApi(context.Background(), clientId, subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientGrantedScopesGetApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var subject string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientGrantedScopesGetApi(context.Background(), clientId, subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientSecretRefreshApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientIdentifier string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientSecretRefreshApi(context.Background(), clientIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientSecretUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientIdentifier string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientSecretUpdateApi(context.Background(), clientIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementApiService ClientUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string

		resp, httpRes, err := apiClient.ClientManagementApi.ClientUpdateApi(context.Background(), clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
