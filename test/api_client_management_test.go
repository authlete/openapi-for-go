/*
Authlete API Explorer

Testing ClientManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authlete

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/authlete/openapi-for-go/v3"
)

func Test_authlete_ClientManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientManagementAPIService ClientAuthorizationDeleteApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string
		var subject string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientAuthorizationDeleteApi(context.Background(), serviceId, clientId, subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientAuthorizationGetListApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var subject string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientAuthorizationGetListApi(context.Background(), serviceId, subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientAuthorizationUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientAuthorizationUpdateApi(context.Background(), serviceId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientCreateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientCreateApi(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientDeleteApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string

		httpRes, err := apiClient.ClientManagementAPI.ClientDeleteApi(context.Background(), serviceId, clientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientExtensionRequestablesScopesDeleteApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string

		httpRes, err := apiClient.ClientManagementAPI.ClientExtensionRequestablesScopesDeleteApi(context.Background(), serviceId, clientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientExtensionRequestablesScopesGetApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientExtensionRequestablesScopesGetApi(context.Background(), serviceId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientExtensionRequestablesScopesUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientExtensionRequestablesScopesUpdateApi(context.Background(), serviceId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientFlagUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientIdentifier string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientFlagUpdateApi(context.Background(), serviceId, clientIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientGetApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientGetApi(context.Background(), serviceId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientGetListApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientGetListApi(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientGrantedScopesDeleteApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string
		var subject string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientGrantedScopesDeleteApi(context.Background(), serviceId, clientId, subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientGrantedScopesGetApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string
		var subject string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientGrantedScopesGetApi(context.Background(), serviceId, clientId, subject).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientSecretRefreshApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientIdentifier string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientSecretRefreshApi(context.Background(), serviceId, clientIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientSecretUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientIdentifier string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientSecretUpdateApi(context.Background(), serviceId, clientIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientManagementAPIService ClientUpdateApi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var clientId string

		resp, httpRes, err := apiClient.ClientManagementAPI.ClientUpdateApi(context.Background(), serviceId, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
