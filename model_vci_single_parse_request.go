/*
Authlete API

Authlete API Document. 

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
)

// checks if the VciSingleParseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VciSingleParseRequest{}

// VciSingleParseRequest struct for VciSingleParseRequest
type VciSingleParseRequest struct {
	// The access token that came along with the credential request.
	AccessToken *string `json:"accessToken,omitempty"`
	// The message body of the credential request.
	RequestContent *string `json:"requestContent,omitempty"`
}

// NewVciSingleParseRequest instantiates a new VciSingleParseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVciSingleParseRequest() *VciSingleParseRequest {
	this := VciSingleParseRequest{}
	return &this
}

// NewVciSingleParseRequestWithDefaults instantiates a new VciSingleParseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVciSingleParseRequestWithDefaults() *VciSingleParseRequest {
	this := VciSingleParseRequest{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *VciSingleParseRequest) GetAccessToken() string {
	if o == nil || isNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VciSingleParseRequest) GetAccessTokenOk() (*string, bool) {
	if o == nil || isNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *VciSingleParseRequest) HasAccessToken() bool {
	if o != nil && !isNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *VciSingleParseRequest) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetRequestContent returns the RequestContent field value if set, zero value otherwise.
func (o *VciSingleParseRequest) GetRequestContent() string {
	if o == nil || isNil(o.RequestContent) {
		var ret string
		return ret
	}
	return *o.RequestContent
}

// GetRequestContentOk returns a tuple with the RequestContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VciSingleParseRequest) GetRequestContentOk() (*string, bool) {
	if o == nil || isNil(o.RequestContent) {
		return nil, false
	}
	return o.RequestContent, true
}

// HasRequestContent returns a boolean if a field has been set.
func (o *VciSingleParseRequest) HasRequestContent() bool {
	if o != nil && !isNil(o.RequestContent) {
		return true
	}

	return false
}

// SetRequestContent gets a reference to the given string and assigns it to the RequestContent field.
func (o *VciSingleParseRequest) SetRequestContent(v string) {
	o.RequestContent = &v
}

func (o VciSingleParseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VciSingleParseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	if !isNil(o.RequestContent) {
		toSerialize["requestContent"] = o.RequestContent
	}
	return toSerialize, nil
}

type NullableVciSingleParseRequest struct {
	value *VciSingleParseRequest
	isSet bool
}

func (v NullableVciSingleParseRequest) Get() *VciSingleParseRequest {
	return v.value
}

func (v *NullableVciSingleParseRequest) Set(val *VciSingleParseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVciSingleParseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVciSingleParseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVciSingleParseRequest(val *VciSingleParseRequest) *NullableVciSingleParseRequest {
	return &NullableVciSingleParseRequest{value: val, isSet: true}
}

func (v NullableVciSingleParseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVciSingleParseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


