/*
Authlete API

Authlete API Document. 

API version: 2.2.30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// ClientType The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1) for details. 
type ClientType string

// List of client_type
const (
	CLIENTTYPE_PUBLIC ClientType = "PUBLIC"
	CLIENTTYPE_CONFIDENTIAL ClientType = "CONFIDENTIAL"
)

// All allowed values of ClientType enum
var AllowedClientTypeEnumValues = []ClientType{
	"PUBLIC",
	"CONFIDENTIAL",
}

func (v *ClientType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientType(value)
	for _, existing := range AllowedClientTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientType", value)
}

// NewClientTypeFromValue returns a pointer to a valid ClientType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientTypeFromValue(v string) (*ClientType, error) {
	ev := ClientType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientType: valid values are %v", v, AllowedClientTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientType) IsValid() bool {
	for _, existing := range AllowedClientTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to client_type value
func (v ClientType) Ptr() *ClientType {
	return &v
}

type NullableClientType struct {
	value *ClientType
	isSet bool
}

func (v NullableClientType) Get() *ClientType {
	return v.value
}

func (v *NullableClientType) Set(val *ClientType) {
	v.value = val
	v.isSet = true
}

func (v NullableClientType) IsSet() bool {
	return v.isSet
}

func (v *NullableClientType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientType(val *ClientType) *NullableClientType {
	return &NullableClientType{value: val, isSet: true}
}

func (v NullableClientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

