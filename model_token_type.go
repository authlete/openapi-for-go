/*
Authlete API

Authlete API Document. 

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authlete

import (
	"encoding/json"
	"fmt"
)

// TokenType The grant type of the access token when the access token was created. 
type TokenType string

// List of token_type
const (
	TOKENTYPE_URNIETFPARAMSOAUTHTOKEN_TYPEJWT TokenType = "urn:ietf:params:oauth:token-type:jwt"
	TOKENTYPE_URNIETFPARAMSOAUTHTOKEN_TYPEACCESS_TOKEN TokenType = "urn:ietf:params:oauth:token-type:access_token"
	TOKENTYPE_URNIETFPARAMSOAUTHTOKEN_TYPEREFRESH_TOKEN TokenType = "urn:ietf:params:oauth:token-type:refresh_token"
	TOKENTYPE_URNIETFPARAMSOAUTHTOKEN_TYPEID_TOKEN TokenType = "urn:ietf:params:oauth:token-type:id_token"
	TOKENTYPE_URNIETFPARAMSOAUTHTOKEN_TYPESAML1 TokenType = "urn:ietf:params:oauth:token-type:saml1"
	TOKENTYPE_URNIETFPARAMSOAUTHTOKEN_TYPESAML2 TokenType = "urn:ietf:params:oauth:token-type:saml2"
	TOKENTYPE_DEVICE_CODE TokenType = "DEVICE_CODE"
	TOKENTYPE_TOKEN_EXCHANGE TokenType = "TOKEN_EXCHANGE"
	TOKENTYPE_JWT_BEARER TokenType = "JWT_BEARER"
)

// All allowed values of TokenType enum
var AllowedTokenTypeEnumValues = []TokenType{
	"urn:ietf:params:oauth:token-type:jwt",
	"urn:ietf:params:oauth:token-type:access_token",
	"urn:ietf:params:oauth:token-type:refresh_token",
	"urn:ietf:params:oauth:token-type:id_token",
	"urn:ietf:params:oauth:token-type:saml1",
	"urn:ietf:params:oauth:token-type:saml2",
	"DEVICE_CODE",
	"TOKEN_EXCHANGE",
	"JWT_BEARER",
}

func (v *TokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenType(value)
	for _, existing := range AllowedTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenType", value)
}

// NewTokenTypeFromValue returns a pointer to a valid TokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenTypeFromValue(v string) (*TokenType, error) {
	ev := TokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenType: valid values are %v", v, AllowedTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenType) IsValid() bool {
	for _, existing := range AllowedTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to token_type value
func (v TokenType) Ptr() *TokenType {
	return &v
}

type NullableTokenType struct {
	value *TokenType
	isSet bool
}

func (v NullableTokenType) Get() *TokenType {
	return v.value
}

func (v *NullableTokenType) Set(val *TokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenType(val *TokenType) *NullableTokenType {
	return &NullableTokenType{value: val, isSet: true}
}

func (v NullableTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

