openapi: 3.0.3
info:
  description: |
    Authlete API Document.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Authlete API
  version: 2.2.25
servers:
- description: Shared production server.
  url: https://api.authlete.com
tags:
- description: desc1
  name: Service Management
- description: desc1
  name: Client Management
- description: desc1
  name: Authorization Endpoint
- description: desc1
  name: Token Endpoint
- description: desc1
  name: Introspection Endpoint
- description: desc1
  name: Revocation Endpoint
- description: desc1
  name: UserInfo Endpoint
- description: desc1
  name: JWK Set Endpoint
- description: desc1
  name: Discovery Endpoint
- description: desc1
  name: Configuration Endpoint
- description: desc1
  name: Dynamic Client Registration
- description: desc1
  name: CIBA
- description: desc1
  name: Device Flow
- description: desc1
  name: Token Operations
- description: desc1
  name: Jose Object
paths:
  /api/service/get/{serviceApiKey}:
    get:
      description: |
        Get a service.
      operationId: service_get_api
      parameters:
      - description: The API key of a service.
        in: path
        name: serviceApiKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                accessTokenDuration: 3600
                accessTokenType: Bearer
                allowableClockSkew: 0
                apiKey: 21653835348762
                apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authorizationEndpoint: https://my-service.example.com/authz
                authorizationResponseDuration: 0
                backchannelAuthReqIdDuration: 0
                backchannelBindingMessageRequiredInFapi: false
                backchannelPollingInterval: 0
                backchannelUserCodeParameterSupported: false
                claimShortcutRestrictive: false
                clientIdAliasEnabled: true
                clientsPerDeveloper: 0
                createdAt: 1639373421000
                dcrScopeUsedAsRequestable: false
                deviceFlowCodeDuration: 0
                deviceFlowPollingInterval: 0
                directAuthorizationEndpointEnabled: false
                directIntrospectionEndpointEnabled: false
                directJwksEndpointEnabled: false
                directRevocationEndpointEnabled: false
                directTokenEndpointEnabled: false
                directUserInfoEndpointEnabled: false
                dynamicRegistrationSupported: false
                errorDescriptionOmitted: false
                errorUriOmitted: false
                frontChannelRequestObjectEncryptionRequired: false
                grantManagementActionRequired: false
                hsmEnabled: false
                idTokenDuration: 0
                introspectionEndpoint: https://my-service.example.com/introspection
                issSuppressed: false
                issuer: https://my-service.example.com
                metadata:
                - key: clientCount
                  value: "1"
                missingClientIdAllowed: false
                modifiedAt: 1639373421000
                mutualTlsValidatePkiCertChain: false
                nbfOptional: false
                number: 5041
                parRequired: false
                pkceRequired: true
                pkceS256Required: false
                pushedAuthReqDuration: 0
                refreshTokenDuration: 3600
                refreshTokenDurationKept: false
                refreshTokenDurationReset: false
                refreshTokenKept: false
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                revocationEndpoint: https://my-service.example.com/revocation
                scopeRequired: false
                serviceName: My service
                serviceOwnerNumber: 2
                singleAccessTokenPerSubject: false
                supportedClaimTypes:
                - NORMAL
                supportedDisplays:
                - PAGE
                supportedGrantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                supportedIntrospectionAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedResponseTypes:
                - CODE
                supportedRevocationAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedScopes:
                - defaultEntry: false
                  description: A permission to read your history.
                  name: history.read
                - defaultEntry: false
                  description: A permission to read your timeline.
                  name: timeline.read
                supportedTokenAuthMethods:
                - CLIENT_SECRET_BASIC
                tlsClientCertificateBoundAccessTokens: false
                tokenEndpoint: https://my-service.example.com/token
                tokenExpirationLinked: false
                traditionalRequestObjectProcessingApplied: false
                unauthorizedOnClientConfigSupported: false
                userCodeLength: 0
              schema:
                $ref: '#/components/schemas/Service'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /service/get/{serviceApiKey}, TLS must be\
                  \ used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /service/get/{serviceApiKey}, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /service/get/{serviceApiKey}, The service\
                  \ owner (API Key = 9503564192) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /service/get/{serviceApiKey}, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: "/api/service/get/{serviceApiKey} API"
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/service/get/21653835348762 \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long serviceApiKey = ...;

          api.getService(serviceApiKey);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long serviceApiKey = ...;

          await api.GetService(serviceApiKey);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $serviceApiKey = ...;

          $api.getService($serviceApiKey);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service_api_key = ...

          api.service_get(service_api_key)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          serviceApiKey = ...

          api.getService(serviceApiKey)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          serviceApiKey := ...

          api.GetService(serviceApiKey)
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst serviceApiKey = ...;\n\nawait api.getService(serviceApiKey);\n"
  /api/service/get/list:
    get:
      description: |
        Get a list of services.
      operationId: service_get_list_api
      parameters:
      - description: Start index (inclusive) of the result set. The default value
          is 0. Must not be a negative number.
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
      - description: End index (exclusive) of the result set. The default value is
          5. Must not be a negative number.
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                start: 0
                end: 5
                totalCount: 1
                services:
                - accessTokenDuration: 3600
                  accessTokenType: Bearer
                  allowableClockSkew: 0
                  apiKey: 21653835348762
                  apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authorizationEndpoint: https://as.example.com/authz
                  authorizationResponseDuration: 0
                  backchannelAuthReqIdDuration: 0
                  backchannelBindingMessageRequiredInFapi: false
                  backchannelPollingInterval: 0
                  backchannelUserCodeParameterSupported: false
                  claimShortcutRestrictive: false
                  clientIdAliasEnabled: true
                  clientsPerDeveloper: 0
                  createdAt: 1639373421000
                  dcrScopeUsedAsRequestable: false
                  deviceFlowCodeDuration: 0
                  deviceFlowPollingInterval: 0
                  directAuthorizationEndpointEnabled: false
                  directIntrospectionEndpointEnabled: false
                  directJwksEndpointEnabled: false
                  directRevocationEndpointEnabled: false
                  directTokenEndpointEnabled: false
                  directUserInfoEndpointEnabled: false
                  dynamicRegistrationSupported: false
                  errorDescriptionOmitted: false
                  errorUriOmitted: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantManagementActionRequired: false
                  hsmEnabled: false
                  idTokenDuration: 0
                  introspectionEndpoint: https://my-service.example.com/introspection
                  issSuppressed: false
                  issuer: https://my-service.example.com
                  metadata:
                  - key: clientCount
                    value: "1"
                  missingClientIdAllowed: false
                  modifiedAt: 1639373421000
                  mutualTlsValidatePkiCertChain: false
                  nbfOptional: false
                  number: 5041
                  parRequired: false
                  pkceRequired: true
                  pkceS256Required: false
                  pushedAuthReqDuration: 0
                  refreshTokenDuration: 3600
                  refreshTokenDurationKept: false
                  refreshTokenDurationReset: false
                  refreshTokenKept: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  revocationEndpoint: https://my-service.example.com/revocation
                  scopeRequired: false
                  serviceName: My service
                  serviceOwnerNumber: 2
                  singleAccessTokenPerSubject: false
                  supportedClaimTypes:
                  - NORMAL
                  supportedDisplays:
                  - PAGE
                  supportedGrantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  supportedIntrospectionAuthMethods:
                  - CLIENT_SECRET_BASIC
                  supportedResponseTypes:
                  - CODE
                  supportedRevocationAuthMethods:
                  - CLIENT_SECRET_BASIC
                  supportedScopes:
                  - defaultEntry: false
                    description: A permission to read your history.
                    name: history.read
                  - defaultEntry: false
                    description: A permission to read your timeline.
                    name: timeline.read
                  supportedTokenAuthMethods:
                  - CLIENT_SECRET_BASIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenEndpoint: https://my-service.example.com/token
                  tokenExpirationLinked: false
                  traditionalRequestObjectProcessingApplied: false
                  unauthorizedOnClientConfigSupported: false
                  userCodeLength: 0
              schema:
                $ref: '#/components/schemas/service_get_list_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /service/get/list, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /service/get/list, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /service/get/list, The service owner (API\
                  \ Key = 9503564192) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /service/get/list, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: /api/service/get/list API
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/service/get/list?start=0\&end=5 \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nint start = 0;\nint end = 5;\n\napi.getServiceList(start, end);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nint start = 0;\nint end = 5;\n\nawait api.GetServiceList(start, end);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$start = 0;\n\
          $end = 5;\n\n$api.getServiceList($start, $end);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nreq = { start: 0, end:\
          \ 5 }\n\napi.service_get_list(req)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nstart = 0\nend = 5\n\n\
          api.getServiceList(start, end)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nstart := 0\nend := 5\n\napi.GetServiceList(start,\
          \ end)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst start = 0;\nconst end = 5;\n\nawait\
          \ api.getServiceList(start, end);\n"
  /api/service/create:
    post:
      description: |
        Create a new service.
      operationId: service_create_api
      requestBody:
        content:
          application/json:
            example:
              serviceName: My service
              issuer: https://my-service.example.com
              clientIdAliasEnabled: true
              supportedGrantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              supportedResponseTypes:
              - CODE
              authorizationEndpoint: https://my-service.example.com/authz
              pkceRequired: true
              tokenEndpoint: https://my-service.example.com/token
              supportedTokenAuthMethods:
              - CLIENT_SECRET_BASIC
              revocationEndpoint: https://my-service.example.com/revocation
              supportedRevocationAuthMethods:
              - CLIENT_SECRET_BASIC
              introspectionEndpoint: https://my-service.example.com/introspection
              supportedIntrospectionAuthMethods:
              - CLIENT_SECRET_BASIC
              accessTokenType: Bearer
              accessTokenDuration: 3600
              refreshTokenDuration: 3600
              supportedScopes:
              - name: timeline.read
                defaultEntry: false
                description: A permission to read your timeline.
              - name: history.read
                defaultEntry: false
                description: A permission to read your history.
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                accessTokenDuration: 3600
                accessTokenType: Bearer
                allowableClockSkew: 0
                apiKey: 21653835348762
                apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authorizationEndpoint: https://my-service.example.com/authz
                authorizationResponseDuration: 0
                backchannelAuthReqIdDuration: 0
                backchannelBindingMessageRequiredInFapi: false
                backchannelPollingInterval: 0
                backchannelUserCodeParameterSupported: false
                claimShortcutRestrictive: false
                clientIdAliasEnabled: true
                clientsPerDeveloper: 0
                createdAt: 1639373421000
                dcrScopeUsedAsRequestable: false
                deviceFlowCodeDuration: 0
                deviceFlowPollingInterval: 0
                directAuthorizationEndpointEnabled: false
                directIntrospectionEndpointEnabled: false
                directJwksEndpointEnabled: false
                directRevocationEndpointEnabled: false
                directTokenEndpointEnabled: false
                directUserInfoEndpointEnabled: false
                dynamicRegistrationSupported: false
                errorDescriptionOmitted: false
                errorUriOmitted: false
                frontChannelRequestObjectEncryptionRequired: false
                grantManagementActionRequired: false
                hsmEnabled: false
                idTokenDuration: 0
                introspectionEndpoint: https://my-service.example.com/introspection
                issSuppressed: false
                issuer: https://my-service.example.com
                metadata:
                - key: clientCount
                  value: "0"
                missingClientIdAllowed: false
                modifiedAt: 1639373421000
                mutualTlsValidatePkiCertChain: false
                nbfOptional: false
                number: 5041
                parRequired: false
                pkceRequired: true
                pkceS256Required: false
                pushedAuthReqDuration: 0
                refreshTokenDuration: 3600
                refreshTokenDurationKept: false
                refreshTokenDurationReset: false
                refreshTokenKept: false
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                revocationEndpoint: https://my-service.example.com/revocation
                scopeRequired: false
                serviceName: My service
                serviceOwnerNumber: 2
                singleAccessTokenPerSubject: false
                supportedClaimTypes:
                - NORMAL
                supportedDisplays:
                - PAGE
                supportedGrantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                supportedIntrospectionAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedResponseTypes:
                - CODE
                supportedRevocationAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedScopes:
                - defaultEntry: false
                  description: A permission to read your history.
                  name: history.read
                - defaultEntry: false
                  description: A permission to read your timeline.
                  name: timeline.read
                supportedTokenAuthMethods:
                - CLIENT_SECRET_BASIC
                tlsClientCertificateBoundAccessTokens: false
                tokenEndpoint: https://my-service.example.com/token
                tokenExpirationLinked: false
                traditionalRequestObjectProcessingApplied: false
                unauthorizedOnClientConfigSupported: false
                userCodeLength: 0
              schema:
                $ref: '#/components/schemas/Service'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /service/create, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /service/create, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /service/create, The service owner (API\
                  \ Key = 9503564192) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /service/create, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: /api/service/create API
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/service/create \\\n\
          -H 'Content-Type:application/json' \\\n-u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'\
          \ \\\n-d '{ \"serviceName\": \"My Service\", ... }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          Service service = new Service();
          service.setServiceName("My Service");
          ...

          api.createService(service);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          Service service = new Service();
          service.ServiceName = "My Service";
          ...

          await api.CreateService(service);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $service = new Service();
          $service.setServiceName("My Service");
          ...

          $api.createService($service);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service = Authlete::Model::Service.new
          service.service_name = 'My Service'
          ...

          api.service_create(service)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          service = Service()
          service.serviceName = 'My Service'
          ...

          api.createService(service)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nservice := dto.Service{}\n\
          service.ServiceName = \"My Service\"\n...\n\napi.CreateService(&service)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst service = new Service();\nservice.serviceName\
          \ = 'My Service';\n...\n\nawait api.createService(service);\n"
  /api/service/update/{serviceApiKey}:
    post:
      description: |
        Update a service.
      operationId: service_update_api
      parameters:
      - description: The API key of the target service.
        in: path
        name: serviceApiKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              accessTokenDuration: 3600
              accessTokenType: Bearer
              allowableClockSkew: 0
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
              authorizationEndpoint: https://my-service.example.com/authz
              authorizationResponseDuration: 0
              backchannelAuthReqIdDuration: 0
              backchannelBindingMessageRequiredInFapi: false
              backchannelPollingInterval: 0
              backchannelUserCodeParameterSupported: false
              claimShortcutRestrictive: false
              clientIdAliasEnabled: true
              clientsPerDeveloper: 0
              dcrScopeUsedAsRequestable: false
              deviceFlowCodeDuration: 0
              deviceFlowPollingInterval: 0
              directAuthorizationEndpointEnabled: false
              directIntrospectionEndpointEnabled: false
              directJwksEndpointEnabled: false
              directRevocationEndpointEnabled: false
              directTokenEndpointEnabled: false
              directUserInfoEndpointEnabled: false
              dynamicRegistrationSupported: false
              errorDescriptionOmitted: false
              errorUriOmitted: false
              frontChannelRequestObjectEncryptionRequired: false
              grantManagementActionRequired: false
              hsmEnabled: false
              idTokenDuration: 0
              introspectionEndpoint: https://my-service.example.com/introspection
              issSuppressed: false
              issuer: https://my-service.example.com
              missingClientIdAllowed: false
              mutualTlsValidatePkiCertChain: false
              nbfOptional: false
              parRequired: false
              pkceRequired: true
              pkceS256Required: false
              pushedAuthReqDuration: 0
              refreshTokenDuration: 3600
              refreshTokenDurationKept: false
              refreshTokenDurationReset: false
              refreshTokenKept: false
              requestObjectEncryptionAlgMatchRequired: false
              requestObjectEncryptionEncMatchRequired: false
              requestObjectRequired: false
              revocationEndpoint: https://my-service.example.com/revocation
              scopeRequired: false
              serviceName: My updated service
              singleAccessTokenPerSubject: false
              supportedClaimTypes:
              - NORMAL
              supportedDisplays:
              - PAGE
              supportedGrantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              supportedIntrospectionAuthMethods:
              - CLIENT_SECRET_BASIC
              supportedResponseTypes:
              - CODE
              supportedRevocationAuthMethods:
              - CLIENT_SECRET_BASIC
              supportedScopes:
              - defaultEntry: false
                description: A permission to read your history.
                name: history.read
              - defaultEntry: false
                description: A permission to read your timeline.
                name: timeline.read
              supportedTokenAuthMethods:
              - CLIENT_SECRET_BASIC
              tlsClientCertificateBoundAccessTokens: false
              tokenEndpoint: https://my-service.example.com/token
              tokenExpirationLinked: false
              traditionalRequestObjectProcessingApplied: false
              unauthorizedOnClientConfigSupported: false
              userCodeLength: 0
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /service/update/{serviceApiKey}, TLS must\
                  \ be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /service/update/{serviceApiKey}, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /service/update/{serviceApiKey}, The service\
                  \ owner (API Key = 9503564192) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /service/update/{serviceApiKey}, Authlete\
                  \ Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: "/api/service/update/{serviceApiKey} API"
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/service/update/21653835348762\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'\
          \ \\\n-d '{ \"serviceName\": \"My updated service\", ... }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          // Get an existing service.
          long serviceApiKey = ...;
          Service service = api.getService(serviceApiKey);

          // Update "service name".
          service.setAServiceName("My updated service");

          api.updateService(service);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          // Get an existing service.
          long serviceApiKey = ...;
          Service service = api.GetService(serviceApiKey);

          // Update "service name".
          service.ServiceName = "My updated service";

          await api.UpdateService(service);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          // Get an existing service.
          $serviceApiKey = ...;
          $api.getService($serviceApiKey);

          // Update "service name".
          service.setServiceName("My updated service");

          $api.updateService($service);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service_api_key = ...
          api.service_get(service_api_key)

          # Update "service name".
          service.serviceName = 'My updated service';

          api.service_update(service)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          # Get an existing service.
          serviceApiKey = ...
          service = api.getService(serviceApiKey)

          # Update "service name".
          service.serviceName = 'My updated service'

          api.updateService(service)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\n// Get an existing service.\n\
          serviceApiKey := ...\nservice, _ := api.GetService(serviceApiKey)\n\n//\
          \ Update \"service name\".\nservice.ServiceName := \"My updated service\"\
          \n\napi.UpdateService(&service)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\n// Get an existing service.\nconst serviceApiKey\
          \ = ...;\nconst service = await api.getService(serviceApiKey);\n\n// Update\
          \ \"service name\".\nservice.serviceName = 'My updated service';\n\nawait\
          \ api.updateService(service);\n"
  /api/service/delete/{serviceApiKey}:
    delete:
      description: |
        Delete a service.
      operationId: service_delete_api
      parameters:
      - description: The API key of the target service.
        in: path
        name: serviceApiKey
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The service was successfully deleted.
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /service/delete/{serviceApiKey}, TLS must\
                  \ be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /service/delete/{serviceApiKey}, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /service/delete/{serviceApiKey}, The service\
                  \ owner (API Key = 9503564192) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /service/delete/{serviceApiKey}, Authlete\
                  \ Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: "/api/service/delete/{serviceApiKey} API"
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X DELETE https://api.authlete.com/api/service/delete/21653835348762 \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long serviceApiKey = ...;

          api.deleteService(serviceApiKey);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long serviceApiKey = ...;

          await api.DeleteService(serviceApiKey);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $serviceApiKey = ...;

          $api.deleteService($serviceApiKey);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service_api_key = ...

          api.service_delete(service_api_key)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          serviceApiKey = ...

          api.deleteService(serviceApiKey)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          serviceApiKey := ...

          api.DeleteService(serviceApiKey)
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst serviceApiKey = ...;\n\nawait api.deleteService(serviceApiKey);\n"
  /api/client/get/{clientId}:
    get:
      description: |
        Get a client.
      operationId: client_get_api
      parameters:
      - description: A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                applicationType: WEB
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639468356000
                number: 6164
                parRequired: false
                redirectUris:
                - https://my-client.example.com/cb1
                - https://my-client.example.com/cb2
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                - CODE
                - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
              schema:
                $ref: '#/components/schemas/Client'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/get/{clientId}, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/get/{clientId}, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/get/{clientId}, The service (API\
                  \ Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/get/{clientId}, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/get/{clientId} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/get/26478243745571 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long clientId = ...;

          api.getClient(clientId);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long clientId = ...;

          await api.GetClient(clientId);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $clientId = ...;

          $api.getClient($clientId);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client_id = ...

          api.client_get(client_id)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientId = ...

          api.getClient(clientId)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          clientId := ...

          api.GetClient(clientId)
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst clientId = ...;\n\nawait api.getClient(clientId);\n"
  /api/client/get/list:
    get:
      description: |
        Get a list of clients.
      operationId: client_get_list_api
      parameters:
      - description: "The developer of client applications. The default value is null.\
          \ If this parameter is not set\nto `null`, client application of the specified\
          \ developer are returned. Otherwise, all client\napplications that belong\
          \ to the service are returned.\n"
        in: query
        name: developer
        required: false
        schema:
          type: string
      - description: Start index (inclusive) of the result set. The default value
          is 0. Must not be a negative number.
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
      - description: End index (exclusive) of the result set. The default value is
          5. Must not be a negative number.
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                clients:
                - applicationType: WEB
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26478243745571
                  clientIdAlias: my-client
                  clientIdAliasEnabled: true
                  clientName: My client
                  clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                  clientType: CONFIDENTIAL
                  createdAt: 1639468356000
                  defaultMaxAge: 0
                  derivedSectorIdentifier: my-client.example.com
                  developer: john
                  dynamicallyRegistered: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  idTokenSignAlg: RS256
                  modifiedAt: 1639468356000
                  number: 6164
                  parRequired: false
                  redirectUris:
                  - https://my-client.example.com/cb1
                  - https://my-client.example.com/cb2
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  responseTypes:
                  - CODE
                  - TOKEN
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                developer: john
                end: 3
                start: 0
                totalCount: 1
              schema:
                $ref: '#/components/schemas/client_get_list_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/get/list, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/get/list, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/get/list, The service (API Key =\
                  \ 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/get/list, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/get/list API
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/get/list?developer=john\&start=0\&end=5 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nString developer = \"john\";\nint start = 0;\nint end = 5;\n\napi.getClientList(developer,\
          \ start, end);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nString developer = \"john\";\nint start = 0;\nint end = 5;\n\nawait api.GetClientList(developer,\
          \ start, end);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$developer =\
          \ \"john\";\n$start = 0;\n$end = 5;\n\n$api.getClientList($developer, $start,\
          \ $end);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nreq = { developer: 'john',\
          \ start: 0, end: 5 }\n\napi.client_list_get(req)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\ndeveloper = 'john'\nstart\
          \ = 0\nend = 5\n\napi.getClientList(developer, start, end)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\ndeveloper = \"john\"\nstart\
          \ := 0\nend := 5\n\napi.GetClientList(developer, start, end)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst developer = 'john';\nconst start\
          \ = 0;\nconst end = 5;\n\nawait api.getClientList(developer, start, end);\n"
  /api/client/create:
    post:
      description: |
        Create a new client.
      operationId: client_create_api
      requestBody:
        content:
          application/json:
            example:
              developer: john
              clientName: My Client
              clientIdAlias: my-client
              clientIdAliasEnabled: true
              clientType: CONFIDENTIAL
              applicationType: WEB
              grantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              responseTypes:
              - CODE
              - TOKEN
              redirectUris:
              - https://my-client.example.com/cb1
              - https://my-client.example.com/cb2
              tokenAuthMethod: CLIENT_SECRET_BASIC
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
            schema:
              $ref: '#/components/schemas/Client'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                applicationType: WEB
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639468356000
                number: 6164
                parRequired: false
                redirectUris:
                - https://my-client.example.com/cb1
                - https://my-client.example.com/cb2
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                - CODE
                - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
              schema:
                $ref: '#/components/schemas/Client'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/create, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/create, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/create, The service (API Key = 21653835348762)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/create, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/create API
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/client/create \\\n-H\
          \ 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"developer\": \"john\", \"clientName\": \"My Client\", ...\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          Client client = new Client();
          client.setDeveloper("john");
          client.setClientName("My Client");
          ...

          api.createClient(client);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          Client client = new Client();
          client.Developer = "john";
          client.ClientName = "My Client";
          ...

          await api.CreateClient(client);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $client = new Client();
          $client.setDeveloper("john");
          $client.setClientName("My Client");
          ...

          $api.createClient($client);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client = Authlete::Model::Client.new
          client.developer = 'john'
          client.client_name = 'My Client'
          ...

          api.client_create(client)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          client = Client()
          client.developer = 'john'
          client.clientName = 'My Client'
          ...

          api.createClient(client)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nclient := dto.Client{}\nclient.Developer\
          \ = \"john\"\nclient.ClientName = \"My Client\"\n...\n\napi.CreateClient(client)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst client = new Client();\nclient.developer\
          \ = 'john';\nclient.clientName = 'My Client';\n...\n\nawait api.createClient(client);\n"
  /api/client/update/{clientId}:
    post:
      description: |
        Update a client.
      operationId: client_update_api
      parameters:
      - description: A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              applicationType: WEB
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
              authTimeRequired: false
              bcUserCodeRequired: false
              clientIdAlias: my-client
              clientIdAliasEnabled: true
              clientName: My updated client
              clientType: CONFIDENTIAL
              defaultMaxAge: 0
              derivedSectorIdentifier: my-client.example.com
              developer: john
              dynamicallyRegistered: false
              frontChannelRequestObjectEncryptionRequired: false
              grantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              idTokenSignAlg: RS256
              parRequired: false
              redirectUris:
              - https://my-client.example.com/cb1
              - https://my-client.example.com/cb2
              requestObjectEncryptionAlgMatchRequired: false
              requestObjectEncryptionEncMatchRequired: false
              requestObjectRequired: false
              responseTypes:
              - CODE
              - TOKEN
              subjectType: PUBLIC
              tlsClientCertificateBoundAccessTokens: false
              tokenAuthMethod: CLIENT_SECRET_BASIC
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                applicationType: WEB
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My updated client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639557082764
                number: 6164
                parRequired: false
                redirectUris:
                - https://my-client.example.com/cb1
                - https://my-client.example.com/cb2
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                - CODE
                - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
              schema:
                $ref: '#/components/schemas/Client'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/update/{clientId}, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/update/{clientId}, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/update/{clientId}, The service (API\
                  \ Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/update/{clientId}, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/update/{clientId} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/client/update/26478243745571\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"clientName\": \"My updated client\", ... }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          // Get an existing client.
          long clientId = ...;
          Client client = api.getClient(clientId);

          // Update "client name".
          client.setClientName("My updated client");

          api.updateClient(client);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          // Get an existing client.
          long clientId = ...;
          Client client = api.GetClient(clientId);

          // Update "client name".
          client.ClientName = "My updated client";

          api.UpdateClient(client);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          // Get an existing client.
          $clientId = ...;
          $client = $api.getClient(clientId);

          // Update "client name".
          $client.setClientName("My updated client");

          $api.updateClient($client);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          # Get an existing client.
          client_id = ...
          client = api.client_get(client_id)

          # Update "client name".
          client.client_name = 'My updated client'

          api.client_update(client)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          # Get an existing client.
          clientId = ...
          client = api.getClient(clientId)

          # Update "client name".
          client.clientName = 'My updated client'

          api.updatedClient(client)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\n// Get an existing client.\n\
          clientId := ...\nclient, _ := api.GetClient(clientId)\n\n// Update \"client\
          \ name\".\nclient.ClientName := \"My updated client\"\n\napi.UpdateClient(&client)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\n// Get an existing client.\nconst clientId\
          \ = ...;\nconst client = await api.getClient(clientId);\n\n// Update \"\
          client name\".\nclient.clientName = 'My updated client';\n\nawait api.updateClient(client);\n"
  /api/client/delete/{clientId}:
    delete:
      description: |
        Delete a client.
      operationId: client_delete_api
      parameters:
      - description: The client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The client was successfully deleted.
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/delete/{clientId}, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/delete/{clientId}, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/delete/{clientId}, The service (API\
                  \ Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/delete/{clientId}, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/delete/{clientId} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X DELETE https://api.authlete.com/api/client/delete/26478243745571 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long clientId = ...;

          api.deleteClient(clientId);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long clientId = ...;

          await api.DeleteClient(clientId);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $clientId = ...;

          $api.deleteClient($clientId);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client_id = ...

          api.client_delete(client_id)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientId = ...

          api.deleteClient(clientId)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          clientId := ...

          api.DeleteClient(clientId)
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst clientId = ...\n\nawait api.deleteClient(clientId);\n"
  /api/client/secret/refresh/{clientIdentifier}:
    get:
      description: "Refresh the client secret of a client. A new value of the client\
        \ secret will be generated by the\nAuthlete server.\n\nIf you want to specify\
        \ a new value, use `/api/client/secret/update` API.\n"
      operationId: client_secret_refresh_api
      parameters:
      - description: |
          The client ID or the client ID alias of a client.
        in: path
        name: clientIdentifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A148001
                resultMessage: "[A148001] Successfully refreshed the client secret\
                  \ of the client (ID = 26478243745571)."
                newClientSecret: 6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA
                oldClientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
              schema:
                $ref: '#/components/schemas/client_secret_refresh_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/secret/refresh/{clientIdentifier},\
                  \ TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/secret/refresh/{clientIdentifier},\
                  \ Authorization header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/secret/refresh/{clientIdentifier},\
                  \ The service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/secret/refresh/{clientIdentifier},\
                  \ Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/secret/refresh/{clientIdentifier} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/secret/refresh/26478243745571 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          String clientIdentifier = ...;

          api.refreshClientSecret(clientIdentifier);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          string clientIdentifier = ...;

          await api.RefreshClientSecret(clientIdentifier);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $clientIdentifier = ...;

          $api.refreshClientSecret($clientIdentifier);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client_identifier = ...

          api.refresh_client_secret(client_identifier)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientIdentifier = ...

          api.refreshClientSecret(clientIdentifier)
      - lang: go
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientIdentifier = ...

          api.refreshClientSecret(clientIdentifier)
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/secret/update/{clientIdentifier}:
    post:
      description: "Update the client secret of a client.\n\nIf you want to have the\
        \ Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`\n\
        API.\n"
      operationId: client_secret_update_api
      parameters:
      - description: |
          The client ID or the client ID alias of a client.
        in: path
        name: clientIdentifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              clientSecret: my_updated_client_secret
            schema:
              $ref: '#/components/schemas/client_secret_update_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_secret_update_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A149001
                resultMessage: "[A149001] Successfully updated the client secret of\
                  \ the client (ID = 26478243745571)."
                newClientSecret: my_updated_client_secret
                oldClientSecret: 6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA
              schema:
                $ref: '#/components/schemas/client_secret_update_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/secret/update/{clientIdentifier},\
                  \ TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/secret/update/{clientIdentifier},\
                  \ Authorization header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/secret/update/{clientIdentifier},\
                  \ The service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/secret/update/{clientIdentifier},\
                  \ Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/secret/update/{clientIdentifier} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v https://api.authlete.com/api/client/secret/update/26478243745571\
          \ \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \\\
          \n-H 'Content-Type:application/json' \\\n-d '{ \"clientSecret\": \"...\"\
          \ }'\n"
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nString clientIdentifier = ...;\nString clientSecret = \"my_updated_client_secret\"\
          ;\n\napi.updateClientSecret(clientIdentifier, clientSecret);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nstring clientIdentifier = ...;\nstring clientSecret = \"my_new_client_secret\"\
          ;\n\nawait api.UpdateClientSecret(clientIdentifier, clientSecret);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$clientIdentifier\
          \ = ...;\n$clientSecret = \"my_new_client_secret\";\n\n$api.updateClientSecret($clientIdentifier,\
          \ $clientSecret);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nclient_identifier =\
          \ ...\nclient_secret = 'my_new_client_secret'\n\napi.update_client_secret(client_identifier,\
          \ client_secret)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientIdentifier = ...\n\
          clientSecret = 'my_new_client_secret'\n\napi.updateClientSecret(clientIdentifier,\
          \ clientSecret)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nclientIdentifier := ...\nclientSecret\
          \ := \"my_new_client_secret\"\n\napi.UpdateClientSecret(clientIdentifier,\
          \ clientSecret)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/authorization/get/list/{subject}:
    get:
      description: |
        Get a list of client applications that an end-user has authorized.
      operationId: client_authorization_get_list_api
      parameters:
      - description: |
          Unique user ID of an end-user.
        in: path
        name: subject
        required: true
        schema:
          type: string
      - description: |
          Unique ID of a client developer.
        in: query
        name: developer
        required: false
        schema:
          type: string
      - description: Start index of search results (inclusive). The default value
          is 0.
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          End index of search results (exclusive). The default value is 5.
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                clients:
                - applicationType: WEB
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26478243745571
                  clientIdAlias: my-client
                  clientIdAliasEnabled: true
                  clientName: My client
                  clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                  clientType: CONFIDENTIAL
                  createdAt: 1639468356000
                  defaultMaxAge: 0
                  derivedSectorIdentifier: my-client.example.com
                  developer: john
                  dynamicallyRegistered: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  idTokenSignAlg: RS256
                  modifiedAt: 1639468356000
                  number: 6164
                  parRequired: false
                  redirectUris:
                  - https://my-client.example.com/cb1
                  - https://my-client.example.com/cb2
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  responseTypes:
                  - CODE
                  - TOKEN
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                end: 5
                start: 0
                subject: john
                totalCount: 1
              schema:
                $ref: '#/components/schemas/client_authorization_get_list_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/authorization/get/list, TLS must\
                  \ be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/authorization/get/list, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/authorization/get/list, The service\
                  \ (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/authorization/get/list, Authlete\
                  \ Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/authorization/get/list/{subject} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/authorization/get/list/john?start=0\&end=5 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          ClientAuthorizationGetListRequest req = new ClientAuthorizationGetListRequest();
          req.setSubject("john");
          req.setStart(0);
          req.setEnd(5);

          api.getClientAuthorizationList(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = new AuthletePropertiesConfiguration();
          IAuthleteApi api = new AuthleteApi(conf);

          ClientAuthorizationGetListRequest req = new ClientAuthorizationGetListRequest();
          req.Subject = "john";
          req.Start = 0;
          req.End = 5;

          await api.GetClientAuthorizationList(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new ClientAuthorizationGetListRequest();
          $req.setSubject("john");
          $req.setStart(0);
          $req.setEnd(5);

          $api.getClientAuthorizationList($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::ClientAuthorizationGetListRequest.new
          req.subject = 'john'
          req.start = 0
          req.end = 5

          api.get_client_authorization_list(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = ClientAuthorizationGetListRequest()
          req.subject = 'john'
          req.start = 0
          req.end = 5

          api.getClientAuthorizationList(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.ClientAuthorizationGetListRequest{}\n\
          req.Subject = \"john\"\nreq.Start = 0\nreq.End = 5\n\napi.GetClientAuthorizationList(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/authorization/update/{clientId}:
    post:
      description: |
        Update attributes of all existing access tokens given to a client application.
      operationId: client_authorization_update_api
      parameters:
      - description: |
          A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              subject: john
              scopes:
              - history.read
            schema:
              $ref: '#/components/schemas/client_authorization_update_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_authorization_update_request'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A138001
                resultMessage: "[A138001] Updated 1 access token(s) issued to the\
                  \ client (ID = 26478243745571) of the service (API Key = 21653835348762)."
              schema:
                $ref: '#/components/schemas/client_authorization_update_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/authorization/update, TLS must be\
                  \ used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/authorization/update, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/authorization/update, The service\
                  \ (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/authorization/update, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/authorization/update/{clientId} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/client/authorization/update/26478243745571\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"subject\": \"john\", \"scopes\": [ \"history.read\" ] }'\n"
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nlong clientId = ...;\n\nClientAuthorizationUpdateRequest req = new ClientAuthorizationUpdateRequest();\n\
          req.setSubject(\"john\");\nreq.setScopes(new String[]{ \"history.read\"\
          \ });\n\napi.updateClientAuthorization(clientId, req);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nlong clientId = ...;\n\nClientAuthorizationUpdateRequest req = new ClientAuthorizationUpdateRequest();\n\
          req.Subject = \"john\";\nreq.Scopes = { \"history.read\" };\n\nawait api.UpdateClientAuthorization(clientId,\
          \ req);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$clientId = ...;\n\
          \n$req = new ClientAuthorizationUpdateRequest();\n$req.subject = \"john\"\
          ;\n$req.setScopes([ \"history.read\" ]);\n\n$api.updateClientAuthorization($clientId,\
          \ $req);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nclient_id = ...\n\n\
          req = Authlete::Model::Request::ClientAuthorizationUpdateRequest.new\nreq.subject\
          \ = 'john'\nreq.scopes = [ 'history.read' ]\n\napi.update_client_authorization(client_id,\
          \ req)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\n\nreq\
          \ = ClientAuthorizationUpdateRequest()\nreq.subject = 'john'\nreq.scopes\
          \ = [ 'history.read' ]\n\napi.updateClientAuthorization(clientId, req)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nclientId := ...\n\nreq := dto.ClientAuthorizationUpdateRequest{}\n\
          req.Subject = \"john\"\nreq.Scopes = [1]string{ \"history.read\" }\n\napi.UpdateClientAuthorization(clientId,\
          \ &req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/authorization/delete/{clientId}/{subject}:
    delete:
      description: |
        Delete all existing access tokens issued to a client application by an end-user.
      operationId: client_authorization_delete_api
      parameters:
      - description: |
          A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      - description: |
          Unique user ID of an end-user.
        in: path
        name: subject
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A137001
                resultMessage: "[A137001] Deleted 3 access token(s) issued to the\
                  \ client (ID = 26478243745571) of the service (API Key = 21653835348762)."
              schema:
                $ref: '#/components/schemas/client_authorization_delete_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/authorization/delete, TLS must be\
                  \ used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/authorization/delete, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/authorization/delete, The service\
                  \ (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/authorization/delete, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/authorization/delete/{clientId}/{subject} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X DELETE https://api.authlete.com/api/client/authorization/delete/26478243745571/john \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nlong clientId = ...;\nString subject = \"john\";\n\napi.deleteClientAuthorization(clientId,\
          \ subject);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nlong clientId = ...;\nstring subject = \"john\";\n\nawait api.DeleteClientAuthorization(clientId,\
          \ subject);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$clientId = ...;\n\
          $subject = \"john\";\n\n$api.deleteClientAuthorization($clientId, $subject);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nclient_id = ...\nsubject\
          \ = 'john'\n\napi.delete_client_authorization(client_id, subject)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\nsubject\
          \ = 'john'\n\napi.deleteClientAuthorization(clientId, subject)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nclientId := ...\nsubject :=\
          \ \"john\"\n\napi.DeleteClientAuthorization(clientId, subject)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/granted_scopes/get/{clientId}/{subject}:
    get:
      description: "Get the set of scopes that a user has granted to a client application.\n\
        \n<br>\n<details>\n<summary>Description</summary>\n\nPossible values for `requestableScopes`\
        \ parameter in the response from this API are as follows.\n\n**null**\n\n\
        The user has not granted authorization to the client application in the past,\
        \ or records about the\ncombination of the user and the client application\
        \ have been deleted from Authlete's DB.\n\n**An empty set**\n\nThe user has\
        \ granted authorization to the client application in the past, but no scopes\
        \ are associated\nwith the authorization.\n\n**A set with at least one element**\n\
        \nThe user has granted authorization to the client application in the past\
        \ and some scopes are associated\nwith the authorization. These scopes are\
        \ returned.\nExample: `[ \"profile\", \"email\" ]`\n</details>\n"
      operationId: client_granted_scopes_get_api
      parameters:
      - description: |
          A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      - description: |
          Unique user ID of an end-user.
        in: path
        name: subject
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                serviceApiKey: 21653835348762
                clientId: 26478243745571
                subject: john
                latestGrantedScopes:
                - history.read
                mergedGrantedScopes:
                - history.read
                - timeline.read
                modifiedAt: 1663144643000
              schema:
                $ref: '#/components/schemas/client_granted_scopes_get_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/granted_scopes/get/{clientId}, TLS\
                  \ must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/granted_scopes/get/{clientId}, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/granted_scopes/get/{clientId}, The\
                  \ service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/granted_scopes/get/{clientId}, Authlete\
                  \ Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/granted_scopes/get/{clientId}/{subject} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/granted_scopes/get/26478243745571/john \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nlong clientId  = 26478243745571;\nString subject = \"john\";\n\napi.getGrantedScopes(clientId,\
          \ subject);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nlong clientId  = 26478243745571;\nstring subject = \"john\";\n\nawait\
          \ api.GetGrantedScopes(clientId, subject);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$clientId = 26478243745571;\n\
          $subject = \"john\";\n\n$api.getGrantedScopes($clientId, $subject);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nclient_id = 26478243745571\n\
          subject = 'john'\n\napi.get_granted_scopes(client_id, subject)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = 26478243745571\n\
          subject = 'john'\n\napi.getGrantedScopes(clientId, subject)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nclientId := 26478243745571\n\
          subject := \"john\"\n\napi.GetGrantedScopes(clientId, subject)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/granted_scopes/delete/{clientId}/{subject}:
    delete:
      description: "Delete the set of scopes that an end-user has granted to a client\
        \ application.\n\n<br>\n<details>\n<summary>Description</summary>\n\nEven\
        \ if records about granted scopes are deleted by calling this API, existing\
        \ access tokens are\nnot deleted and scopes of existing access tokens are\
        \ not changed.\n</details>\n"
      operationId: client_granted_scopes_delete_api
      parameters:
      - description: |
          A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      - description: |
          Unique user ID of an end-user.
        in: path
        name: subject
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A140001
                resultMessage: "[A140001] There was no information about scopes granted\
                  \ to the combination of the client (ID = 26478243745571) and the\
                  \ subject (john)."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/granted_scopes/delete/{clientId},\
                  \ TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/granted_scopes/delete/{clientId},\
                  \ Authorization header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/granted_scopes/delete/{clientId},\
                  \ The service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/granted_scopes/delete/{clientId},\
                  \ Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/granted_scopes/delete/{clientId}/{subject} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X DELETE https://api.authlete.com/api/client/granted_scopes/delete/26478243745571/john \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nlong clientId  = ...;\nString subject = \"john\";\n\napi.deleteGrantedScopes(clientId,\
          \ subject);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nlong clientId  = ...;\nstring subject = \"john\";\n\nawait api.DeleteGrantedScopes(clientId,\
          \ subject);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$clientId = ...;\n\
          $subject = \"john\";\n\n$api.deleteGrantedScopes($clientId, $subject);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nclient_id = ...\nsubject\
          \ = 'john'\n\napi.delete_granted_scopes(client_id, subject)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\nsubject\
          \ = 'john'\n\napi.deleteGrantedScopes(clientId, subject)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nclientId := ...\nsubject :=\
          \ \"john\"\n\napi.DeleteGrantedScopes(clientId, subject)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/auth/authorization:
    post:
      description: "This API parses request parameters of an authorization request\
        \ and returns necessary data for the authorization server\nimplementation\
        \ to process the authorization request further.\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from within the implementation of the\
        \ authorization endpoint of\nthe service. The endpoint implementation must\
        \ extract the request parameters from the authorization\nrequest from the\
        \ client application and pass them as the value of parameters request parameter\
        \ for\nAuthlete's `/auth/authorization` API.\n\nThe value of `parameters`\
        \ is either (1) the entire query string when the HTTP method of the request\n\
        from the client application is `GET` or (2) the entire entity body (which\
        \ is formatted in\n`application/x-www-form-urlencoded`) when the HTTP method\
        \ of the request from the client application\nis `POST`.\n\nThe following\
        \ code snippet is an example in JAX-RS showing how to extract request parameters\
        \ from\nthe authorization request.\n\n```java\n@GET\npublic Response get(@Context\
        \ UriInfo uriInfo)\n{\n    // The query parameters of the authorization request.\n\
        \    String parameters = uriInfo.getRequestUri().getQuery();\n    ......\n\
        }\n\n@POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic Response\
        \ post(String parameters)\n{\n    // 'parameters' is the entity body of the\
        \ authorization request.\n    ......\n}\n```\n\nThe endpoint implementation\
        \ does not have to parse the request parameters from the client application\n\
        because Authlete's `/auth/authorization` API does it.\n\nThe response from\
        \ `/auth/authorization` API has various parameters. Among them, it is `action`\n\
        parameter that the authorization server implementation should check first\
        \ because it denotes the\nnext action that the authorization server implementation\
        \ should take. According to the value of\n`action`, the service implementation\
        \ must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen\
        \ the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request\
        \ from the authorization\nserver implementation was wrong or that an error\
        \ occurred in Authlete.\nIn either case, from the viewpoint of the client\
        \ application, it is an error on the server side.\nTherefore, the service\
        \ implementation should generate a response to the client application with\n\
        HTTP status of \"500 Internal Server Error\". Authlete recommends `application/json`\
        \ as the content\ntype although OAuth 2.0 specification does not mention the\
        \ format of the error response when the\nredirect URI is not usable.\n\nThe\
        \ value of `responseContent` is a JSON string which describes the error, so\
        \ it can be used as\nthe entity body of the response.\n\nThe following illustrates\
        \ the response which the service implementation should generate and return\n\
        to the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type:\
        \ application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n\
        ```\n\nThe endpoint implementation may return another different response to\
        \ the client application\nsince \"500 Internal Server Error\" is not required\
        \ by OAuth 2.0.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`,\
        \ it means that the request from the client application\nis invalid.\n\nA\
        \ response with HTTP status of \"400 Bad Request\" should be returned to the\
        \ client application and\nAuthlete recommends `application/json` as the content\
        \ type although OAuth 2.0 specification does\nnot mention the format of the\
        \ error response when the redirect URI is not usable.\n\nThe value of `responseContent`\
        \ is a JSON string which describes the error, so it can be used as\nthe entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation should generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation\
        \ may return another different response to the client application since\n\"\
        400 Bad Request\" is not required by OAuth 2.0.\n\n**LOCATION**\n\nWhen the\
        \ value of `action` is `LOCATION`, it means that the request from the client\
        \ application\nis invalid but the redirect URI\nto which the error should\
        \ be reported has been determined.\n\nA response with HTTP status of \"302\
        \ Found\" must be returned to the client application with `Location`\nheader\
        \ which has a redirect URI with error parameter.\n\nThe value of `responseContent`\
        \ is a redirect URI with `error` parameter, so it can be used as the\nvalue\
        \ of `Location` header.\n\nThe following illustrates the response which the\
        \ service implementation must generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 302 Found\nLocation: {responseContent}\nCache-Control: no-store\n\
        Pragma: no-cache\n```\n\n**FORM**\n\nWhen the value of `action` is `FORM`,\
        \ it means that the request from the client application is\ninvalid but the\
        \ redirect URI to which the error should be reported has been determined,\
        \ and that\nthe authorization request contains `response_mode=form_post` as\
        \ is defined in [OAuth 2.0 Form Post\nResponse Mode](https://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html).\n\
        \nThe HTTP status of the response returned to the client application should\
        \ be \"200 OK\" and the\ncontent type should be `text/html;charset=UTF-8`.\n\
        \nThe value of `responseContent` is an HTML which can be used as the entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation must generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**NO_INTERACTION**\n\
        \nWhen the value of `action` is `NO_INTERACTION`, it means that the request\
        \ from the client application\nhas no problem and requires the service to\
        \ process the request without displaying any user interface\npages for authentication\
        \ or consent. This case happens when the authorization request contains\n\
        `prompt=none`.\n\nThe service must follow the steps described below.\n\n[1]\
        \ END-USER AUTHENTICATION\n\nCheck whether an end-user has already logged\
        \ in. If an end-user has logged in, go to the next step ([MAX_AGE]).\nOtherwise,\
        \ call Authlete's `/auth/authorization/fail` API with `reason=NOT_LOGGED_IN`\
        \ and use the response from\nthe API to generate a response to the client\
        \ application.\n\n[2] MAX AGE\n\nGet the value of `maxAge` parameter from\
        \ the `/auth/authorization` API response. The value represents\nthe maximum\
        \ authentication age which has come from `max_age` request parameter or `defaultMaxAge`\n\
        configuration parameter of the client application. If the value is `0`, go\
        \ to the next step ([SUBJECT]).\nOtherwise, follow the sub steps described\
        \ below.\n\n(i) Get the time at which the end-user was authenticated. that\
        \ this value is not managed by Authlete,\nmeaning that it is expected that\
        \ the service implementation manages the value. If the service implementation\n\
        does not manage authentication time of end-users, call Authlete's `/auth/authorization/fail`\
        \ API\nwith `reason=MAX_AGE_NOT_SUPPORTED` and use the API response to generate\
        \ a response to the client\napplication.\n\n(ii) Add the value of the maximum\
        \ authentication age (which is represented in seconds) to the authentication\n\
        time. The calculated value is the expiration time.\n\n(iii) Check whether\
        \ the calculated value is equal to or greater than the current time. If this\
        \ condition\nis satisfied, go to the next step ([SUBJECT]). Otherwise, call\
        \ Authlete's `/auth/authorization/fail`\nAPI with `reason=EXCEEDS_MAX_AGE`\
        \ and use the API response to generate a response to the client\napplication.\n\
        \n[3] SUBJECT\n\nGet the value of `subject` from the `/auth/authorization`\
        \ API response. The value represents an\nend-user who the client application\
        \ expects to grant authorization. If the value is `null`, go to\nthe next\
        \ step ([ACRs]). Otherwise, follow the sub steps described below.\n\n(i) Compare\
        \ the value of the requested subject to the current end-user.\n\n(ii) If they\
        \ are equal, go to the next step ([ACRs]). If they are not equal, call Authlete's\n\
        `/auth/authorization/fail` API with `reason=DIFFERENT_SUBJECT` and use the\
        \ response from the API\nto generate a response to the client application.\n\
        \n[4] ACRs\n\nGet the value of `acrs` from the `/auth/authorization` API response.\
        \ The value represents a list\nof ACRs (Authentication Context Class References)\
        \ and comes from (1) acr claim in `claims` request\nparameter, (2) `acr_values`\
        \ request parameter, or (3) `default_acr_values` configuration parameter\n\
        of the client application.\n\nIt is ensured that all the ACRs in acrs are\
        \ supported by the authorization server implementation.\nIn other words, it\
        \ is ensured that all the ACRs are listed in `acr_values_supported` configuration\n\
        parameter of the authorization server.\n\nIf the value of ACRs is `null`,\
        \ go to the next step ([ISSUE]). Otherwise, follow the sub steps\ndescribed\
        \ below.\n\n(i) Get the ACR performed for the authentication of the current\
        \ end-user. Note that this value is\nmanaged not by Authlete but by the authorization\
        \ server implementation. (If the authorization server\nimplementation cannot\
        \ handle ACRs, it should not have listed ACRs as `acr_values_supported`.)\n\
        \n(ii) Compare the ACR value obtained in the above step to each element in\
        \ the ACR array (`acrs`)\nin the listed order.\n\n(iii) If the ACR value was\
        \ found in the array, (= the ACR performed for the authentication of the\n\
        current end-user did not match any one of the ACRs requested by the client\
        \ application), check\nwhether one of the requested ACRs must be satisfied\
        \ or not using `acrEssential` parameter in the\n`/auth/authorization` API\
        \ response. If the value of `acrEssential` parameter is `true`, call Authlete's\n\
        `/auth/authorization/fail` API with `reason=ACR_NOT_SATISFIED` and use the\
        \ response from the API\nto generate a response to the client application.\
        \ Otherwise, go to the next step ([SCOPES]).\n\n[5] SCOPES\n\nGet the value\
        \ of `scopes` from the `/auth/authorization` API response. If the array contains\
        \ a\nscope which has not been granted to the client application by the end-user\
        \ in the past, call\nAuthlete's `/auth/authorization/fail` API with `reason=CONSENT_REQUIRED`\
        \ and use the response from\nthe API to generate a response to the client\
        \ application. Otherwise, go to the next step ([RESOURCES]).\n\nNote that\
        \ Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`\n\
        APIs), which is only available in a dedicated/onpremise Authlete server (contact\
        \ sales@authlete.com\nfor details).\n\n[6] DYNAMIC SCOPES\n\nGet the value\
        \ of `dynamicScopes` from the `/auth/authorization` API response. If the array\
        \ contains\na scope which has not been granted to the client application by\
        \ the end-user in the past, call\nAuthlete's `/auth/authorization/fail` API\
        \ with `reason=CONSENT_REQUIRED` and use the response from\nthe API to generate\
        \ a response to the client application. Otherwise, go to the next step ([RESOURCES]).\n\
        \nNote that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`\n\
        APIs) but dynamic scopes are not remembered as granted scopes.\n\n[7] RESOURCES\n\
        \nGet the value of `resources` from the `/auth/authorization` API response.\
        \ The array represents\nthe values of the `resource` request parameters. If\
        \ you want to reject the request, call Authlete's\n`/auth/authorization/fail`\
        \ API with `reason=INVALID_TARGET` and use the response from the API to\n\
        generate a response to the client application. Otherwise, go to the next step\
        \ ([ISSUE]).\n\nSee \"Resource Indicators for OAuth 2.0\" for details.\n\n\
        [8] ISSUE\n\nIf all the above steps succeeded, the last step is to issue an\
        \ authorization code, an ID token\nand/or an access token. (There is a special\
        \ case, though. In the case of `response_type=none`,\nnothing is issued.)\
        \ It can be performed by calling Authlete's `/auth/authorization/issue` API.\n\
        The API requires the following parameters. Prepare these parameters and call\
        \ `/auth/authorization/issue`\nAPI and use the response to generate a response\
        \ to the client application.\n\n- <u>`ticket` (required)</u><br>\n  This parameter\
        \ represents a ticket which is exchanged with tokens at `/auth/authorization/issue`.\n\
        \  Use the value of `ticket` contained in the `/auth/authorization` API response.\n\
        \n- <u>`subject` (required)</u><br>\n  This parameter represents the unique\
        \ identifier of the current end-user. It is often called \"user ID\"\n  and\
        \ it may or may not be visible to the user. In any case, it is a number or\
        \ a string assigned\n  to an end-user by the authorization server implementation.\
        \ Authlete does not care about the format\n  of the value of subject, but\
        \ it must consist of only ASCII letters and its length must not exceed 100.\n\
        \n  When the value of `subject` parameter in the /auth/authorization API response\
        \ is not `null`,\n  it is necessarily identical to the value of `subject`\
        \ parameter in the `/auth/authorization/issue`\n  API request.\n\n  The value\
        \ of this parameter will be embedded in an ID token as the value of `sub`\
        \ claim. When\n  the value of `subject_type` configuration parameter of the\
        \ client application is `PAIRWISE`,\n  the value of sub claim is different\
        \ from the value specified by this parameter, See [8. Subject\n  Identifier\
        \ Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes)\
        \ of OpenID\n  Connect Core 1.0 for details about subject types.\n\n  You\
        \ can use the `sub` request parameter to adjust the value of the `sub` claim\
        \ in an ID token.\n  See the description of the `sub` request parameter for\
        \ details.\n\n- <u>`authTime` (optional)</u><br>\n  This parameter represents\
        \ the time when the end-user authentication occurred. Its value is the\n \
        \ number of seconds from `1970-01-01`. The value of this parameter will be\
        \ embedded in an ID token\n  as the value of `auth_time` claim.\n\n- <u>`acr`\
        \ (optional)</u><br>\n  This parameter represents the ACR (Authentication\
        \ Context Class Reference) which the authentication\n  of the end-user satisfies.\
        \ When `acrs` in the `/auth/authorization` API response is a non-empty\n \
        \ array and the value of `acrEssential` is `true`, the value of this parameter\
        \ must be one of the\n  array elements. Otherwise, even `null` is allowed.\
        \ The value of this parameter will be embedded\n  in an ID token as the value\
        \ of `acr` claim.\n\n- <u>`claims` (optional)</u><br>\n  This parameter represents\
        \ claims of the end-user. \"Claims\" here are pieces of information about\n\
        \  the end-user such as `\"name\"`, `\"email\"` and `\"birthdate\"`. The authorization\
        \ server implementation\n  is required to gather claims of the end-user, format\
        \ the claim values into JSON and set the JSON\n  string as the value of this\
        \ parameter.\n\n  The claims which the authorization server implementation\
        \ is required to gather are listed in\n  `claims` parameter in the `/auth/authorization`\
        \ API response.\n\n  For example, if claims parameter lists `\"name\"`, `\"\
        email\"` and `\"birthdate\"`, the value of this\n  parameter should look like\
        \ the following.\n\n  ```json\n  {\n    \"name\": \"John Smith\",\n    \"\
        email\": \"john@example.com\",\n    \"birthdate\": \"1974-05-06\"\n  }\n \
        \ ```\n\n  `claimsLocales` parameter in the `/auth/authorization` API response\
        \ lists the end-user's preferred\n  languages and scripts, ordered by preference.\
        \ When `claimsLocales` parameter is a non-empty array,\n  its elements should\
        \ be taken into account when the authorization server implementation gathers\n\
        \  claim values. Especially, note the excerpt below from [5.2. Claims Languages\
        \ and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\n\
        \  of OpenID Connect Core 1.0.\n\n  > When the OP determines, either through\
        \ the `claims_locales` parameter, or by other means, that\n  the End-User\
        \ and Client are requesting Claims in only one set of languages and scripts,\
        \ it is\n  RECOMMENDED that OPs return Claims without language tags when they\
        \ employ this language and script.\n  It is also RECOMMENDED that Clients\
        \ be written in a manner that they can handle and utilize Claims\n  using\
        \ language tags.\n\n  If `claims` parameter in the `/auth/authorization` API\
        \ response is `null` or an empty array,\n  the value of this parameter should\
        \ be `null`.\n\n  See [5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\n\
        \  of OpenID Connect core 1.0 for claim names and their value formats. Note\
        \ (1) that the authorization\n  server implementation support its special\
        \ claims ([5.1.2. Additional Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims))\n\
        \  and (2) that claim names may be followed by a language tag ([5.2. Claims\
        \ Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)).\n\
        \  Read the specification of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html)\n\
        \  for details.\n\n  The claim values in this parameter will be embedded in\
        \ an ID token.\n\n  Note that `idTokenClaims` parameter is available in the\
        \ `/auth/authorization` API response.\n  The parameter has the value of the\
        \ `\"id_token\"` property in the `claims` request parameter or\n  in the `\"\
        claims\"` property in a request object. The value of this parameter should\
        \ be considered\n  when you prepare claim values.\n\n- <u>`properties` (optional)</u><br>\n\
        \  Extra properties to associate with an access token and/or an authorization\
        \ code that may be issued\n  by this request. Note that `properties` parameter\
        \ is accepted only when `Content-Type` of the\n  request is `application/json`,\
        \ so don't use `application/x-www-form-urlencoded` for details.\n\n- <u>`scopes`\
        \ (optional)</u><br>\n  Scopes to associate with an access token and/or an\
        \ authorization code. If this parameter is `null`,\n  the scopes specified\
        \ in the original authorization request from the client application are used.\n\
        \  In other cases, including the case of an empty array, the specified scopes\
        \ will replace the original\n  scopes contained in the original authorization\
        \ request.\n\n  Even scopes that are not included in the original authorization\
        \ request can be specified. However,\n  as an exception, `openid` scope is\
        \ ignored on the server side if it is not included in the original\n  request.\
        \ It is because the existence of `openid` scope considerably changes the validation\
        \ steps\n  and because adding `openid` triggers generation of an ID token\
        \ (although the client application\n  has not requested it) and the behavior\
        \ is a major violation against the specification.\n\n  If you add `offline_access`\
        \ scope although it is not included in the original request, keep in\n  mind\
        \ that the specification requires explicit consent from the user for the scope\
        \ ([OpenID Connect\n  Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess)).\n\
        \  When `offline_access` is included in the original request, the current\
        \ implementation of Authlete's\n  `/auth/authorization` API checks whether\
        \ the request has come along with `prompt` request parameter\n  and the value\
        \ includes consent. However, note that the implementation of Authlete's `/auth/authorization/issue`\n\
        \  API does not perform such checking if `offline_access` scope is added via\
        \ this `scopes` parameter.\n\n- <u>`sub` (optional)</u><br>\n  The value of\
        \ the `sub` claim in an ID token. If the value of this request parameter is\
        \ not empty,\n  it is used as the value of the `sub` claim. Otherwise, the\
        \ value of the `subject` request parameter\n  is used as the value of the\
        \ `sub` claim. The main purpose of this parameter is to hide the actual\n\
        \  value of the subject from client applications.\n\n  Note that even if this\
        \ `sub` parameter is not empty, the value of the subject request parameter\n\
        \  is used as the value of the subject which is associated with the access\
        \ token.\n\n**INTERACTION**\n\nWhen the value of `action` is `INTERACTION`,\
        \ it means that the request from the client application\nhas no problem and\
        \ requires the service to process the request with user interaction by an\
        \ HTML form.\nThe purpose of the UI displayed to the end-user is to ask the\
        \ end-user to grant authorization to\nthe client application. The items described\
        \ below are some points which the service implementation\nshould take into\
        \ account when it builds the UI.\n\n[1] DISPLAY MODE\n\nThe response from\
        \ `/auth/authorization` API has `display` parameter. It is one of `PAGE` (default),\n\
        `POPUP`, `TOUCH` and `WAP` The meanings of the values are described in [3.1.2.1.\
        \ Authentication\nRequest of OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\n\
        Basically, the authorization server implementation should display the UI which\
        \ is suitable for the\ndisplay mode, but it is okay for the authorization\
        \ server implementation to \"attempt to detect the\ncapabilities of the User\
        \ Agent and present an appropriate display\".\n\nIt is ensured that the value\
        \ of `display` is one of the supported display modes which are specified\n\
        by `supportedDisplays` configuration parameter of the service.\n\n[2] UI LOCALE\n\
        \nThe response from `/auth/authorization` API has `uiLocales` parameter. It\
        \ it is not `null`, it lists\nlanguage tag values (such as `fr-CA`, `ja-JP`\
        \ and `en`) ordered by preference. The service implementation\nshould display\
        \ the UI in one of the language listed in the parameter when possible. It\
        \ is ensured\nthat language tags listed in `uiLocales` are contained in the\
        \ list of supported UI locales which\nare specified by `supportedUiLocales`\
        \ configuration parameter of the service.\n\n[3] CLIENT INFORMATION\n\nThe\
        \ authorization server implementation should show information about the client\
        \ application to\nthe end-user. The information is embedded in `client` parameter\
        \ in the response from `/auth/authorization`\nAPI.\n\n[4] SCOPES\n\nA client\
        \ application requires authorization for specific permissions. In OAuth 2.0\
        \ specification,\n\"scope\" is a technical term which represents a permission.\
        \ `scopes` parameter in the response\nfrom `/auth/authorization` API is a\
        \ list of scopes requested by the client application. The service\nimplementation\
        \ should show the end-user the scopes.\n\nThe authorization server implementation\
        \ may choose not to show scopes to which the end-user has\ngiven consent in\
        \ the past. To put it the other way around, the authorization server implementation\n\
        may show only the scopes to which the end-user has not given consent yet.\
        \ However, if the value\nof `prompts` response parameter contains `CONSENT`,\
        \ the authorization server implementation has\nto obtain explicit consent\
        \ from the end-user even if the end-user has given consent to all the\nrequested\
        \ scopes in the past.\n\nNote that Authlete provides APIs to manage records\
        \ of granted scopes (`/api/client/granted_scopes/*`\nAPIs), but the APIs work\
        \ only in the case the Authlete server you use is a dedicated Authlete server\n\
        (contact sales@authlete.com for details). In other words, the APIs of the\
        \ shared Authlete server\nare disabled intentionally (in order to prevent\
        \ garbage data from being accumulated) and they\nreturn 403 Forbidden.\n\n\
        It is ensured that the values in `scopes` parameter are contained in the list\
        \ of supported scopes\nwhich are specified by `supportedScopes` configuration\
        \ parameter of the service.\n\n[5] DYNAMIC SCOPES\n\nThe authorization request\
        \ may include dynamic scopes. The list of recognized dynamic scopes are\n\
        accessible by getDynamicScopes() method. See the description of the [DynamicScope](https://authlete.github.io/authlete-java-common/com/authlete/common/dto/DynamicScope.html)\n\
        class for details about dynamic scopes.\n\n[6] AUTHORIZATION DETAILS\n\nThe\
        \ authorization server implementation should show the end-user \"authorization\
        \ details\" if the\nrequest includes it. The value of `authorization_details`\
        \ parameter in the response is the content\nof the `authorization_details`\
        \ request parameter.\n\nSee \"OAuth 2.0 Rich Authorization Requests\" for\
        \ details.\n\n[7] PURPOSE\n\nThe authorization server implementation must\
        \ show the value of the `purpose` request parameter if\nit supports [OpenID\
        \ Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n\
        See [8. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.8)\n\
        in the specification for details.\n\nNote that the value of `purpose` response\
        \ parameter is the value of the purpose request parameter.\n\n[7] END-USER\
        \ AUTHENTICATION\n\nNecessarily, the end-user must be authenticated (= must\
        \ login the service) before granting authorization\nto the client application.\
        \ Simply put, a login form is expected to be displayed for end-user authentication.\n\
        The service implementation must follow the steps described below to comply\
        \ with OpenID Connect.\n(Or just always show a login form if it's too much\
        \ of a bother.)\n\n(i) Get the value of `prompts` response parameter. It corresponds\
        \ to the value of the `prompt`\nrequest parameter. Details of the request\
        \ parameter are described in [3.1.2.1. Authentication\nRequest](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\
        \ of OpenID Connect Core 1.0.\n\n(ii) If the value of `prompts` parameter\
        \ is `SELECT_ACCOUNT` display a form to let the end-user\nselect on of his/her\
        \ accounts for login. If `subject` response parameter is not `null`, it is\
        \ the\nend-user ID that the client application expects, so the value should\
        \ be used to determine the value\nof the login ID. Note that a subject and\
        \ a login ID are not necessarily equal. If the value of\n`subject` response\
        \ parameter is `null`, the value of `loginHint` response parameter should\
        \ be referred\nto as a hint to determine the value of the login ID. The value\
        \ of `loginHint` response parameter\nis simply the value of the `login_hint`\
        \ request parameter.\n\n(iii) If the value of `prompts` response parameter\
        \ contains `LOGIN`, display a form to urge the\nend-user to login even if\
        \ the end-user has already logged in. If the value of `subject` response\n\
        parameter is not `null`, it is the end-user ID that the client application\
        \ expects, so the value\nshould be used to determine the value of the login\
        \ ID. Note that a subject and a login ID are not\nnecessarily equal. If the\
        \ value of `subject` response parameter is `null`, the value of `loginHint`\n\
        response parameter should be referred to as a hint to determine the value\
        \ of the login ID. The value\nof `loginHint` response parameter is simply\
        \ the value of the `login_hint` request parameter.\n\n(iv) If the value of\
        \ `prompts` response parameter does not contain `LOGIN`, the authorization\
        \ server\nimplementation does not have to authenticate the end-user if all\
        \ the conditions described below\nare satisfied. If any one of the conditions\
        \ is not satisfied, show a login form to authenticate\nthe end-user.\n\n-\
        \ An end-user has already logged in the service.\n\n- The login ID of the\
        \ current end-user matches the value of `subject` response parameter.\nThis\
        \ check is required only when the value of `subject` response parameter is\
        \ a non-null value.\n\n- The max age, which is the number of seconds contained\
        \ in `maxAge` response parameter,\nhas not passed since the current end-user\
        \ logged in your service. This check is required only when\nthe value of `maxAge`\
        \ response parameter is a non-zero value.\n\n- If the authorization server\
        \ implementation does not manage authentication time of end-users\n(= if the\
        \ authorization server implementation cannot know when end-users logged in)\
        \ and if the\nvalue of `maxAge` response parameter is a non-zero value, a\
        \ login form should be displayed.\n\n- The ACR (Authentication Context Class\
        \ Reference) of the authentication performed for\nthe current end-user satisfies\
        \ one of the ACRs listed in `acrs` response parameter. This check is\nrequired\
        \ only when the value of `acrs` response parameter is a non-empty array.\n\
        \nIn every case, the end-user authentication must satisfy one of the ACRs\
        \ listed in `acrs` response\nparameter when the value of `acrs` response parameter\
        \ is a non-empty array and `acrEssential`\nresponse parameter is `true`.\n\
        \n[9] GRANT/DENY BUTTONS\n\nThe end-user is supposed to choose either (1)\
        \ to grant authorization to the client application or\n(2) to deny the authorization\
        \ request. The UI must have UI components to accept the judgment by\nthe user.\
        \ Usually, a button to grant authorization and a button to deny the request\
        \ are provided.\n\nWhen the value of `subject` response parameter is not `null`,\
        \ the end-user authentication must be\nperformed for the subject, meaning\
        \ that the authorization server implementation should repeatedly\nshow a login\
        \ form until the subject is successfully authenticated.\n\nThe end-user will\
        \ choose either (1) to grant authorization to the client application or (2)\
        \ to\ndeny the authorization request. When the end-user chose to deny the\
        \ authorization request, call\nAuthlete's `/auth/authorization/fail` API with\
        \ `reason=DENIED` and use the response from the API\nto generate a response\
        \ to the client application.\n\nWhen the end-user chose to grant authorization\
        \ to the client application, the authorization server\nimplementation has\
        \ to issue an authorization code, an ID token, and/or an access token to the\
        \ client\napplication. (There is a special case. When `response_type=none`,\
        \ nothing is issued.) Issuing the\ntokens can be performed by calling Authlete's\
        \ `/auth/authorization/issue` API. Read [ISSUE] written\nabove in the description\
        \ for the case of `action=NO_INTERACTION`.\n</details>\n"
      operationId: auth_authorization_api
      requestBody:
        content:
          application/json:
            example:
              parameters: response_type=code&client_id=26478243745571&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&scope=timeline.read+history.read&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256
            schema:
              $ref: '#/components/schemas/authorization_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/authorization_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A004001
                resultMessage: "[A004001] Authlete has successfully issued a ticket\
                  \ to the service (API Key = 21653835348762) for the authorization\
                  \ request from the client (ID = 26478243745571). [response_type=code,\
                  \ openid=false]"
                acrEssential: false
                action: INTERACTION
                client:
                  applicationType: WEB
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26478243745571
                  clientIdAlias: my-client
                  clientIdAliasEnabled: true
                  clientName: My updated client
                  clientSecret: my_updated_client_secret
                  clientType: CONFIDENTIAL
                  createdAt: 1639468356000
                  defaultMaxAge: 0
                  derivedSectorIdentifier: my-client.example.com
                  developer: john
                  dynamicallyRegistered: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  idTokenSignAlg: RS256
                  modifiedAt: 1639560232000
                  number: 6164
                  parRequired: false
                  redirectUris:
                  - https://my-client.example.com/cb1
                  - https://my-client.example.com/cb2
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  responseTypes:
                  - CODE
                  - TOKEN
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                clientIdAliasUsed: false
                display: PAGE
                maxAge: 0
                scopes:
                - defaultEntry: false
                  description: A permission to read your history.
                  name: history.read
                - defaultEntry: false
                  description: A permission to read your timeline.
                  name: timeline.read
                service:
                  accessTokenDuration: 3600
                  accessTokenType: Bearer
                  allowableClockSkew: 0
                  apiKey: 21653835348762
                  apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authorizationEndpoint: https://my-service.example.com/authz
                  authorizationResponseDuration: 0
                  backchannelAuthReqIdDuration: 0
                  backchannelBindingMessageRequiredInFapi: false
                  backchannelPollingInterval: 0
                  backchannelUserCodeParameterSupported: false
                  claimShortcutRestrictive: false
                  clientIdAliasEnabled: true
                  clientsPerDeveloper: 0
                  createdAt: 1639373421000
                  dcrScopeUsedAsRequestable: false
                  deviceFlowCodeDuration: 0
                  deviceFlowPollingInterval: 0
                  directAuthorizationEndpointEnabled: false
                  directIntrospectionEndpointEnabled: false
                  directJwksEndpointEnabled: false
                  directRevocationEndpointEnabled: false
                  directTokenEndpointEnabled: false
                  directUserInfoEndpointEnabled: false
                  dynamicRegistrationSupported: false
                  errorDescriptionOmitted: false
                  errorUriOmitted: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantManagementActionRequired: false
                  hsmEnabled: false
                  idTokenDuration: 0
                  introspectionEndpoint: https://my-service.example.com/introspection
                  issSuppressed: false
                  issuer: https://my-service.example.com
                  metadata:
                  - key: clientCount
                    value: "1"
                  missingClientIdAllowed: false
                  modifiedAt: 1639559308000
                  mutualTlsValidatePkiCertChain: false
                  nbfOptional: false
                  number: 5041
                  parRequired: false
                  pkceRequired: true
                  pkceS256Required: false
                  pushedAuthReqDuration: 0
                  refreshTokenDuration: 3600
                  refreshTokenDurationKept: false
                  refreshTokenDurationReset: false
                  refreshTokenKept: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  revocationEndpoint: https://my-service.example.com/revocation
                  scopeRequired: false
                  serviceName: My updated service
                  serviceOwnerNumber: 2
                  singleAccessTokenPerSubject: false
                  supportedClaimTypes:
                  - NORMAL
                  supportedDisplays:
                  - PAGE
                  supportedGrantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  supportedIntrospectionAuthMethods:
                  - CLIENT_SECRET_BASIC
                  supportedResponseTypes:
                  - CODE
                  supportedRevocationAuthMethods:
                  - CLIENT_SECRET_BASIC
                  supportedScopes:
                  - defaultEntry: false
                    description: A permission to read your history.
                    name: history.read
                  - defaultEntry: false
                    description: A permission to read your timeline.
                    name: timeline.read
                  supportedTokenAuthMethods:
                  - CLIENT_SECRET_BASIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenEndpoint: https://my-service.example.com/token
                  tokenExpirationLinked: false
                  traditionalRequestObjectProcessingApplied: false
                  unauthorizedOnClientConfigSupported: false
                  userCodeLength: 0
                ticket: hXoY87t_t23enrVHWxpXNP5FfVDhDypD3T6H6lt4IPA
              schema:
                $ref: '#/components/schemas/authorization_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/authorization API
      tags:
      - Authorization Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/authorization \\\
          \n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"parameters\": \"response_type=code&client_id=26478243745571&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&scope=timeline.read+history.read&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          AuthorizationRequest req = new AuthorizationRequest();
          req.setParameters(...);

          api.authorization(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          AuthorizationRequest req = new AuthorizationRequest();
          req.Parameters = ...;

          await api.Authorization(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new AuthorizationRequest();
          $req.setParameters(...);

          $api.authorization($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::AuthorizationRequest.new
          req.parameters = '...'

          api.authorization(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = AuthorizationRequest()
          req.parameters = ...

          api.authorization(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.AuthorizationRequest{}\n\
          req.Parameters = ...\n\napi.Authorization(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new AuthorizationRequest();\n\
          req.parameters = ...;\n\nawait api.authorization(req);\n"
  /api/auth/authorization/fail:
    post:
      description: "This API generates a content of an error authorization response\
        \ that the authorization server implementation\nreturns to the client application.\n\
        \n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed\
        \ to be called from within the implementation of the authorization endpoint\
        \ of the service\nin order to generate an error response to the client application.\n\
        \nThe description of the `/auth/authorization` API describes the timing when\
        \ this API should be called.\n\nThe response from `/auth/authorization/fail`\
        \ API has some parameters.\nAmong them, it is `action` parameter that the\
        \ authorization server implementation should check first because\nit denotes\
        \ the next action that the authorization server implementation should take.\n\
        According to the value of `action`, the authorization server implementation\
        \ must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen\
        \ the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request\
        \ from the authorization\nserver implementation was wrong or that an error\
        \ occurred in Authlete.\n\nIn either case, from the viewpoint of the client\
        \ application, it is an error on the server side.\nTherefore, the service\
        \ implementation should generate a response to the client application with\n\
        HTTP status of \"500 Internal Server Error\". Authlete recommends `application/json`\
        \ as the content type.\n\nThe value of `responseContent` is a JSON string\
        \ which describes the error, so it can be used\nas the entity body of the\
        \ response.\n\nThe following illustrates the response which the service implementation\
        \ should generate and return\nto the client application.\n\n```\nHTTP/1.1\
        \ 500 Internal Server Error\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation\
        \ may return another different response to the client application since\n\"\
        500 Internal Server Error\" is not required by OAuth 2.0.\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the ticket is\
        \ no longer valid (deleted\nor expired) and that the reason of the invalidity\
        \ was probably due to the end-user's too-delayed\nresponse to the authorization\
        \ UI.\n\nA response with HTTP status of \"400 Bad Request\" should be returned\
        \ to the client application and\nAuthlete recommends `application/json` as\
        \ the content type.\n\nThe value of `responseContent` is a JSON string which\
        \ describes the error, so it can be used\nas the entity body of the response.\n\
        \nThe following illustrates the response which the service implementation\
        \ should generate and return\nto the client application.\n\n```\nHTTP/1.1\
        \ 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation\
        \ may return another different response to the client application since\n\"\
        400 Bad Request\" is not required by OAuth 2.0.\n\n**LOCATION**\n\nWhen the\
        \ value of `action` is `LOCATION`, it means that the response to the client\
        \ application must\nbe \"302 Found\" with Location header.\n\nThe parameter\
        \ responseContent contains a redirect URI with (1) an authorization code,\
        \ an ID token\nand/or an access token (on success) or (2) an error code (on\
        \ failure), so it can be used as the\nvalue of `Location` header.\n\nThe following\
        \ illustrates the response which the service implementation must generate\
        \ and return\nto the client application.\n\n```\nHTTP/1.1 302 Found\nLocation:\
        \ {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**FORM**\n\
        \nWhen the value of `action` is `FORM`, it means that the response to the\
        \ client application must be 200 OK\nwith an HTML which triggers redirection\
        \ by JavaScript.\nThis happens when the authorization request from the client\
        \ application contained `response_mode=form_post`.\n\nThe value of `responseContent`\
        \ is an HTML which can be used as the entity body of the response.\n\nThe\
        \ following illustrates the response which the service implementation must\
        \ generate and return\nto the client application.\n\n```\nHTTP/1.1 200 OK\n\
        Content-Type: text/html;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\
        \n{responseContent}\n```\n</details>\n"
      operationId: auth_authorization_fail_api
      requestBody:
        content:
          application/json:
            example:
              ticket: qA7wGybwArICpbUSutrf5Xc9-i1fHE0ySOHxR1eBoBQ
              reason: NOT_AUTHENTICATED
            schema:
              $ref: '#/components/schemas/authorization_fail_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/authorization_fail_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A004201
                resultMessage: "[A004201] The authorization request from the service\
                  \ does not contain 'parameters' parameter."
                action: BAD_REQUEST
                responseContent: "{\\\"error_description\\\":\\\"[A004201] The authorization\
                  \ request from the service does not contain 'parameters' parameter.\\\
                  \",\\\"error\\\":\\\"invalid_request\\\",\\\"error_uri\\\":\\\"\
                  https://docs.authlete.com/#A004201\\\"}"
              schema:
                $ref: '#/components/schemas/authorization_fail_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization/fail, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization/fail, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization/fail, The client (ID\
                  \ = 26837717140341) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization/fail, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/authorization/fail API
      tags:
      - Authorization Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/authorization/fail\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"ticket\": \"c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q\"\
          , \"reason\": \"NOT_AUTHENTICATED\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          AuthorizationFailRequest req = new AuthorizationFailRequest();
          req.setTicket("c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q");
          req.setReason(AuthorizationFailRequest.Reason.NOT_AUTHENTICATED);

          api.authorizationFail(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          AuthorizationFailRequest req = new AuthorizationFailRequest();
          req.Ticket = "c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q";
          req.Reason = AuthorizationFailReason.NOT_AUTHENTICATED;

          await api.AuthorizationFail(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new AuthorizationFailRequest();
          $req.setTicket("c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q");
          $req.setReason(AuthorizationFailReason.$NOT_AUTHENTICATED);

          $api.authorizationFail($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::AuthorizationFailRequest.new
          req.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q'
          req.reason = 'NOT_AUTHENTICATED'

          api.authorization_fail(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = AuthorizationFailRequest()
          req.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q'
          req.reason = AuthorizationFailReason.NOT_AUTHENTICATED

          api.authorizationFail(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.AuthorizationFailRequest{}\n\
          req.Ticket = \"c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q\"\nreq.Reason\
          \ = AuthorizationFailReason.NOT_AUTHENTICATED\n\napi.AuthorizationFail(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new AuthorizationFailRequest();\n\
          req.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q';\nreq.reason\
          \ = AuthorizationFailRequest.Reason.NOT_AUTHENTICATED;\n\nawait api.authorizationFail(req);\n"
  /api/auth/authorization/issue:
    post:
      description: "This API parses request parameters of an authorization request\
        \ and returns necessary data for the\nauthorization server implementation\
        \ to process the authorization request further.\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from within the implementation of the\
        \ authorization endpoint of\nthe service in order to generate a successful\
        \ response to the client application.\n\nThe description of the `/auth/authorization`\
        \ API describes the timing when this API should be called\nand the meaning\
        \ of request parameters. See [ISSUE] in `NO_INTERACTION`.\n\nThe response\
        \ from `/auth/authorization/issue` API has some parameters.\nAmong them, it\
        \ is `action` parameter that the authorization server implementation should\
        \ check first\nbecause it denotes the next action that the authorization server\
        \ implementation should take.\nAccording to the value of `action`, the authorization\
        \ server implementation must take the steps\ndescribed below.\n\n**INTERNAL_SERVER_ERROR**\n\
        \nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the\
        \ request from the authorization\nserver implementation was wrong or that\
        \ an error occurred in Authlete.\nIn either case, from the viewpoint of the\
        \ client application, it is an error on the server side.\nTherefore, the service\
        \ implementation should generate a response to the client application with\n\
        HTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent`\
        \ is a JSON string which describes the error, so it can be used as\nthe entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation should generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe\
        \ endpoint implementation may return another different response to the client\
        \ application since\n\"500 Internal Server Error\" is not required by OAuth\
        \ 2.0.\n\n**BAD_REQUEST**\n\nWhen the value of \"action\" is `BAD_REQUEST`,\
        \ it means that the ticket is no longer valid (deleted\nor expired) and that\
        \ the reason of the invalidity was probably due to the end-user's too-delayed\n\
        response to the authorization UI.\n\nThe HTTP status of the response returned\
        \ to the client application should be \"400 Bad Request\"\nand the content\
        \ type should be `application/json` although OAuth 2.0 specification does\
        \ not mention\nthe format of the error response.\n\nThe value of `responseContent`\
        \ is a JSON string which describes the error, so it can be used as\nthe entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation should generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation\
        \ may return another different response to the client application since\n\"\
        400 Bad Request\" is not required by OAuth 2.0.\n\n**LOCATION**\n\nWhen the\
        \ value of `action` is `LOCATION`, it means that the response to the client\
        \ application\nshould be \"302 Found\" with `Location` header.\n\nThe value\
        \ of `responseContent` is a redirect URI which contains (1) an authorization\
        \ code, an ID\ntoken and/or an access token (on success) or (2) an error code\
        \ (on failure), so it can be used as\nthe value of `Location` header.\n\n\
        The following illustrates the response which the service implementation must\
        \ generate and return\nto the client application.\n\n```\nHTTP/1.1 302 Found\n\
        Location: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\
        \n**FORM**\n\nWhen the value of `action` is `FORM`, it means that the response\
        \ to the client application should\nbe \"200 OK\" with an HTML which triggers\
        \ redirection by JavaScript. This happens when the authorization\nrequest\
        \ from the client contains `response_mode=form_post` request parameter.\n\n\
        The value of `responseContent` is an HTML which satisfies the requirements\
        \ of `response_mode=form_post`,\nso it can be used as the entity body of the\
        \ response.\n\nThe following illustrates the response which the service implementation\
        \ should generate and return\nto the client application.\n\n```\nHTTP/1.1\
        \ 200 OK\nContent-Type: text/html;charset=UTF-8\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n</details>\n"
      operationId: auth_authorization_issue_api
      requestBody:
        content:
          application/json:
            example:
              ticket: FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc
              subject: john
            schema:
              $ref: '#/components/schemas/authorization_issue_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/authorization_issue_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A040001
                resultMessage: "[A040001] The authorization request was processed\
                  \ successfully."
                accessTokenDuration: 0
                accessTokenExpiresAt: 0
                action: LOCATION
                authorizationCode: Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo
                responseContent: https://my-client.example.com/cb1?code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&iss=https%3A%2F%2Fmy-service.example.com
              schema:
                $ref: '#/components/schemas/authorization_issue_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization/issue, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization/issue, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization/issue, The service (API\
                  \ Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization/issue, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/authorization/issue API
      tags:
      - Authorization Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/authorization/issue\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"ticket\": \"FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc\"\
          , \"subject\": \"john\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          AuthorizationIssueRequest req = new AuthorizationIssueRequest();
          req.setTicket("FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc");
          req.setSubject("john");

          api.authorizationIssue(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = new AuthletePropertiesConfiguration();
          IAuthleteApi api = new AuthleteApi(conf);

          AuthorizationIssueRequest req = new AuthorizationIssueRequest();
          req.Ticket  = "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc";
          req.Subject = "john";

          await api.AuthorizationIssue(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new AuthorizationIssueRequest();
          $req.setTicket("FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc");
          $req.setSubject("john");

          $api.authorizationIssue($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::AuthorizationIssueRequest.new
          req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'
          req.subject = 'john'

          api.authorization_issue(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = AuthorizationIssueRequest()
          req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'
          req.subject = 'john'

          api.authorizationIssue(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.AuthorizationIssueRequest{}\n\
          req.Ticket = \"FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc\"\nreq.Subject\
          \ = \"john\"\n\napi.AuthorizationIssue(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new AuthorizationIssueRequest();\n\
          req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc';\nreq.subjec\
          \ = 'john';\n\nawait api.authorizationIssue(req);\n"
  /api/pushed_auth_req:
    post:
      description: |
        This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
      operationId: pushed_auth_req_api
      requestBody:
        content:
          application/json:
            example:
              parameters: response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256
              clientId: "5921531358155430"
              clientSecret: P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA
            schema:
              $ref: '#/components/schemas/pushed_auth_req_request'
          application/x-www-form-urlencoded:
            example:
              parameters: response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256
              clientId: "5921531358155430"
              clientSecret: P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA
            schema:
              $ref: '#/components/schemas/pushed_auth_req_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A245001
                resultMessage: "[A245001] Successfully registered a request object\
                  \ for client (5921531358155430), URI is urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg."
                action: CREATED
                requestUri: urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg
                responseContent: "{\"expires_in\":600,\"request_uri\":\"urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg\"\
                  }"
              schema:
                $ref: '#/components/schemas/pushed_auth_req_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /pushed_auth_req, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /pushed_auth_req, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /pushed_auth_req, The service (API Key =\
                  \ 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /pushed_auth_req, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/pushed_auth_req API
      tags:
      - Pushed Authorization Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/pushed_auth_req \\\n\
          -H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"parameters\": \"response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256\"\
          , \"clientId\": \"5921531358155430\", \"clientSecret\" : \"P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA\"\
          }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          PushedAuthReqRequest req = new PushedAuthReqRequest();
          req.setParameters(...);
          req.setClientId("57297408867");
          req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

          api.pushAuthorizationRequest(req);
      - lang: cs
        label: C#
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          PushedAuthReqRequest req = new PushedAuthReqRequest();
          req.setParameters(...);
          req.setClientId("57297408867");
          req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

          api.PushAuthorizationRequest(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new PushedAuthReqRequest();
          $req.setParameters(...);
          $req.setClientId("57297408867");
          $req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

          $api.token($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::PushedAuthReqRequest.new
          req.parameters = '...'
          req.client_id = '57297408867'
          req.client_secret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

          api.token(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = PushedAuthReqRequest()
          req.parameters = ...
          req.clientId = '57297408867'
          req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

          api.pushAuthorizationRequest(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.PushedAuthReqRequest{}\n\
          req.Parameters = ...\nreq.ClientId = \"57297408867\"\nreq.ClientSecret =\
          \ \"J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A\"\
          \n\napi.PushAuthorizationRequest(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new PushedAuthReqRequest();\n\
          req.parameters = ...;\nreq.clientId = '57297408867';\nreq.clientSecret =\
          \ 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A';\n\
          \nawait api.pushAuthorizationRequest(req);\n"
  /api/auth/token:
    post:
      description: "This API parses request parameters of an authorization request\
        \ and returns necessary data for the\nauthorization server implementation\
        \ to process the authorization request further.\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from with the implementation of the token\
        \ endpoint of the service.\nThe endpoint implementation must extract the request\
        \ parameters from the token request from the\nclient application and pass\
        \ them as the value of parameters request parameter to Authlete's `/auth/token`\
        \ API.\nThe value of parameters is the entire entity body (which is formatted\
        \ in `application/x-www-form-urlencoded`)\nof the token request.\n\nIn addition,\
        \ if the token endpoint of the authorization server implementation supports\
        \ basic authentication\nas a means of [client authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3),\n\
        the client credentials must be extracted from `Authorization` header and they\
        \ must be passed as\n`clientId` request parameter and `clientSecret` request\
        \ parameter to Authlete's `/auth/token` API.\n\nThe following code snippet\
        \ is an example in JAX-RS showing how to extract request parameters from\n\
        the token request and client credentials from Authorization header.\n\n```java\n\
        @POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic Response post(\n\
        \        @HeaderParam(HttpHeaders.AUTHORIZATION) String auth,\n        String\
        \ parameters)\n{\n    // Convert the value of Authorization header (credentials\
        \ of\n    // the client application), if any, into BasicCredentials.\n   \
        \ BasicCredentials credentials = BasicCredentials.parse(auth);\n\n    // The\
        \ credentials of the client application extracted from\n    // 'Authorization'\
        \ header. These may be null.\n    String clientId     = credentials == null\
        \ ? null\n                        : credentials.getUserId();\n    String clientSecret\
        \ = credentials == null ? null\n                        : credentials.getPassword();\n\
        \n    // Process the given parameters.\n    return process(parameters, clientId,\
        \ clientSecret);\n}\n```\n\nThe response from `/auth/token` API has some parameters.\
        \ Among them, it is action parameter that\nthe service implementation should\
        \ check first because it denotes the next action that the authorization\n\
        server implementation should take. According to the value of action, the authorization\
        \ server\nimplementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\
        \nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the\
        \ request from the authorization\nserver implementation was wrong or that\
        \ an error occurred in Authlete.\nIn either case, from the viewpoint of the\
        \ client application, it is an error on the server side.\nTherefore, the service\
        \ implementation should generate a response to the client application with\n\
        HTTP status of \"500 Internal Server Error\". Authlete recommends `application/json`\
        \ as the content\ntype although OAuth 2.0 specification does not mention the\
        \ format of the error response when the\nredirect URI is not usable.\n\nThe\
        \ value of `responseContent` is a JSON string which describes the error, so\
        \ it can be\nused as the entity body of the response.\n\nThe following illustrates\
        \ the response which the service implementation should generate and return\n\
        to the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type:\
        \ application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n\
        ```\n\nThe endpoint implementation may return another different response to\
        \ the client application\nsince \"500 Internal Server Error\" is not required\
        \ by OAuth 2.0.\n\n\n**INVALID_CLIENT**\n\nWhen the value of `action` is `INVALID_CLIENT`,\
        \ it means that authentication of the client failed.\nIn this case, the HTTP\
        \ status of the response to the client application is either \"400 Bad Request\"\
        \nor \"401 Unauthorized\". This requirement comes from [RFC 6749, 5.2. Error\
        \ Response](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2).\n\
        The description about `invalid_client` shown below is an excerpt from RFC\
        \ 6749.\n\nClient authentication failed (e.g., unknown client, no client authentication\
        \ included, or unsupported\nauthentication method). The authorization server\
        \ MAY return an HTTP 401 (Unauthorized) status code\nto indicate which HTTP\
        \ authentication schemes are supported. If the client attempted to authenticate\n\
        via the `Authorization` request header field, the authorization server MUST\
        \ respond with an HTTP\n401 (Unauthorized) status code and include the `WWW-Authenticate`\
        \ response header field matching\nthe authentication scheme used by the client.\n\
        \nIn either case, the value of `responseContent` is a JSON string which can\
        \ be used as the entity\nbody of the response to the client application.\n\
        \nThe following illustrate responses which the service implementation must\
        \ generate and return to\nthe client application.\n\n```\nHTTP/1.1 400 Bad\
        \ Request\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n\n<br>\n\n```\nHTTP/1.1 401 Unauthorized\n\
        WWW-Authenticate: {challenge}\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client application\nis invalid.\n\nA response with HTTP status of \"\
        400 Bad Request\" must be returned to the client application and\nthe content\
        \ type must be `application/json`.\n\nThe value of `responseContent` is a\
        \ JSON string which describes the error, so it can be used as\nthe entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation should generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**OK**\n\nWhen the\
        \ value of `action` is `OK`, it means that the request from the client application\
        \ is valid\nand an access token, and optionally an ID token, is ready to be\
        \ issued.\n\nThe HTTP status of the response returned to the client application\
        \ must be \"200 OK\" and the content\ntype must be `application/json`.\n\n\
        The value of `responseContent` is a JSON string which contains an access token\
        \ (and optionally\nan ID token), so it can be used as the entity body of the\
        \ response.\n\nThe following illustrates the response which the service implementation\
        \ must generate and return\nto the client application.\n\n```\nHTTP/1.1 200\
        \ OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\
        \n{responseContent}\n```\n</details>\n"
      operationId: auth_token_api
      requestBody:
        content:
          application/json:
            example:
              parameters: grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
              clientId: "26478243745571"
              clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
            schema:
              $ref: '#/components/schemas/token_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/token_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A050001
                resultMessage: "[A050001] The token request (grant_type=authorization_code)\
                  \ was processed successfully."
                accessToken: C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ
                accessTokenDuration: 3600
                accessTokenExpiresAt: 1640252942736
                action: OK
                clientAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasUsed: false
                grantType: AUTHORIZATION_CODE
                refreshToken: 60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo
                refreshTokenDuration: 3600
                refreshTokenExpiresAt: 1640252942736
                responseContent: "{\\\"access_token\\\":\\\"C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ\\\
                  \",\\\"refresh_token\\\":\\\"60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo\\\
                  \",\\\"scope\\\":\\\"history.read timeline.read\\\",\\\"token_type\\\
                  \":\\\"Bearer\\\",\\\"expires_in\\\":3600}"
                scopes:
                - history.read
                - timeline.read
                serviceAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                subject: john
              schema:
                $ref: '#/components/schemas/token_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/token, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/token, Authorization header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/token, The service (API Key = 21653835348762)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/token, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/token API
      tags:
      - Token Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/token \\\n-H 'Content-Type:\
          \ application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"parameters\": \"grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\"\
          , \"clientId\": \"57297408867\", \"clientSecret\": \"J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          TokenRequest req = new TokenRequest();
          req.setParameters(...);
          req.setClientId("57297408867");
          req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

          api.token(req);
      - lang: cs
        label: C#
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          TokenRequest req = new TokenRequest();
          req.setParameters(...);
          req.setClientId("57297408867");
          req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

          api.token(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new TokenRequest();
          $req.setParameters(...);
          $req.setClientId("57297408867");
          $req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

          $api.token($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::TokenRequest.new
          req.parameters = '...'
          req.client_id = '57297408867'
          req.client_secret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

          api.token(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = TokenRequest()
          req.parameters = ...
          req.clientId = '57297408867'
          req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

          api.token(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.TokenRequest{}\n\
          req.Parameters = ...\nreq.ClientId = \"57297408867\"\nreq.ClientSecret =\
          \ \"J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A\"\
          \n\napi.Token(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new TokenRequest();\nreq.parameters\
          \ = ...;\nreq.clientId = '57297408867';\nreq.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A';\n\
          \nawait api.token(req);\n"
  /api/auth/token/fail:
    post:
      description: "This API generates a content of an error token response that the\
        \ authorization server implementation\nreturns to the client application.\n\
        \n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed\
        \ to be called from within the implementation of the token endpoint of the\
        \ service\nin order to generate an error response to the client application.\n\
        \nThe description of the `/auth/token` API describes the timing when this\
        \ API should be called. See\nthe description for the case of `action=PASSWORD`.\n\
        \nThe response from `/auth/token/fail` API has some parameters. Among them,\
        \ it is `action` parameter\nthat the authorization server implementation should\
        \ check first because it denotes the next action\nthat the authorization server\
        \ implementation should take. According to the value of `action`, the\nauthorization\
        \ server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\
        \nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the\
        \ request from the authorization\nserver implementation was wrong or that\
        \ an error occurred in Authlete.\n\nIn either case, from the viewpoint of\
        \ the client application, it is an error on the server side.\nTherefore, the\
        \ service implementation should generate a response to the client application\
        \ with\nHTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent`\
        \ is a JSON string which describes the error, so it can be used\nas the entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation should generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe\
        \ endpoint implementation may return another different response to the client\
        \ application\nsince \"500 Internal Server Error\" is not required by OAuth\
        \ 2.0.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`,\
        \ it means that Authlete's `/auth/token/fail` API successfully\ngenerated\
        \ an error response for the client application.\n\nThe HTTP status of the\
        \ response returned to the client application must be \"400 Bad Request\"\
        \ and\nthe content type must be `application/json`.\n\nThe value of `responseContent`\
        \ is a JSON string which describes the error, so it can be used\nas the entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation should generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n</details>\n"
      operationId: auth_token_fail_api
      requestBody:
        content:
          application/json:
            example:
              ticket: 83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c
              reason: INVALID_RESOURCE_OWNER_CREDENTIALS
            schema:
              $ref: '#/components/schemas/token_fail_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/token_fail_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A067301
                resultMessage: "[A067301] The credentials (username & password) passed\
                  \ to the token endpoint are invalid."
                action: BAD_REQUEST
                responseContent: "{\\\"error_description\\\":\\\"[A067301] The credentials\
                  \ (username & password) passed to the token endpoint are invalid.\\\
                  \",\\\"error\\\":\\\"invalid_request\\\",\\\"error_uri\\\":\\\"\
                  https://docs.authlete.com/#A067301\\\"}"
              schema:
                $ref: '#/components/schemas/token_fail_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/token/fail, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/token/fail, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/token/fail, The service (API Key =\
                  \ 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/token/fail, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/token/fail API
      tags:
      - Token Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/token/fail \\\n\
          -H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"ticket\": \"83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c\"\
          , \"reason\": \"INVALID_RESOURCE_OWNER_CREDENTIALS\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          TokenFailRequest req = new TokenFailRequest();
          req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");
          req.setReason(TokenFailRequest.Reason.INVALID_RESOURCE_OWNER_CREDENTIALS);

          api.tokenFail(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          TokenFailRequest req = new TokenFailRequest();
          req.Ticket = "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c";
          req.Reason = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS;

          await api.TokenFail(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new TokenFailRequest();
          $req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");
          $req.setReason(TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS);

          $api.tokenFail($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::TokenFailRequest.new
          req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'
          req.reason = 'INVALID_RESOURCE_OWNER_CREDENTIALS'

          api.token_fail(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = TokenFailRequest()
          req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'
          req.reason = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS

          api.tokenFail(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.TokenFailRequest{}\n\
          req.Ticket = \"83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c\"\nreq.Reason\
          \ = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS\n\napi.TokenFail(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new TokenFailRequest();\n\
          req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c';\nreq.reason\
          \ = TokenFailRequest.Reason.INVALID_RESOURCE_OWNER_CREDENTIALS;\n\nawait\
          \ api.tokenFail(req);\n"
  /api/auth/token/issue:
    post:
      description: "This API generates a content of a successful token response that\
        \ the authorization server implementation\nreturns to the client application.\n\
        \n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed\
        \ to be called from within the implementation of the token endpoint of the\
        \ service\nin order to generate a successful response to the client application.\n\
        \nThe description of the `/auth/token` API describes the timing when this\
        \ API should be called. See\nthe description for the case of `action=PASSWORD`.\n\
        \nThe response from `/auth/token/issue` API has some parameters. Among them,\
        \ it is `action` parameter\nthat the authorization server implementation should\
        \ check first because it denotes the next action\nthat the authorization server\
        \ implementation should take. According to the value of `action`, the\nauthorization\
        \ server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\
        \nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the\
        \ request from the authorization\nserver implementation was wrong or that\
        \ an error occurred in Authlete.\n\nIn either case, from the viewpoint of\
        \ the client application, it is an error on the server side.\nTherefore, the\
        \ service implementation should generate a response to the client application\
        \ with\nHTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent`\
        \ is a JSON string which describes the error, so it can be used\nas the entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation should generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe\
        \ endpoint implementation may return another different response to the client\
        \ application\nsince \"500 Internal Server Error\" is not required by OAuth\
        \ 2.0.\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that Authlete's\
        \ `/auth/token/issue` API successfully\ngenerated an access token.\n\nThe\
        \ HTTP status of the response returned to the client application must be \"\
        200 OK\" and the content\ntype must be`application/json`.\n\nThe value of\
        \ `responseContent` is a JSON string which contains an access token, so it\
        \ can be used\nas the entity body of the response.\n\nThe following illustrates\
        \ the response which the service implementation must generate and return\n\
        to the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n</details>\n"
      operationId: auth_token_issue_api
      requestBody:
        content:
          application/json:
            example:
              ticket: p7SXQ9JFjng7KFOZdCMBKcoR3ift7B54l1LGIgQXqEM
              subject: john
            schema:
              $ref: '#/components/schemas/token_issue_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/token_issue_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A054001
                resultMessage: "[A054001] The token request (grant_type=password)\
                  \ was processed successfully."
                accessToken: OthV6TlZ2pPUtlBBvBSGFYzSdgVy87SSIPz2Zjwi-m0
                accessTokenDuration: 3600
                accessTokenExpiresAt: 1640331371876
                action: OK
                clientAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasUsed: false
                refreshToken: ICPN0-sG3BH4szqiNqaFHZrWUGt7e0zaPuhys3ejQow
                refreshTokenDuration: 3600
                refreshTokenExpiresAt: 1640331371876
                responseContent: "{\\\"access_token\\\":\\\"OthV6TlZ2pPUtlBBvBSGFYzSdgVy87SSIPz2Zjwi-m0\\\
                  \",\\\"refresh_token\\\":\\\"ICPN0-sG3BH4szqiNqaFHZrWUGt7e0zaPuhys3ejQow\\\
                  \",\\\"scope\\\":null,\\\"token_type\\\":\\\"Bearer\\\",\\\"expires_in\\\
                  \":3600}"
                serviceAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                subject: john
              schema:
                $ref: '#/components/schemas/token_issue_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/token/issue, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/token/issue, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/token/issue, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/token/issue, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/token/issue API
      tags:
      - Token Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/token/issue \\\n\
          -H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"ticket\": \"p7SXQ9JFjng7KFOZdCMBKcoR3ift7B54l1LGIgQXqEM\"\
          , \"subject\": \"john\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          TokenIssueRequest req = new TokenIssueRequest()
          req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");

          api.tokenIssue(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          TokenIssueRequest req = new TokenIssueRequest();
          req.Ticket  = "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c";

          await api.TokenIssue(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new TokenIssueRequest();
          $req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");

          $api.tokenIssue($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::TokenIssueRequest.new
          req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'

          api.token_issue(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = TokenIssueRequest()
          req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'

          api.tokenIssue(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.TokenIssueRequest{}\n\
          req.Ticket = \"83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c\"\n\napi.TokenIssue(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new TokenIssueRequest();\n\
          req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c';\n\nawait api.tokenIssue(req);\n"
  /api/auth/introspection:
    post:
      description: "This API gathers information about an access token.\n\n<br>\n\
        <details>\n<summary>Description</summary>\n\nThis API is supposed to be called\
        \ from within the implementations of protected resource endpoints\nof the\
        \ authorization server implementation in order to get information about the\
        \ access token which\nwas presented by the client application.\n\nIn general,\
        \ a client application accesses a protected resource endpoint of a service\
        \ with an access\ntoken, and the implementation of the endpoint checks whether\
        \ the presented access token has enough\nprivileges (= scopes) to access the\
        \ protected resource before returning the protected resource to\nthe client\
        \ application. To achieve this flow, the endpoint implementation has to know\
        \ detailed\ninformation about the access token. Authlete `/auth/introspection`\
        \ API can be used to get such information.\n\nThe response from `/auth/introspection`\
        \ API has some parameters. Among them, it is `action` parameter\nthat the\
        \ authorization server implementation should check first because it denotes\
        \ the next action\nthat the authorization server implementation should take.\
        \ According to the value of `action`, the\nauthorization server implementation\
        \ must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen\
        \ the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request\
        \ from the authorization\nserver implementation was wrong or that an error\
        \ occurred in Authlete.\nIn either case, from the viewpoint of the client\
        \ application, it is an error on the server side.\nTherefore, the service\
        \ implementation should generate a response to the client application with\n\
        HTTP status of \"500 Internal Server Error\". Authlete recommends `application/json`\
        \ as the content\ntype although OAuth 2.0 specification does not mention the\
        \ format of the error response when the\nredirect URI is not usable.\n\nThe\
        \ value of `responseContent` is a string which describes the error in the\
        \ format of\n[RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth\
        \ 2.0 Bearer Token Usage), so if\nthe protected resource of the service implementation\
        \ wants to return an error response to the client\napplication in the way\
        \ that complies with RFC 6750 (in other words, if `accessTokenType` configuration\n\
        parameter of the service is Bearer), the value of `responseContent` can be\
        \ used as the value of\n`WWW-Authenticate` header.\n\nThe following is an\
        \ example response which complies with RFC 6750.\n\n```\nHTTP/1.1 500 Internal\
        \ Server Error\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the\
        \ value of `action` is `BAD_REQUEST`, it means that the request from the client\
        \ application\ndoes not contain an access token (= the request from the authorization\
        \ server implementation to\nAuthlete does not contain `token` request parameter).\n\
        \nA response with HTTP status of \"400 Bad Request\" must be returned to the\
        \ client application and\nthe content type must be `application/json`.\n\n\
        \nThe value of `responseContent` is a string which describes the error in\
        \ the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage), so if the\nprotected resource of the service\
        \ implementation wants to return an error response to the client\napplication\
        \ in the way that complies with RFC 6750 (in other words, if `accessTokenType`\
        \ configuration\nparameter of the service is `Bearer`), the value of `responseContent`\
        \ can be used as the value of\n`WWW-Authenticate` header.\n\nThe following\
        \ is an example response which complies with RFC 6750.\n\n```\nHTTP/1.1 400\
        \ Bad Request\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\n\
        Pragma: no-cache\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is\
        \ `UNAUTHORIZED`, it means that the access token does not exist or has\nexpired.\n\
        \nThe value of `responseContent` is a string which describes the error in\
        \ the format of RFC\n6750 (OAuth 2.0 Bearer Token Usage), so if the protected\
        \ resource of the service implementation\nwants to return an error response\
        \ to the client application in the way that complies with [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (in other words, if `accessTokenType` configuration\nparameter of the service\
        \ is `Bearer`), the value of `responseContent` can be used as the value of\n\
        `WWW-Authenticate` header.\n\nThe following is an example response which complies\
        \ with RFC 6750.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {responseContent}\n\
        Cache-Control: no-store\nPragma: no-cache\n```\n\n**FORBIDDEN**\n\nWhen the\
        \ value of `action` is `FORBIDDEN`, it means that the access token does not\
        \ cover the required\nscopes or that the subject associated with the access\
        \ token is different from the subject contained\nin the request.\n\nA response\
        \ with HTTP status of \"400 Bad Request\" must be returned to the client application\
        \ and\nthe content type must be `application/json`.\n\nThe value of `responseContent`\
        \ is a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage), so if the\nprotected resource of the service\
        \ implementation wants to return an error response to the client\napplication\
        \ in the way that complies with RFC 6750 (in other words, if `accessTokenType`\
        \ configuration\nparameter of the service is Bearer), the value of `responseContent`\
        \ can be used as the value of\n`WWW-Authenticate` header.\n\nThe following\
        \ is an example response which complies with RFC 6750.\n\n```\nHTTP/1.1 403\
        \ Forbidden\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\n\
        Pragma: no-cache\n```\n\n**OK**\n\nWhen the value of `action` is `OK`, it\
        \ means that the access token which the client application\npresented is valid\
        \ (= exists and has not expired).\n\nThe implementation of the protected resource\
        \ endpoint is supposed to return the protected resource\nto the client application.\n\
        \nWhen action is `OK`, the value of `responseContent` is `\"Bearer error=\\\
        \"invalid_request\\\"\"`. This\nis the simplest string which can be used as\
        \ the value of `WWW-Authenticate` header to indicate\n\"400 Bad Request\"\
        . The implementation of the protected resource endpoint may use this string\
        \ to\ntell the client application that the request was bad (e.g. in case necessary\
        \ request parameters\nfor the protected resource endpoint are missing). However,\
        \ in such a case, the implementation\nshould generate a more informative error\
        \ message to help developers of client applications.\n\nThe following is an\
        \ example error response which complies with RFC 6750.\n\n```\nHTTP/1.1 200\
        \ OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\
        \n{responseContent}\n```\n\nBasically, The value of `responseContent` is a\
        \ string which describes the error in the format of\n[RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage). So, if\nthe service has selected `Bearer`\
        \ as the value of `accessTokenType` configuration parameter, the\nvalue of\
        \ `responseContent` can be used directly as the value of `WWW-Authenticate`\
        \ header. However,\nif the service has selected another different token type,\
        \ the service has to generate error messages\nfor itself.\n\n_**JWT-based\
        \ access token**_\n\nSince version 2.1, Authlete provides a feature to issue\
        \ access tokens in JWT format. This feature\ncan be enabled by setting a non-null\
        \ value to the `accessTokenSignAlg` property of the service\n(see the description\
        \ of the Service class for details). `/api/auth/introspection` API can accept\n\
        access tokens in JWT format. However, note that the API does not return information\
        \ contained in\na given JWT-based access token but returns information stored\
        \ in the database record which corresponds\nto the given JWT-based access\
        \ token. Because attributes of the database record can be modified\nafter\
        \ the access token is issued (for example, by using `/api/auth/token/update`\
        \ API), information\nreturned by `/api/auth/introspection` API and information\
        \ the given JWT-based access token holds\nmay be different.\n\n</details>\n"
      operationId: auth_introspection_api
      requestBody:
        content:
          application/json:
            example:
              token: VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI
              subject: john
              scopes:
              - history.read
              - timeline.read
            schema:
              $ref: '#/components/schemas/introspection_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/introspection_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A056001
                resultMessage: "[A056001] The access token is valid."
                action: OK
                clientAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasUsed: false
                existent: true
                expiresAt: 1640416873000
                refreshable: true
                responseContent: Bearer error="invalid_request"
                scopes:
                - history.read
                - timeline.read
                serviceAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                subject: john
                sufficient: true
                usable: true
              schema:
                $ref: '#/components/schemas/introspection_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/introspection, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/introspection, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/introspection, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/introspection, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/introspection API
      tags:
      - Introspection Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/introspection \\\
          \n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"token\": \"VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI\",\
          \ \"scopes\": [ \"history.read\", \"timeline.read\" ] }'\n"
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nIntrospectionRequest req = new IntrospectionRequest();\nreq.setToken(\"\
          VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI\");\nreq.setScopes(new String[]\
          \ { \"history.read\", \"timeline.read\" });\n\napi.introspection(req);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nIntrospectionRequest req = new IntrospectionRequest();\nreq.Token = \"\
          VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI\";\nreq.Scopes = { \"history.read\"\
          , \"timeline.read\" };\n\nawait api.Introspection(req);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$req = new IntrospectionRequest();\n\
          $req.setToken(\"VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI\");\n$req.setScopes([\
          \ \"history.read\", \"timeline.read\" ]);\n\n$api.introspection($req);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nreq = Authlete::Model::Request::IntrospectionRequest.new\n\
          req.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI'\nreq.scopes =\
          \ [ 'history.read', 'timeline.read' ]\n\napi.introspection(req)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = IntrospectionRequest()\n\
          req.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI'\nreq.scopes =\
          \ [ 'history.read', 'timeline.read' ]\n\napi.introspection(req)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.IntrospectionRequest{}\n\
          req.Token = \"VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI\"\nreq.Scopes\
          \ = [1]string{ \"history.read\", \"timeline.read\" }\n\napi.Introspection(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new IntrospectionRequest();\n\
          req.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI';\nreq.scopes =\
          \ [ 'history.read', 'timeline.read' ];\n\nawait api.introspection(req);\n"
  /api/auth/introspection/standard:
    post:
      description: "This API exists to help your authorization server provide its\
        \ own introspection API which complies\nwith [RFC 7662](https://tools.ietf.org/html/rfc7662)\
        \ (OAuth 2.0 Token Introspection).\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from within the implementations of the\
        \ introspection endpoint\nof your service. The authorization server implementation\
        \ should retrieve the value of `action` from\nthe response and take the following\
        \ steps according to the value.\n\nIn general, a client application accesses\
        \ a protected resource endpoint of a service with an access\ntoken, and the\
        \ implementation of the endpoint checks whether the presented access token\
        \ has enough\nprivileges (= scopes) to access the protected resource before\
        \ returning the protected resource to\nthe client application. To achieve\
        \ this flow, the endpoint implementation has to know detailed\ninformation\
        \ about the access token. Authlete `/auth/introspection` API can be used to\
        \ get such information.\n\nThe response from `/auth/introspection` API has\
        \ some parameters. Among them, it is `action` parameter\nthat the authorization\
        \ server implementation should check first because it denotes the next action\n\
        that the authorization server implementation should take. According to the\
        \ value of `action`, the\nauthorization server implementation must take the\
        \ steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of\
        \ `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the\
        \ authorization\nserver implementation was wrong or that an error occurred\
        \ in Authlete.\n\nIn either case, from the viewpoint of the client application,\
        \ it is an error on the server side.\nTherefore, the service implementation\
        \ should generate a response to the client application with\nHTTP status of\
        \ \"500 Internal Server Error\".\n\nThe value of `responseContent` is a JSON\
        \ string which describes the error, so it can be used\nas the entity body\
        \ of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)\
        \ does not mention anything about the response\nbody of error responses.\n\
        \nThe following illustrates an example response which the introspection endpoint\
        \ of the authorization\nserver implementation generates and returns to the\
        \ client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type:\
        \ application/json\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the\
        \ value of `action` is `BAD_REQUEST`, it means that the request from the client\
        \ application\nis invalid. This happens when the request from the client did\
        \ not include the token request parameter.\nSee \"[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)\"\
        \ in\nRFC 7662 for details about requirements for introspection requests.\n\
        \nThe HTTP status of the response returned to the client application should\
        \ be \"400 Bad Request\".\n\nThe value of `responseContent` is a JSON string\
        \ which describes the error, so it can be used\nas the entity body of the\
        \ response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)\n\
        does not mention anything about the response body of error responses.\n\n\
        The following illustrates an example response which the introspection endpoint\
        \ of the authorization\nserver implementation generates and returns to the\
        \ client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\n\
        \n{responseContent}\n```\n\n**OK**\n\nWhen the value of `action` is `OK`,\
        \ the request from the client application is valid.\n\nThe HTTP status of\
        \ the response returned to the client application must be \"200 OK\" and its\
        \ content\ntype must be `application/json`.\n\nThe value of `responseContent`\
        \ is a JSON string which complies with the introspection response\ndefined\
        \ in \"2.2. Introspection Response\" in RFC7662.\n\nThe following illustrates\
        \ the response which the introspection endpoint of your authorization server\n\
        implementation should generate and return to the client application.\n\n```\n\
        HTTP/1.1 200 OK\nContent-Type: application/json\n\n{responseContent}\n```\n\
        \nNote that RFC 7662 says _\"To prevent token scanning attacks, **the endpoint\
        \ MUST also require some\nform of authorization to access this endpoint**\"\
        _. This means that you have to protect your introspection\nendpoint in some\
        \ way or other. Authlete does not care about how your introspection endpoint\
        \ is protected.\nIn most cases, as mentioned in RFC 7662, \"401 Unauthorized\"\
        \ is a proper response when an introspection\nrequest does not satisfy authorization\
        \ requirements imposed by your introspection endpoint.\n\n</details>\n"
      operationId: auth_introspection_standard_api
      requestBody:
        content:
          application/json:
            example:
              parameters: token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token
            schema:
              $ref: '#/components/schemas/standard_introspection_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/standard_introspection_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A145001
                resultMessage: "[A145001] Introspection was performed successfully\
                  \ (type=access_token, active=true)."
                action: OK
                responseContent: "{\\\"sub\\\":\\\"john\\\",\\\"scope\\\":\\\"history.read\
                  \ timeline.read\\\",\\\"iss\\\":\\\"https://my-service.example.com\\\
                  \",\\\"active\\\":true,\\\"token_type\\\":\\\"Bearer\\\",\\\"exp\\\
                  \":1640416873,\\\"client_id\\\":\\\"26478243745571\\\"}"
              schema:
                $ref: '#/components/schemas/standard_introspection_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/introspection/standard, TLS must be\
                  \ used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/introspection/standard, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/introspection/standard, The service\
                  \ (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/introspection/standard, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/intraspection/standard API
      tags:
      - Introspection Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/introspection/standard\
          \ \\\n-H \"Content-Type:application/json\" \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"parameters\":\"token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          StandardIntrospectionRequest req = new StandardIntrospectionRequest();
          req.setParameters(...);

          api.standardIntrospection(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          StandardIntrospectionRequest req = new StandardIntrospectionRequest();
          req.Parameters = ...;

          await api.StandardIntrospection(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new StandardIntrospectionRequest();
          $req.setParameters(...);

          $api.standardIntrospection($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::StandardIntrospectionRequest.new
          req.parameters = '...'

          api.standard_introspection(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = StandardIntrospectionRequest()
          req.parameters = ...

          api.standardIntrospection(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.StandardIntrospectionRequest{}\n\
          req.Parameters = ...\n\napi.StandardIntrospection(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new StandardIntrospectionRequest();\n\
          req.parameters = ...;\n\nawait api.standardIntrospection(req);\n"
  /api/auth/revocation:
    post:
      description: "This API revokes access tokens and refresh tokens.\n\n<br>\n<details>\n\
        <summary>Description</summary>\n\nThis API is supposed to be called from within\
        \ the implementation of the revocation endpoint ([RFC\n7009](tools.ietf.org/html/rfc7009))\
        \ of the authorization server implementation in order to revoke\naccess tokens\
        \ and refresh tokens.\n\nThe response from `/auth/revocation` API has some\
        \ parameters. Among them, it is `action` parameter\nthat the authorization\
        \ server implementation should check first because it denotes the next action\n\
        that the authorization server implementation should take. According to the\
        \ value of `action`, the\nauthorization server implementation must take the\
        \ steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of\
        \ `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the\
        \ authorization\nserver implementation was wrong or that an error occurred\
        \ in Authlete.\nIn either case, from the viewpoint of the client application,\
        \ it is an error on the server side.\nTherefore, the service implementation\
        \ should generate a response to the client application with\nHTTP status of\
        \ \"500 Internal Server Error\".\n\nThe value of `responseContent` is a JSON\
        \ string which describes the error, so it can be\nused as the entity body\
        \ of the response.\n\nThe following illustrates the response which the service\
        \ implementation should generate and return\nto the client application.\n\n\
        ```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**INVALID_CLIENT**\n\
        \nWhen the value of `action` is `INVALID_CLIENT`, it means that authentication\
        \ of the client failed.\nIn this case, the HTTP status of the response to\
        \ the client application is either \"400 Bad Request\"\nor \"401 Unauthorized\"\
        . The description about `invalid_client` shown below is an excerpt from [RFC\n\
        6749](https://datatracker.ietf.org/doc/html/rfc6749).\n\n`invalid_client`\n\
        \n> Client authentication failed (e.g., unknown client, no client authentication\
        \ included, or unsupported\nauthentication method). The authorization server\
        \ MAY return an HTTP 401 (Unauthorized) status code\nto indicate which HTTP\
        \ authentication schemes are supported. If the client attempted to authenticate\n\
        via the `Authorization` request header field, the authorization server MUST\
        \ respond with an HTTP\n401 (Unauthorized) status code and include the `WWW-Authenticate`\
        \ response header field matching\nthe authentication scheme used by the client.\n\
        \nIn either case, the value of `responseContent` is a JSON string which can\
        \ be used as the entity\nbody of the response to the client application.\n\
        \nThe following illustrates the response which the service implementation\
        \ should generate and return\nto the client application.\n\n```\nHTTP/1.1\
        \ 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\n<br>\n\n```\nHTTP/1.1 401 Unauthorized\n\
        WWW-Authenticate: {challenge}\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client application\nis invalid.\n\nThe HTTP status of the response returned\
        \ to the client application must be \"400 Bad Request\" and\nthe content type\
        \ must be `application/json`. [RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009),\n\
        [2.2.1. Error Respons](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2.1)\
        \ states \"The\nerror presentation conforms to the definition in [Section\
        \ 5.2](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2)\nof [[RFC\
        \ 6749](https://datatracker.ietf.org/doc/html/rfc6749)].\"\n\nThe value of\
        \ `responseContent` is a JSON string which describes the error, so it can\
        \ be used\nas the entity body of the response.\n\nThe following illustrates\
        \ the response which the authorization server implementation should generate\n\
        and return to the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type:\
        \ application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n\
        ```\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the request\
        \ from the client application is valid\nand the presented token has been revoked\
        \ successfully or if the client submitted an invalid token.\nNote that invalid\
        \ tokens do not cause an error. See [2.2. Revocation Response](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2)\
        \ for details.\n\nThe HTTP status of the response returned to the client application\
        \ must be 200 OK.\n\nIf the original request from the client application contains\
        \ callback request parameter and its\nvalue is not empty, the content type\
        \ should be `application/javascript` and the content should be\na JavaScript\
        \ snippet for JSONP.\n\nThe value of `responseContent` is JavaScript snippet\
        \ if the original request from the client application\ncontains callback request\
        \ parameter and its value is not empty. Otherwise, the value of `responseContent`\n\
        is `null`.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/javascript\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
      operationId: auth_revocation_api
      requestBody:
        content:
          application/json:
            example:
              parameters: VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token
              clientId: "26478243745571"
              clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
            schema:
              $ref: '#/components/schemas/revocation_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/revocation_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A113001
                resultMessage: "[A113001] The token has been revoked successfully."
                action: OK
              schema:
                $ref: '#/components/schemas/revocation_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/revocation, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/revocation, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/revocation, The service (API Key =\
                  \ 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/revocation, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/revocation API
      tags:
      - Revocation Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/revocation \\\n\
          -H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"parameters\": \"token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token\"\
          , \"clientId\": \"26478243745571\", \"clientSecret\": \"gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          RevocationRequest req = new RevocationRequest();
          request.setParameters(...);

          api.revocation(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          RevocationRequest req = new RevocationRequest();
          req.Parameters = ...;

          await api.Revocation(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new RevocationRequest();
          $req.setParameters(...);

          $api.revocation($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::RevocationRequest.new
          req.parameters = '...'

          api.revocation(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = RevocationRequest()
          req.parameters = ...

          api.revocation(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.RevocationRequest{}\n\
          req.Parameters = ...\n\napi.Revocation(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new RevocationRequest();\n\
          req.parameters = ...;\n\nawait api.revocation(req);\n"
  /api/auth/userinfo:
    post:
      description: "This API gathers information about a user.\n\n<br>\n<details>\n\
        <summary>Description</summary>\n\nThis API is supposed to be called from within\
        \ the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)\n\
        of the authorization server in order to get information about the user that\
        \ is associated with\nan access token.\n\nThe response from `/auth/userinfo`\
        \ API has various parameters. Among them, it is `action` parameter\nthat the\
        \ authorization server implementation should check first because it denotes\
        \ the next action\nthat the authorization server implementation should take.\
        \ According to the value of `action`, the\nservice implementation must take\
        \ the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value\
        \ of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the\
        \ authorization\nserver implementation was wrong or that an error occurred\
        \ in Authlete. In either case, from the\nviewpoint of the client application,\
        \ it is an error on the server side. Therefore, the service\nimplementation\
        \ should generate a response to the client application with HTTP status of\
        \ \"500 Internal\nServer Error\".\n\nThe value of `responseContent` is a string\
        \ which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)\n\
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can\
        \ use the value of `responseContent`\nas the value of`WWW-Authenticate` header.\n\
        \nThe following is an example response which complies with RFC 6750. Note\
        \ that OpenID Connect Core\n1.0 requires that an error response from userinfo\
        \ endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 500 Internal Server Error\nWWW-Authenticate:\
        \ {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client application\ndoes not contain an access token (= the request\
        \ from the authorization server implementation to\nAuthlete does not contain\
        \ `token` parameter).\n\nThe value of `responseContent` is a string which\
        \ describes the error in the format\nof [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage) so the\nuserinfo endpoint implementation\
        \ can use the value of `responseContent` as the value of`WWW-Authenticate`\n\
        header.\n\nThe following is an example response which complies with RFC 6750.\
        \ Note that OpenID Connect Core\n1.0 requires that an error response from\
        \ userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: {responseContent}\n\
        Cache-Control: no-store\nPragma: no-cache\n```\n\n**UNAUTHORIZED**\n\nWhen\
        \ the value of `action` is `UNAUTHORIZED`, it means that the access token\
        \ does not exist, has\nexpired, or is not associated with any subject (= any\
        \ user account).\n\nThe value of `responseContent` is a string which describes\
        \ the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation\
        \ can use the value of `responseContent` as the value of`WWW-Authenticate`\n\
        header.\n\nThe following is an example response which complies with RFC 6750.\
        \ Note that OpenID Connect Core\n1.0 requires that an error response from\
        \ userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {responseContent}\n\
        Cache-Control: no-store\nPragma: no-cache\n```\n\n**FORBIDDEN**\n\nWhen the\
        \ value of `action` is `FORBIDDEN`, it means that the access token does not\
        \ include the\n`openid` scope.\n\nThe value of `responseContent` is a string\
        \ which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)\n\
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can\
        \ use the value of `responseContent`\nas the value of`WWW-Authenticate` header.\n\
        \nThe following is an example response which complies with RFC 6750. Note\
        \ that OpenID Connect Core\n1.0 requires that an error response from userinfo\
        \ endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: {responseContent}\n\
        Cache-Control: no-store\nPragma: no-cache\n```\n\n**OK**\n\nWhen the value\
        \ of `action` is `OK`, it means that the access token which the client application\n\
        presented is valid. To be concrete, it means that the access token exists,\
        \ has not expired, includes\nthe openid scope, and is associated with a subject\
        \ (= a user account).\n\nWhat the userinfo endpoint implementation should\
        \ do next is to collect information about the subject\n(user) from your database.\
        \ The value of the `subject` is contained in the subject parameter in the\n\
        response from this API and the names of data, i.e., the claims names are contained\
        \ in the claims\nparameter in the response. For example, if the `subject`\
        \ parameter is `joe123` and the claims\nparameter is `[ \"given_name\", \"\
        email\" ]`, you need to extract information about joe123's given name\nand\
        \ email from your database.\n\nThen, call Authlete's `/auth/userinfo/issue`\
        \ API with the collected information and the access token\nin order to make\
        \ Authlete generate an ID token.\n\nIf an error occurred during the above\
        \ steps, generate an error response to the client. The response\nshould comply\
        \ with [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750). For example,\
        \ if the\nsubject associated with the access token does not exist in your\
        \ database any longer, you may feel\nlike generating a response like below.\n\
        \n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: Bearer error=\"invalid_token\"\
        ,\n error_description=\"The subject associated with the access token does\
        \ not exist.\"\nCache-Control: no-store\nPragma: no-cache\n```\n\nAlso, an\
        \ error might occur on database access. If you treat the error as an internal\
        \ server error,\nthen the response would be like the following.\n\n```\nHTTP/1.1\
        \ 500 Internal Server Error\nWWW-Authenticate: Bearer error=\"server_error\"\
        ,\n error_description=\"Failed to extract information about the subject from\
        \ the database.\"\nCache-Control: no-store\nPragma: no-cache\n```\n</details>\n"
      operationId: auth_userinfo_api
      requestBody:
        content:
          application/json:
            example:
              token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
            schema:
              $ref: '#/components/schemas/userinfo_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/userinfo_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A091001
                resultMessage: "[A091001] The access token presented at the userinfo\
                  \ endpoint is valid."
                action: OK
                clientId: "15518267821"
                clientIdAliasUsed: false
                scopes:
                - openid
                subject: john
                token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
              schema:
                $ref: '#/components/schemas/userinfo_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/userinfo, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/userinfo, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/userinfo, The service (API Key = 21653835348762)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/userinfo, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/userinfo API
      tags:
      - UserInfo Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/userinfo \\\n-H\
          \ 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"token\": \"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          UserInfoRequest req = new UserInfoRequest();
          req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

          api.userinfo(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          UserInfoRequest req = new UserInfoRequest();
          req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI";

          await api.Userinfo(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new UserInfoRequest();
          $req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

          $api.userinfo($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::UserInfoRequest.new
          req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

          api.user_info(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = UserInfoRequest()
          req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

          api.userinfo(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.UserInfoRequest{}\n\
          req.Token = \"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\"\n\napi.Userinfo(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new UserInfoRequest();\nreq.token\
          \ = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI';\n\nawait api.userInfo(req);\n"
  /api/auth/userinfo/issue:
    post:
      description: "This API generates an ID token.\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from within the implementation of the\
        \ [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)\n\
        of the authorization server in order to generate an ID token. Before calling\
        \ this API, a valid\nresponse from `/auth/userinfo` API must be obtained.\
        \ Then, call this API with the access token\ncontained in the response and\
        \ the claims values of the user (subject) associated with the access\ntoken.\
        \ See **OK** written in the description of `/auth/userinfo` API for details.\n\
        \nThe response from `/auth/userinfo/issue` API has various parameters. Among\
        \ them, it is `action`\nparameter that the authorization server implementation\
        \ should check first because it denotes the\nnext action that the authorization\
        \ server implementation should take. According to the value of\n`action`,\
        \ the service implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\
        \nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the\
        \ request from the authorization\nserver implementation was wrong or that\
        \ an error occurred in Authlete. In either case, from the\nviewpoint of the\
        \ client application, it is an error on the server side. Therefore, the service\n\
        implementation should generate a response to the client application with HTTP\
        \ status of \"500 Internal\nServer Error\".\n\nThe parameter `responseContent`\
        \ returns a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation\
        \ can use the value of `responseContent` as the value of`WWW-Authenticate`\n\
        header.\n\nThe following is an example response which complies with RFC 6750.\
        \ Note that OpenID Connect Core\n1.0 requires that an error response from\
        \ userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 500 Internal Server Error\nWWW-Authenticate:\
        \ {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client application\ndoes not contain an access token (= the request\
        \ from the authorization server implementation to\nAuthlete does not contain\
        \ `token` parameter).\n\nThe parameter `responseContent` returns a string\
        \ which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation\
        \ can use the value of `responseContent` as the value of`WWW-Authenticate`\n\
        header.\n\nThe following is an example response which complies with RFC 6750.\
        \ Note that OpenID Connect Core\n1.0 requires that an error response from\
        \ userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: {responseContent}\n\
        Cache-Control: no-store\nPragma: no-cache\n```\n\n**UNAUTHORIZED**\n\nWhen\
        \ the value of `action` is `UNAUTHORIZED`, it means that the access token\
        \ does not exist, has\nexpired, or is not associated with any subject (= any\
        \ user account).\n\nThe parameter `responseContent` returns a string which\
        \ describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation\
        \ can use the value of `responseContent` as the value of`WWW-Authenticate`\n\
        header.\n\nThe following is an example response which complies with RFC 6750.\
        \ Note that OpenID Connect Core\n1.0 requires that an error response from\
        \ userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {responseContent}\n\
        Cache-Control: no-store\nPragma: no-cache\n```\n\n**FORBIDDEN**\n\nWhen the\
        \ value of `action` is `FORBIDDEN`, it means that the access token does not\
        \ include the\n`openid` scope.\n\nThe parameter `responseContent` returns\
        \ a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750)\
        \ (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation\
        \ can use the value of `responseContent` as the value of`WWW-Authenticate`\n\
        header.\n\nThe following is an example response which complies with RFC 6750.\
        \ Note that OpenID Connect Core\n1.0 requires that an error response from\
        \ userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError)\
        \ for details.\n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: {responseContent}\n\
        Cache-Control: no-store\nPragma: no-cache\n```\n\n**JSON**\n\nWhen the value\
        \ of `action` is `JSON`, it means that the access token which the client application\n\
        presented is valid and an ID token was successfully generated in the format\
        \ of JSON.\n\nThe userinfo endpoint implementation is expected to generate\
        \ a response to the client application.\nThe content type of the response\
        \ must be `application/json` and the response body must be an ID\ntoken in\
        \ JSON format.\n\nThe value of `responseContent` is the ID token in JSON format\
        \ when `action` is `JSON`, so\na response to the client can be built like\
        \ below.\n\n```\nHTTP/1.1 200 OK\nCache-Control: no-store\nPragma: no-cache\n\
        Content-Type: application/json;charset=UTF-8\n\n{responseContent}\n```\n\n\
        **JWT**\n\nWhen the value of `action` is `JWT`, it means that the access token\
        \ which the client application\npresented is valid and an ID token was successfully\
        \ generated in the format of JWT (JSON Web Token)\n([RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519)).\n\
        \nThe userinfo endpoint implementation is expected to generate a response\
        \ to the client application.\nThe content type of the response must be `application/jwt`\
        \ and the response body must be an ID\ntoken in JWT format.\n\nThe value of\
        \ `responseContent` is the ID token in JSON format when `action` is `JWT`,\
        \ so a response\nto the client can be built like below.\n\n```\nHTTP/1.1 200\
        \ OK\nCache-Control: no-store\nPragma: no-cache\nContent-Type: application/jwt\n\
        \n{responseContent}\n```\n\n</details>\n"
      operationId: auth_userinfo_issue_api
      requestBody:
        content:
          application/json:
            example:
              token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
            schema:
              $ref: '#/components/schemas/userinfo_issue_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/userinfo_issue_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A096001
                resultMessage: "[A096001] An ID token was generated successfully."
                action: JSON
                responseContent: "{\\\"exp\\\":1511600971,\\\"sub\\\":\\\"john\\\"\
                  ,\\\"aud\\\":[\\\"26478243745571\\\"],\\\"iss\\\":\\\"https://authlete.com\\\
                  \",\\\"iat\\\":1511514571}"
              schema:
                $ref: '#/components/schemas/userinfo_issue_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/userinfo/issue, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/userinfo/issue, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/userinfo/issue, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/userinfo/issue, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/userinfo/issue API
      tags:
      - UserInfo Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/userinfo/issue\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"token\": \"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          UserInfoIssueRequest req = new UserInfoIssueRequest();
          req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

          api.userinfoIssue(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          UserInfoIssueRequest req = new UserInfoIssueRequest();
          req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI";

          await api.UserinfoIssue(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new UserInfoIssueRequest();
          $req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

          $api.userinfoIssue($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::UserInfoIssueRequest.new
          req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

          api.user_info_issue(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = UserInfoIssueRequest()
          req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

          api.userinfoIssue(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.UserInfoIssueRequest{}\n\
          req.Token = \"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\"\n\napi.UserinfoIssue(&req)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst req = new UserInfoIssueRequest();\n\
          req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI';\n\nawait api.userInfoIssue(req);\n"
  /api/service/jwks/get:
    get:
      description: "This API gathers JWK Set information for a service so that its\
        \ client applications can verify\nsignatures by the service and encrypt their\
        \ requests to the service.\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from within the implementation of the\
        \ jwk set endpoint of the\nservice where the service that supports OpenID\
        \ Connect must expose its JWK Set information so that\nclient applications\
        \ can verify signatures by the service and encrypt their requests to the service.\n\
        The URI of the endpoint can be found as the value of `jwks_uri` in [OpenID\
        \ Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n\
        if the service supports [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html).\n\
        \n</details>\n"
      operationId: service_jwks_get_api
      parameters:
      - description: "The boolean value that indicates whether the response should\
          \ include the private keys associated with the service or not. If `true`,\
          \ the private keys are included in the response. The default value is `false`."
        in: query
        name: includePrivateKeys
        required: false
        schema:
          type: boolean
      - description: "This boolean value indicates whether the JSON in the response\
          \ should be formatted or not. If `true`, the JSON in the response is pretty-formatted.\
          \ The default value is `false`."
        in: query
        name: pretty
        required: false
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
                keys:
                - e: AQAB
                  "n": kVXi0XB8LGYZfFPXymaszWjBQsO22tasQH3PEiPeLSymBHbp7PtqM8O8xblqhbxV-24lKNs2zDugQaBiVt4zpalyYxL5kqnfY247priZRfmeUatdECh81T-i3VcLpz_M5yfljfVp3sFdaURUQNA3ow9VtUfvPIxN_9YIxXN1zP2nLP5amC2XA8xMt5iubRwbbPbrLyg69zTOzosDVhRTSs5adHK5HNwVn8wCCZPbU7u1cQD8hFNn8xlQcmOmJjSXUQ9slBpLc7G-dUEOI59RxiPd4R44GtSe8gA1WFXvOAdtGjivSm8BAbxuNO8HFtDJmpVl9YsDr9FsxirFl9ZPKs
                  kty: RSA
                  use: sig
                  kid: rsa-sig-001
                - e: AQAB
                  "n": lQui3_DlrkLs_dyaOQBOclphIIRTTMo0gNlnAgfEM9xjbYQJQzi0CLtO6eseecE3HtvDBWVTw-rMM_NMJTlPTO0_ODWvmJRjXy9DZGEm05LFd_qr6jZ7cdOvjD7zUC3GI9TIokPbjGzueBPJjtAvv_tAazRFCQQfiFy7sQR3u-J4tM8fNo9szo9H09R_eA29llZ3hU39JDKs9nzG60I1mVZtJYPx0_bnO8eYeVDHqoj4SZ4jeru3iX9iDeccH_cDm3M87UomUh-Ri4LlAxXgewDvOaPxAef9ADkDvBVmRo5t60_PJxQ3Tug2EKK-xF1_T7I4TxgS7ga8entMmCxLca
                  kty: RSA
                  use: enc
                  kid: rsa-enc-001
                - crv: P-256
                  kty: EC
                  use: sig
                  "y": 824At71mYpbGK2oOCKAL1Z2scLPrbVwhM882v3a9gBq
                  x: ZXE3h9BxCyyb_Z9ZJ5qH4Vx650y09qwI1EpZO4o4OmL
                  kid: ec256-sig-001
                - crv: P-256
                  kty: EC
                  use: enc
                  "y": j80Y3leZHHnxC_gN-Ols_l_VfEBQkfGDFFDG5LNJKMl
                  x: xAdEkaExYWGGAC1xYjwxzvqcaCyDloylZk04yiE9_OF
                  kid: ec256-enc-001
              schema:
                $ref: '#/components/schemas/service_jwks_get_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /service/jwks/get, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /service/jwks/get, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /service/jwks/get, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /service/jwks/get, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/service/jwks/get API
      tags:
      - JWK Set Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/service/jwks/get?pretty=true \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nboolean pretty = true;\nboolean includePrivateKey = false;\n\napi.getServiceJwks(pretty,\
          \ includePrivateKey);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nbool pretty = true;\nbool includePrivateKey = false;\n\nawait api.GetServiceJwks(pretty,\
          \ includePrivateKey);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$pretty = true;\n\
          $includePrivateKey = false;\n\n$api.getServiceJwks($pretty, $includePrivateKey);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\napi.get_service_jwks(pretty:\
          \ true, includePrivateKeys: false)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\npretty = True\nincludePrivateKey\
          \ = False\n\napi.getServiceJwks(pretty, includePrivateKey)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\npretty := true\nincludePrivateKey\
          \ := false\n\napi.GetServiceJwks(pretty, includePrivateKey)\n"
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nconst pretty = true;\nconst includePrivateKey\
          \ = false;\n\nawait api.getServiceJwks(pretty, includePrivateKey);\n"
  /api/service/configuration:
    get:
      description: "This API gathers configuration information about a service.\n\n\
        <br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to\
        \ be called from within the implementation of the configuration endpoint of\n\
        the service where the service that supports OpenID Connect and [OpenID Connect\
        \ Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html)\n\
        must expose its configuration information in a JSON format. Details about\
        \ the format are described\nin \"[3. OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\"\
        \nin OpenID Connect Discovery 1.0.\n\n</details>\n"
      operationId: service_configuration_api
      parameters:
      - description: "This boolean value indicates whether the JSON in the response\
          \ should be formatted or not. If `true`, the JSON in the response is pretty-formatted.\
          \ The default value is `false`."
        in: query
        name: pretty
        required: false
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
                issuer: https://my-service.example.com
                authorization_endpoint: https://my-service.example.com/authz
                token_endpoint: https://my-service.example.com/token
                scopes_supported:
                - history.read
                - timeline.read
                response_types_supported:
                - code
                response_modes_supported:
                - query
                - fragment
                - form_post
                - query.jwt
                - fragment.jwt
                - form_post.jwt
                - jwt
                grant_types_supported:
                - authorization_code
                - password
                - refresh_token
                subject_types_supported:
                - public
                - pairwise
                id_token_signing_alg_values_supported:
                - HS256
                - HS384
                - HS512
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                id_token_encryption_alg_values_supported:
                - RSA1_5
                - RSA-OAEP
                - RSA-OEAP-256
                - ECDH-ES
                - ECDH-ES+A128KW
                - ECDH-ES+A192KW
                - ECDH-ES+A256KW
                - A128KW
                - A192KW
                - A256KW
                - dir
                - A128GCMKW
                - A192GCMKW
                - A256GCMKW
                - PBES2-HS256+A128KW
                - PBES2-HS384+A192KW
                - PBES2-HS512+A256KW
                id_token_encryption_enc_values_supported:
                - A128CBC-HS256
                - A192CBC-HS384
                - A256CBC-HS512
                - A128GCM
                - A192GCM
                - A256GCM
                userinfo_signing_alg_values_supported:
                - HS256
                - HS384
                - HS512
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                - none
                userinfo_encryption_alg_values_supported:
                - RSA1_5
                - RSA-OAEP
                - RSA-OEAP-256
                - ECDH-ES
                - ECDH-ES+A128KW
                - ECDH-ES+A192KW
                - ECDH-ES+A256KW
                - A128KW
                - A192KW
                - A256KW
                - dir
                - A128GCMKW
                - A192GCMKW
                - A256GCMKW
                - PBES2-HS256+A128KW
                - PBES2-HS384+A192KW
                - PBES2-HS512+A256KW
                userinfo_encryption_enc_values_supported:
                - A128CBC-HS256
                - A192CBC-HS384
                - A256CBC-HS512
                - A128GCM
                - A192GCM
                - A256GCM
                request_object_signing_alg_values_supported:
                - HS256
                - HS384
                - HS512
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                request_object_encryption_alg_values_supported:
                - RSA1_5
                - RSA-OAEP
                - RSA-OEAP-256
                - ECDH-ES
                - ECDH-ES+A128KW
                - ECDH-ES+A192KW
                - ECDH-ES+A256KW
                - A128KW
                - A192KW
                - A256KW
                - dir
                - A128GCMKW
                - A192GCMKW
                - A256GCMKW
                - PBES2-HS256+A128KW
                - PBES2-HS384+A192KW
                - PBES2-HS512+A256KW
                request_object_encryption_enc_values_supported:
                - A128CBC-HS256
                - A192CBC-HS384
                - A256CBC-HS512
                - A128GCM
                - A192GCM
                - A256GCM
                authorization_signing_alg_values_supported:
                - HS256
                - HS384
                - HS512
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                authorization_encryption_alg_values_supported:
                - RSA1_5
                - RSA-OAEP
                - RSA-OEAP-256
                - ECDH-ES
                - ECDH-ES+A128KW
                - ECDH-ES+A192KW
                - ECDH-ES+A256KW
                - A128KW
                - A192KW
                - A256KW
                - dir
                - A128GCMKW
                - A192GCMKW
                - A256GCMKW
                - PBES2-HS256+A128KW
                - PBES2-HS384+A192KW
                - PBES2-HS512+A256KW
                authorization_encryption_enc_values_supported:
                - A128CBC-HS256
                - A192CBC-HS384
                - A256CBC-HS512
                - A128GCM
                - A192GCM
                - A256GCM
                token_endpoint_auth_methods_supported:
                - client_secret_basic
                token_endpoint_auth_signing_alg_values_supported:
                - HS256
                - HS384
                - HS512
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                display_values_supported:
                - page
                claim_types_supported:
                - normal
                claims_parameter_supported: true
                request_parameter_supported: true
                request_uri_parameter_supported: true
                require_request_uri_registration: true
                revocation_endpoint: https://my-service.example.com/revocation
                revocation_endpoint_auth_methods_supported: []
                revocation_endpoint_auth_signing_alg_values_supported:
                - HS256
                - HS384
                - HS512
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                introspection_endpoint: https://my-service.example.com/introspection
                introspection_endpoint_auth_methods_supported: []
                introspection_endpoint_auth_signing_alg_values_supported:
                - HS256
                - HS384
                - HS512
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                code_challenge_methods_supported:
                - plain
                - S256
                tls_client_certificate_bound_access_tokens: false
                backchannel_token_delivery_modes_supported: []
                backchannel_authentication_request_signing_alg_values_supported:
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                backchannel_user_code_parameter_supported: false
                require_pushed_authorization_requests: false
                authorization_details_supported: true
                verified_claims_supported: false
                dpop_signing_alg_values_supported:
                - RS256
                - RS384
                - RS512
                - PS256
                - PS384
                - PS512
                - ES256
                - ES384
                - ES512
                - ES256K
                - EdDSA
                require_signed_request_object: false
                authorization_response_iss_parameter_supported: true
              schema:
                description: "An object representing OpenID Provider configuration\
                  \ information. See [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\
                  \ and [OpenID Provider Configuration Response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse)\
                  \ for more details.\n"
                type: object
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /service/configuration, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /service/configuration, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /service/configuration, The service (API\
                  \ Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /service/configuration, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/service/configuration API
      tags:
      - Configuration Endpoint
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/service/configuration?pretty=true \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          api.getServiceConfiguration(true);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          await api.GetServiceConfiguration(true);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $api.getServiceConfiguration(true);
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\napi.get_service_configuration(pretty:\
          \ true)\n"
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          api.getServiceConfiguration(True)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          api.GetServiceConfiguration(true)
      - lang: ts
        label: deno
        source: "const conf: AuthleteConfiguration = ...;\nconst api: AuthleteApi\
          \ = new AuthleteApiImpl(conf);\n\nawait api.getServiceConfiguration(true);\n"
  /api/client/registration:
    post:
      description: "Register a client. This API is supposed to be used to implement\
        \ a client registration endpoint that\ncomplies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)\
        \ (OAuth 2.0 Dynamic Client\nRegistration Protocol).\n\n<br>\n<details>\n\
        <summary>Description</summary>\n\nThis API is supposed to be called from the\
        \ within the implementation of the client registration\nendpoint of the authorization\
        \ server. The authorization server implementation should retrieve\nthe value\
        \ of `action` from the response and take the following steps according to\
        \ the value.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is\
        \ `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization\n\
        server implementation was wrong or that an error occurred in Authlete.\n\n\
        In either case, from a viewpoint of the client or developer, it is an error\
        \ on the server side.\nTherefore, the authorization server implementation\
        \ should generate a response with \"500 Internal\nServer Error\"s and `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used as\nthe entity body of the response.\n\nThe following\
        \ illustrates the response which the authorization server implementation should\
        \ generate\nand return to the client or developer.\n\n```\nHTTP/1.1 500 Internal\
        \ Server Error\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation\
        \ may return another different response to the client or developer since\n\
        \"500 Internal Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client or developer\nwas wrong.\n\nThe authorization server implementation\
        \ should generate a response with \"400 Bad Request\" and `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used\nas the entity body of the response.\n\nThe following\
        \ illustrates the response which the authorization server implementation should\
        \ generate\nand return to the client or developer.\n\n```\nHTTP/1.1 400 Bad\
        \ Request\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n\n**CREATED**\n\nWhen the value of `action`\
        \ is `CREATED`, it means that the request from the client or developer is\n\
        valid.\n\nThe authorization server implementation should generate a response\
        \ to the client or developer with\n\"201 CREATED\" and `application/json`.\n\
        \nThe `responseContent` a JSON string which can be used as the entity body\
        \ of the response.\n\nThe following illustrates the response which the authorization\
        \ server implementation should generate\nand return to the client or developer.\n\
        \n```\nHTTP/1.1 201 CREATED\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
      operationId: client_registration_api
      requestBody:
        content:
          application/json:
            example:
              json: "{ \"client_name\": \"My Dynamic Client\" }"
            schema:
              $ref: '#/components/schemas/client_registration_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_registration_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A202001
                resultMessage: "[A202001] The client was created with id 26837717140341."
                action: CREATED
                client:
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26837717140341
                  clientIdAliasEnabled: false
                  clientName: My Dynamic Client
                  clientSecret: bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw
                  clientType: CONFIDENTIAL
                  createdAt: 1641735467000
                  defaultMaxAge: 0
                  developer: authlete_21653835348762
                  dynamicallyRegistered: true
                  frontChannelRequestObjectEncryptionRequired: false
                  idTokenSignAlg: RS256
                  modifiedAt: 1641735467013
                  number: 6248
                  parRequired: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                responseContent: "{\\\"default_max_age\\\":0,\\\"registration_client_uri\\\
                  \":\\\"https://my-service.example.com/dcr/register/26837717140341\\\
                  \",\\\"registration_access_token\\\":\\\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\\\
                  \",\\\"client_id\\\":\\\"26837717140341\\\",\\\"token_endpoint_auth_method\\\
                  \":\\\"client_secret_basic\\\",\\\"require_pushed_authorization_requests\\\
                  \":false,\\\"backchannel_user_code_parameter\\\":false,\\\"client_secret\\\
                  \":\\\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\\\
                  \",\\\"client_id_issued_at\\\":1641735467,\\\"tls_client_certificate_bound_access_tokens\\\
                  \":false,\\\"client_name\\\":\\\"My Dynamic Client\\\",\\\"id_token_signed_response_alg\\\
                  \":\\\"RS256\\\",\\\"subject_type\\\":\\\"public\\\",\\\"client_secret_expires_at\\\
                  \":0,\\\"require_signed_request_object\\\":false}"
              schema:
                $ref: '#/components/schemas/client_registration_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/registration, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/registration, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/registration, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/registration, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/registration API
      tags:
      - Dynamic Client Registration
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/client/registration\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"json\": \"{ \\\"client_name\\\": \\\"My Dynamic Client\\\"\
          \ }\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.setJson(...);

          api.dynamicClientRegister(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.Json = "...";

          await api.DynamicClientRegister(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new ClientRegistrationRequest();
          $req.json = "...";

          $api.dynamicClientRegister($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::ClientRegistrationRequest.new
          req.json = '...'

          api.dynamic_client_register(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = new ClientRegistrationRequest()
          req.json = '...'

          api.dynamicClientRegister(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.ClientRegistrationRequest{}\n\
          req.Json = \"...\"\n\napi.DynamicClientRegister(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/registration/get:
    post:
      description: "Get a dynamically registered client. This API is supposed to be\
        \ used to implement a client registration\nmanagement endpoint that complies\
        \ with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)\n(OAuth 2.0\
        \ Dynamic Registration Management).\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from the within the implementation of\
        \ the client registration\nmanagement endpoint of the authorization server.\
        \ The authorization server implementation should\nretrieve the value of `action`\
        \ from the response and take the following steps according to the value.\n\
        \n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`,\
        \ it means that the API call from the authorization\nserver implementation\
        \ was wrong or that an error occurred in Authlete.\n\nIn either case, from\
        \ a viewpoint of the client or developer, it is an error on the server side.\n\
        Therefore, the authorization server implementation should generate a response\
        \ to the client or developer\nwith \"500 Internal Server Error\"s and `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used as\nthe entity body of the response.\n\nThe following\
        \ illustrates the response which the authorization server implementation should\
        \ generate\nand return to the client or developer.\n\n```\nHTTP/1.1 500 Internal\
        \ Server Error\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation\
        \ may return another different response to the client or developer since\n\
        \"500 Internal Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client or developer\nwas wrong.\n\nThe authorization server implementation\
        \ should generate a response to the client or developer with\n\"400 Bad Request\"\
        \ and `application/json`.\n\nThe value of `responseContent` is a JSON string\
        \ which describes the error, so it can be used as\nthe entity body of the\
        \ response.\n\nThe following illustrates the response which the authorization\
        \ server implementation should generate\nand return to the client or developer.\n\
        \n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\
        \nWhen the value of `action` is `UNAUTHORIZED`, it means that the registration\
        \ access token used by\nthe client configuration request (RFC 7592) is invalid,\
        \ or the client application which the token\nis tied to does not exist any\
        \ longer or is invalid.\n\nThe HTTP status of the response returned to the\
        \ client application must be \"401 Unauthorized\" and\nthe content type must\
        \ be `application/json`.\n\nThe value of `responseContent` is a JSON string\
        \ which describes the error, so it can be used as\nthe entity body of the\
        \ response.\n\nThe following illustrates the response which the endpoint implementation\
        \ should generate and return\nto the client application.\n\n```\nHTTP/1.1\
        \ 401 Unauthorized\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\nNOTE: The `UNAUTHORIZED` value\
        \ was added in October, 2021. See the description of\n`Service.unauthorizedOnClientConfigSupported`\
        \ for details.\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that\
        \ the request from the client or developer is valid.\n\nThe authorization\
        \ server implementation should generate a response to the client or developer\
        \ with\n\"200 OK\" and `application/json`.\n\nThe `responseContent` a JSON\
        \ string which can be used as the entity body of the response.\n\nThe following\
        \ illustrates the response which the authorization server implementation should\
        \ generate\nand return to the client or developer.\n\n```\nHTTP/1.1 200 OK\n\
        Content-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\
        \n{responseContent}\n```\n</details>\n"
      operationId: client_registration_get_api
      requestBody:
        content:
          application/json:
            example:
              clientId: "26837717140341"
              token: qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA
            schema:
              $ref: '#/components/schemas/client_registration_get_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_registration_get_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A217001
                resultMessage: "[A217001] The client information has been returned."
                action: OK
                client:
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26837717140341
                  clientIdAliasEnabled: false
                  clientName: My Dynamic Client
                  clientSecret: bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw
                  clientType: CONFIDENTIAL
                  createdAt: 1641735467000
                  defaultMaxAge: 0
                  developer: authlete_21653835348762
                  dynamicallyRegistered: true
                  frontChannelRequestObjectEncryptionRequired: false
                  idTokenSignAlg: RS256
                  modifiedAt: 1641735467000
                  number: 6248
                  parRequired: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                responseContent: "{\\\"default_max_age\\\":0,\\\"registration_client_uri\\\
                  \":\\\"https://my-service.example.com/dcr/register/26837717140341\\\
                  \",\\\"registration_access_token\\\":\\\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\\\
                  \",\\\"client_id\\\":\\\"26837717140341\\\",\\\"token_endpoint_auth_method\\\
                  \":\\\"client_secret_basic\\\",\\\"require_pushed_authorization_requests\\\
                  \":false,\\\"backchannel_user_code_parameter\\\":false,\\\"client_secret\\\
                  \":\\\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\\\
                  \",\\\"client_id_issued_at\\\":1641735467,\\\"tls_client_certificate_bound_access_tokens\\\
                  \":false,\\\"client_name\\\":\\\"My Dynamic Client\\\",\\\"id_token_signed_response_alg\\\
                  \":\\\"RS256\\\",\\\"subject_type\\\":\\\"public\\\",\\\"client_secret_expires_at\\\
                  \":0,\\\"require_signed_request_object\\\":false}"
              schema:
                $ref: '#/components/schemas/client_registration_get_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/registration/get, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/registration/get, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/registration/get, The service (API\
                  \ Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/registration/get, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/registration/get API
      tags:
      - Dynamic Client Registration
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/client/registration/get\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '10167240911:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMbI'\
          \ \\\n-d '{ \"clientId\": \"26837717140341\", \"token\": \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.setClientId("26837717140341");
          req.setToken("qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA");

          api.dynamicClientGet(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.ClientId = "26837717140341";
          req.Token = "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA";

          await api.DynamicClientGet(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new ClientRegistrationRequest();
          $req.clientId = "26837717140341";
          $req.token = "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA";

          $api.dynamicClientGet($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::ClientRegistrationRequest.new
          req.clientId = '26837717140341'
          req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'

          api.dynamic_client_get(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = new ClientRegistrationRequest()
          req.clientId = '26837717140341'
          req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'

          api.dynamicClientGet(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.ClientRegistrationRequest{}\n\
          req.ClientId = \"26837717140341\"\nreq.Token = \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\"\
          \n\napi.DynamicClientGet(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/registration/update:
    post:
      description: "Update a dynamically registered client. This API is supposed to\
        \ be used to implement a client\nregistration management endpoint that complies\
        \ with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)\n(OAuth 2.0\
        \ Dynamic Registration Management).\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from the within the implementation of\
        \ the client registration\nmanagement endpoint of the authorization server.\
        \ The authorization server implementation should\nretrieve the value of `action`\
        \ from the response and take the following steps according to the value.\n\
        \n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`,\
        \ it means that the API call from the authorization\nserver implementation\
        \ was wrong or that an error occurred in Authlete.\n\nIn either case, from\
        \ a viewpoint of the client or developer, it is an error on the server side.\n\
        Therefore, the authorization server implementation should generate a response\
        \ with \"500 Internal\nServer Error\"s and `application/json`.\n\nThe value\
        \ of `responseContent` is a JSON string which describes the error, so it can\
        \ be used as\nthe entity body of the response.\n\nThe following illustrates\
        \ the response which the authorization server implementation should generate\n\
        and return to the client or developer.\n\n```\nHTTP/1.1 500 Internal Server\
        \ Error\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return\
        \ another different response to the client or developer since\n\"500 Internal\
        \ Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client or developer\nwas wrong.\n\nThe authorization server implementation\
        \ should generate a response with \"400 Bad Request\" and `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used as\nthe entity body of the response.\n\nThe following\
        \ illustrates the response which the authorization server implementation should\
        \ generate\nand return to the client or developer.\n\n```\nHTTP/1.1 400 Bad\
        \ Request\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the value\
        \ of `action` is `UNAUTHORIZED`, it means that the registration access token\
        \ used by\nthe client configuration request (RFC 7592) is invalid, or the\
        \ client application which the token\nis tied to does not exist any longer\
        \ or is invalid.\n\nThe HTTP status of the response returned to the client\
        \ application must be \"401 Unauthorized\" and\nthe content type must be `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used as\nthe entity body of the response.\n\nThe following\
        \ illustrates the response which the endpoint implementation should generate\
        \ and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\n\
        Content-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\
        \n{responseContent}\n```\n\nNOTE: The `UNAUTHORIZED` value was added in October,\
        \ 2021. See the description of\n`Service.unauthorizedOnClientConfigSupported`\
        \ for details.\n\n**UPDATED**\n\nWhen the value of `action` is `UPDATED`,\
        \ it means that the request from the client or developer is\nvalid.\n\nThe\
        \ authorization server implementation should generate a response to the client\
        \ or developer with\n\"200 OK\" and `application/json`.\n\nThe `responseContent`\
        \ a JSON string which can be used as the entity body of the response.\n\n\
        The following illustrates the response which the authorization server implementation\
        \ should generate\nand return to the client or developer.\n\n```\nHTTP/1.1\
        \ 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n</details>\n"
      operationId: client_registration_update_api
      requestBody:
        content:
          application/json:
            example:
              clientId: "26837717140341"
              token: qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA
              json: "{\"client_name\":\"My Updated Dynamic Client\",\"default_max_age\"\
                :0,\"registration_client_uri\":\"https://my-service.example.com/dcr/register/26837717140341\"\
                ,\"client_id\":\"26837717140341\",\"token_endpoint_auth_method\":\"\
                client_secret_basic\",\"require_pushed_authorization_requests\":false,\"\
                backchannel_user_code_parameter\":false,\"client_secret\":\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\"\
                ,\"tls_client_certificate_bound_access_tokens\":false,\"id_token_signed_response_alg\"\
                :\"RS256\",\"subject_type\":\"public\",\"require_signed_request_object\"\
                :false}"
            schema:
              $ref: '#/components/schemas/client_registration_update_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_registration_update_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A213001
                resultMessage: "[A213001] The client has been updated."
                action: UPDATED
                client:
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26837717140341
                  clientIdAliasEnabled: false
                  clientName: My Updated Dynamic Client
                  clientSecret: bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw
                  clientType: CONFIDENTIAL
                  createdAt: 1641735467000
                  defaultMaxAge: 0
                  developer: authlete_21653835348762
                  dynamicallyRegistered: true
                  frontChannelRequestObjectEncryptionRequired: false
                  idTokenSignAlg: RS256
                  modifiedAt: 1641826276936
                  number: 6248
                  parRequired: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                responseContent: "{\\\"default_max_age\\\":0,\\\"registration_client_uri\\\
                  \":\\\"https://my-service.example.com/dcr/register/26837717140341\\\
                  \",\\\"registration_access_token\\\":\\\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\\\
                  \",\\\"client_id\\\":\\\"26837717140341\\\",\\\"token_endpoint_auth_method\\\
                  \":\\\"client_secret_basic\\\",\\\"require_pushed_authorization_requests\\\
                  \":false,\\\"backchannel_user_code_parameter\\\":false,\\\"client_secret\\\
                  \":\\\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\\\
                  \",\\\"client_id_issued_at\\\":1641735467,\\\"tls_client_certificate_bound_access_tokens\\\
                  \":false,\\\"client_name\\\":\\\"My Updated Dynamic Client\\\",\\\
                  \"id_token_signed_response_alg\\\":\\\"RS256\\\",\\\"subject_type\\\
                  \":\\\"public\\\",\\\"client_secret_expires_at\\\":0,\\\"require_signed_request_object\\\
                  \":false}"
              schema:
                $ref: '#/components/schemas/client_registration_update_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/registration/update, TLS must be\
                  \ used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/registration/update, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/registration/update, The service\
                  \ (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/registration/update, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/registration/update API
      tags:
      - Dynamic Client Registration
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/client/registration/update\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"clientId\": \"26837717140341\", \"token\": \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\"\
          , \"json\": \"...\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.setClientId("26837717140341");
          req.setToken("qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA");
          req.setJson("...");

          api.dynamicClientUpdate(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.ClientId = "26837717140341";
          req.Token = "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA";
          req.Json = "...";

          await api.DynamicClientUpdate(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new ClientRegistrationRequest();
          $req.clientId = "26837717140341";
          $req.token = "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA";
          $req.json = "...";

          $api.dynamicClientUpdate($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::ClientRegistrationRequest.new
          req.clientId = '26837717140341'
          req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'
          req.json = '...'

          api.dynamic_client_update(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = new ClientRegistrationRequest()
          req.clientId = '26837717140341'
          req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'
          req.json = '...'

          api.dynamicClientUpdate(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.ClientRegistrationRequest{}\n\
          req.ClientId = \"26837717140341\"\nreq.Token = \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\"\
          \nreq.Json = \"...\"\n\napi.DynamicClientUpdate(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/registration/delete:
    post:
      description: "Delete a dynamically registered client. This API is supposed to\
        \ be used to implement a client\nregistration management endpoint that complies\
        \ with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)\n(OAuth 2.0\
        \ Dynamic Registration Management).\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from the within the implementation of\
        \ the client registration\nmanagement endpoint of the authorization server.\
        \ The authorization server implementation should\nretrieve the value of `action`\
        \ from the response and take the following steps according to the value.\n\
        \n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`,\
        \ it means that the API call from the authorization\nserver implementation\
        \ was wrong or that an error occurred in Authlete.\n\nIn either case, from\
        \ a viewpoint of the client or developer, it is an error on the server side.\n\
        Therefore, the authorization server implementation should generate a response\
        \ with \"500 Internal\nServer Error\"s and `application/json`.\n\nThe value\
        \ of `responseContent` is a JSON string which describes the error, so it can\
        \ be used as\nthe entity body of the response.\n\nThe following illustrates\
        \ the response which the authorization server implementation should generate\n\
        and return to the client or developer.\n\n```\nHTTP/1.1 500 Internal Server\
        \ Error\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return\
        \ another different response to the client or developer since\n\"500 Internal\
        \ Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client or developer\nwas wrong.\n\nThe authorization server implementation\
        \ should generate a response with \"400 Bad Request\" and `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used as\nthe entity body of the response.\n\nThe following\
        \ illustrates the response which the authorization server implementation should\
        \ generate\nand return to the client or developer.\n\n```\nHTTP/1.1 400 Bad\
        \ Request\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the value\
        \ of `action` is `UNAUTHORIZED`, it means that the registration access token\
        \ used by\nthe client configuration request (RFC 7592) is invalid, or the\
        \ client application which the token\nis tied to does not exist any longer\
        \ or is invalid.\n\nThe HTTP status of the response returned to the client\
        \ application must be \"401 Unauthorized\" and\nthe content type must be `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used as\nthe entity body of the response.\n\nThe following\
        \ illustrates the response which the endpoint implementation should generate\
        \ and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\n\
        Content-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\
        \n{responseContent}\n```\n\nNOTE: The `UNAUTHORIZED` value was added in October,\
        \ 2021. See the description of\n`Service.unauthorizedOnClientConfigSupported`\
        \ for details.\n\n**DELETED**\n\nWhen the value of `action` is `DELETED`,\
        \ it means that the request from the client or developer is\nvalid.\n\nThe\
        \ authorization server implementation should generate a response to the client\
        \ or developer with\n\"204 No Content\".\n\nThe following illustrates the\
        \ response which the authorization server implementation should generate\n\
        and return to the client or developer.\n\n```\nHTTP/1.1 204 No Content\nCache-Control:\
        \ no-store\nPragma: no-cache\n```\n</details>\n"
      operationId: client_registration_delete_api
      requestBody:
        content:
          application/json:
            example:
              clientId: "26837717140341"
              token: qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA
            schema:
              $ref: '#/components/schemas/client_registration_delete_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_registration_delete_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A216001
                resultMessage: "[A216001] The client has been deleted."
                action: DELETED
              schema:
                $ref: '#/components/schemas/client_registration_delete_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /client/registration/delete, TLS must be\
                  \ used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /client/registration/delete, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /client/registration/delete, The service\
                  \ (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /client/registration/delete, Authlete Server\
                  \ error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/registration/delete API
      tags:
      - Dynamic Client Registration
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/client/registration/delete\
          \ \\\n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"clientId\": \"26837717140341\", \"token\": \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\"\
          }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.setClientId("26837717140341");
          req.setToken("qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA");

          api.dynamicClientDelete(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          ClientRegistrationRequest req = new ClientRegistrationRequest();
          req.ClientId = "26837717140341";
          req.Token = "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA";

          await api.DynamicClientDelete(client);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new ClientRegistrationRequest();
          $req.clientId = "26837717140341";
          $req.token = "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA";

          $api.dynamicClientDelete($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::ClientRegistrationRequest.new
          req.clientId = '26837717140341'
          req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'

          api.dynamic_client_delete(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = new ClientRegistrationRequest()
          req.clientId = '26837717140341'
          req.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'

          api.DynamicClientDelete(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.ClientRegistrationRequest{}\n\
          req.ClientId = \"26837717140341\"\nreq.Token = \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\"\
          \n\napi.DynamicClientDelete(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/backchannel/authentication:
    post:
      description: "This API parses request parameters of a [backchannel authentication\
        \ request](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_request)\n\
        and returns necessary data for the authorization server implementation to\
        \ process the backchannel\nauthentication request further.\n\n<br>\n<details>\n\
        <summary>Description</summary>\n\nThis API is supposed to be called from within\
        \ the implementation of the [backchannel authentication\nendpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)\n\
        of the service. The endpoint implementation must extract the request parameters\
        \ from the\nbackchannel authentication request from the client application\
        \ and pass them as the value of parameters\nrequest parameter for Authlete's\
        \ `/backchannel/authentication` API.\n\nThe value of parameters is the entire\
        \ entity body (which is formatted in `application/x-www-form-urlencoded`)\n\
        of the request from the client application.\n\nThe following code snippet\
        \ is an example in JAX-RS showing how to extract request parameters from\n\
        the backchannel authentication request.\n\n```java\n@POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n\
        public Response post(String parameters)\n{\n    // 'parameters' is the entity\
        \ body of the backchannel authentication request.\n    ......\n}\n```\n\n\
        The endpoint implementation does not have to parse the request parameters\
        \ from the client application\nbecause Authlete's `/backchannel/authentication`\
        \ API does it.\n\nThe response from `/backchannel/authentication` API has\
        \ various parameters. Among them, it is `action`\nparameter that the authorization\
        \ server implementation should check first because it denotes the\nnext action\
        \ that the authorization server implementation should take. According to the\
        \ value of\n`action`, the service implementation must take the steps described\
        \ below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`,\
        \ it means that the request from the authorization\nserver implementation\
        \ was wrong or that an error occurred in Authlete.\nIn either case, from the\
        \ viewpoint of the client application, it is an error on the server side.\n\
        Therefore, the service implementation should generate a response to the client\
        \ application with\nHTTP status of \"500 Internal Server Error\" and `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used\nas the entity body of the response.\n\nThe following\
        \ illustrates the response which the service implementation should generate\
        \ and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server\
        \ Error\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the value\
        \ of `action` is `BAD_REQUEST`, it means that the request from the client\
        \ application\nis invalid.\n\nThe authorization server implementation should\
        \ generate a response to the client application with\n\"400 Bad Request\"\
        \ and `application/json`.\n\nThe value of `responseContent` is a JSON string\
        \ which describes the error, so it can be used as\nthe entity body of the\
        \ response.\n\nThe following illustrates the response which the service implementation\
        \ should generate and return\nto the client application.\n\n```\nHTTP/1.1\
        \ 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the\
        \ value of `action` is `UNAUTHORIZED`, it means that client authentication\
        \ of the backchannel\nauthentication request failed. Note that client authentication\
        \ is always required at the backchannel\nauthentication endpoint. This implies\
        \ that public clients are not allowed to use the backchannel\nauthentication\
        \ endpoint.\n\nThe authorization server implementation should generate a response\
        \ to the client application with\n\"401 Unauthorized\" and `application/json`.\n\
        \nThe value of `responseContent` is a JSON string which describes the error,\
        \ so it can be used as\nthe entity body of the response.\n\nThe following\
        \ illustrates the response which the service implementation must generate\
        \ and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\n\
        WWW-Authenticate: (challenge)\nContent-Type: application/json\nCache-Control:\
        \ no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**USER_IDENTIFICATION**\n\
        \nWhen the value of `action` is `USER_IDENTIFICATION`, it means that the backchannel\
        \ authentication\nrequest from the client application is valid. The authorization\
        \ server implementation has to follow\nthe steps below.\n\n[1] END-USER IDENTIFICATION\n\
        \nThe first step is to determine the subject (= unique identifier) of the\
        \ end-user from whom the\nclient application wants to get authorization.\n\
        \nAccording to the CIBA specification, a backchannel authentication request\
        \ contains one (and only\none) of the `login_hint_token`, `id_token_hint`\
        \ and `login_hint` request parameters as a hint\nby which the authorization\
        \ server identifies the subject of an end-user.<br>\nThe authorization server\
        \ implementation can know which hint is included in the backchannel authentication\n\
        request by the `hintType` parameter. For example, when the value of the parameter\
        \ `LOGIN_HINT`,\nit means that the backchannel authentication request contains\
        \ the `login_hint` request parameter\nas a hint.<br>\n\nThe value of the `hint`\
        \ parameter is the value of the hint. For example, when the value of the\n\
        `hintType` parameter is `LOGIN_HINT`, The value of the `hint` parameter is\
        \ the value of the `login_hint`\nrequest parameter.<br>\n\nIt is up to the\
        \ authorization server implementation how to determine the subject of the\
        \ end-user\nfrom the hint. Only when the `id_token_hint` request parameter\
        \ is used, authorization server\nimplementation can use the sub response parameter,\
        \ which holds the value of the sub claim in the\n`id_token_hint` request parameter.\n\
        \n[2] END-USER IDENTIFICATION ERROR\n\nThere are some cases where the authorization\
        \ server implementation encounters an error during\nthe user identification\
        \ process. In any error case, the service implementation has to return an\n\
        HTTP response with the error response parameter to the client application.\
        \ The following is an\nexample of such error responses.\n\n```\nHTTP/1.1 400\
        \ Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma:\
        \ no-cache\n\n{ \"error\":\"unknown_user_id\" }\n```\n\nAuthlete provides\
        \ `/backchannel/authentication/fail` API that builds the response body (JSON)\n\
        of an error response. However, because it is easy to build an error response\
        \ manually, you may\nchoose not to call the API. One good thing in using the\
        \ API is that the API call can trigger\ndeletion of the ticket which has been\
        \ issued from Authlete's `/backchannel/authentication` API.\nIf you don't\
        \ call `/backchannel/authentication/fail` API, the ticket will continue to\
        \ exist in\nthe database until it is cleaned up by the batch program after\
        \ the ticket expires.<br>\n\nPossible error cases that the authorization server\
        \ implementation itself has to handle are as\nfollows. Other error cases have\
        \ already been covered by `/backchannel/authentication` API.\n\n- <u>`expired_login_hint_token`</u><br>\n\
        \  The authorization server implementation detected that the hint presented\
        \ by the `login_hint_token`\n  request parameter has expired.\n\n  Note that\
        \ the format of `login_hint_token` is not described in the CIBA Core spec\
        \ at all and\n  so there is no consensus on how to detect expiration of `login_hint_token`.\
        \ Interpretation\n  of `login_hint_token` is left to each authorization server\
        \ implementation.\n\n- <u>`unknown_user_id`</u><br>\n  The authorization server\
        \ implementation could not determine the subject of the end-user by\n  the\
        \ presented hint.\n\n- <u>`unauthorized_client`</u><br>\n  The authorization\
        \ server implementation has custom rules to reject backchannel authentication\n\
        \  requests from some particular clients and found that the client which has\
        \ made the backchannel\n  authentication request is one of the particular\
        \ clients.\n\n  Note that `/backchannel/authentication` API does not return\
        \ `action=USER_IDENTIFICATION` in\n  cases where the client does not exist\
        \ or client authentication has failed. Therefore, the\n  authorization server\
        \ implementation will never have to use the error code `unauthorized_client`\n\
        \  unless the server has intentionally implemented custom rules to reject\
        \ backchannel authentication\n  requests based on clients.\n\n- <u>`missing_user_code`</u><br>\n\
        \  The authorization server implementation has custom rules to require that\
        \ a backchannel authentication\n  request include a user code for some particular\
        \ users and found that the user identified by\n  the hint is one of the particular\
        \ users.\n\n  Note that `/backchannel/authentication` API does not return\
        \ `action=USER_IDENTIFICATION` when\n  both the `backchannel_user_code_parameter_supported`\
        \ metadata of the server and the\n  `backchannel_user_code_parameter` metadata\
        \ of the client are true and the backchannel authentication\n  request does\
        \ not include the user_code request parameter. In this case, `/backchannel/authentication`\n\
        \  API returns action=BAD_REQUEST with JSON containing `\"error\":\"missing_user_code\"\
        `. Therefore,\n  the authorization server implementation will never have to\
        \ use the error code `missing_user_code`\n  unless the server has intentionally\
        \ implemented custom rules to require a user code based\n  on users even in\
        \ the case where the `backchannel_user_code_parameter` metadata of the client\n\
        \  which has made the backchannel authentication request is `false`.\n\n-\
        \ <u>`invalid_user_code`</u><br>\n  The authorization server implementation\
        \ detected that the presented user code is invalid.\n\n  Note that the format\
        \ of user_code is not described in the CIBA Core spec at all and so there\n\
        \  is no consensus on how to judge whether a user code is valid or not. It\
        \ is up to each authorization\n  server implementation how to handle user\
        \ codes.\n\n- <u>`invalid_binding_message`</u><br>\n  The authorization server\
        \ implementation detected that the presented binding message is invalid.\n\
        \n  Note that the format of binding_message is not described in the CIBA Core\
        \ spec at all and\n  so there is no consensus on how to judge whether a binding\
        \ message is valid or not. It is\n  up to each authorization server implementation\
        \ how to handle binding messages.\n\n- <u>`invalid_target`</u><br>\n  The\
        \ authorization server implementation rejects the requested target resources.\n\
        \n  The error code invalid_target is from \"Resource Indicators for OAuth\
        \ 2.0\". The specification\n  defines the resource request parameter. By using\
        \ the parameter, client applications can request\n  target resources that\
        \ should be bound to the access token being issued. If the authorization\n\
        \  server wants to reject the request, call `/backchannel/authentication/fail`\
        \ API with `INVALID_TARGET`.\n\n- <u>`access_denined`</u><br>\n  The authorization\
        \ server implementation has custom rules to reject backchannel authentication\n\
        \  requests without asking the end-user and respond to the client as if the\
        \ end-user had rejected\n  the request in some particular cases and found\
        \ that the backchannel authentication request\n  is one of the particular\
        \ cases.\n\n  The authorization server implementation will never have to use\
        \ the error code `access_denied`\n  at this timing unless the server has intentionally\
        \ implemented custom rules to reject backchannel\n  authentication requests\
        \ without asking the end-user and respond to the client as if the end-user\n\
        \  had rejected the request.\n\n[3] AUTH_REQ_ID ISSUE\n\nIf the authorization\
        \ server implementation has successfully determined the subject of the end-user,\n\
        the next action is to return an HTTP response to the client application which\
        \ contains `auth_req_id`.\n\nAuthlete provides `/backchannel/authentication/issue`\
        \ API which generates a JSON containing `auth_req_id`,\nso, your next action\
        \ is (1) call the API, (2) receive the response from the API, (3) build a\
        \ response\nto the client application using the content of the API response,\
        \ and (4) return the response to\nthe client application. See the description\
        \ of `/backchannel/authentication/issue` API for details.\n\n[4] END-USER\
        \ AUTHENTICATION AND AUTHORIZATION\n\nAfter sending a JSON containing `auth_req_id`\
        \ back to the client application, the service implementation\nstarts to communicate\
        \ with an authentication device of the end-user. It is assumed that end-user\n\
        authentication is performed on the authentication device and the end-user\
        \ confirms the content of\nthe backchannel authentication request and grants\
        \ authorization to the client application if everything\nis okay. The authorization\
        \ server implementation must be able to receive the result of the end-user\n\
        authentication and authorization from the authentication device.\n\nHow to\
        \ communicate with an authentication device and achieve end-user authentication\
        \ and authorization\nis up to each authorization server implementation, but\
        \ the following request parameters of the backchannel\nauthentication request\
        \ should be taken into consideration in any implementation.\n\n- <u>`acr_values`</u><br>\n\
        \  A backchannel authentication request may contain an array of ACRs (Authentication\
        \ Context Class\n  References) in preference order. If multiple authentication\
        \ devices are registered for the end-user,\n  the authorization server implementation\
        \ should take the ACRs into consideration when selecting\n  the best authentication\
        \ device.\n\n- <u>`scope`</u><br>\n  A backchannel authentication request\
        \ always contains a list of scopes. At least, `openid` is\n  included in the\
        \ list (otherwise `/backchannel/authentication` API returns `action=BAD_REQUEST`).\n\
        \  It would be better to show the requested scopes to the end-user on the\
        \ authentication device\n  or somewhere appropriate.\n\n  If the scope request\
        \ parameter contains `address`, `email`, `phone` and/or `profile`, they are\n\
        \  interpreted as defined in \"5.4. Requesting Claims using Scope Values of\
        \ OpenID Connect Core 1.0\".\n  That is, they are expanded into a list of\
        \ claim names. The claimNames parameter returns the expanded\n  result.\n\n\
        - <u>`binding_message`</u><br>\n  A backchannel authentication request may\
        \ contain a binding message. It is a human readable identifier\n  or message\
        \ intended to be displayed on both the consumption device (client application)\
        \ and the\n  authentication device.\n\n- <u>`user_code`</u><br>\n  A backchannel\
        \ authentication request may contain a user code. It is a secret code, such\
        \ as password\n  or pin, known only to the end-user but verifiable by the\
        \ authorization server. The user code should\n  be used to authorize sending\
        \ a request to the authentication device.\n\n[5] END-USER AUTHENTICATION AND\
        \ AUTHORIZATION COMPLETION\n\nAfter receiving the result of end-user authentication\
        \ and authorization, the authorization server\nimplementation must call Authlete's\
        \ `/backchannel/authentication/complete` API to tell Authlete\nthe result\
        \ and pass necessary data so that Authlete can generate an ID token, an access\
        \ token and\noptionally a refresh token. See the description of the API for\
        \ details.\n\n[6] CLIENT NOTIFICATION\n\nWhen the backchannel token delivery\
        \ mode is either `ping` or `push`, the authorization server implementation\n\
        must send a notification to the pre-registered notification endpoint of the\
        \ client after the end-user\nauthentication and authorization. In this case,\
        \ the `action` parameter in a response from `/backchannel/authentication/complete`\n\
        API is `NOTIFICATION`. See the description of `/backchannel/authentication/complete`\
        \ API for details.\n\n[7] TOKEN REQUEST\n\nWhen the backchannel token delivery\
        \ mode is either `ping` or `poll`, the client application will make\na token\
        \ request to the token endpoint to get an ID token, an access token and optionally\
        \ a refresh\ntoken.\n\nA token request that corresponds to a backchannel authentication\
        \ request uses `urn:openid:params:grant-type:ciba`\nas the value of the `grant_type`\
        \ request parameter. Authlete's `/auth/token` API recognizes the\ngrant type\
        \ automatically and behaves properly, so the existing token endpoint implementation\
        \ does\nnot have to be changed to support CIBA.\n</details>\n"
      operationId: backchannel_authentication_api
      requestBody:
        content:
          application/json:
            example:
              parameters: login_hint=john&scope=openid&client_notification_token=my-client-notification-token&user_code=my-user-code
              clientId: "26862190133482"
              clientSecret: 8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A
            schema:
              $ref: '#/components/schemas/backchannel_authentication_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/backchannel_authentication_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A179001
                resultMessage: "[A179001] The backchannel authentication request was\
                  \ processed successfully."
                action: USER_IDENTIFICATION
                clientId: 26862190133482
                clientIdAliasUsed: false
                clientName: My CIBA Client
                clientNotificationToken: my-client-notification-token
                deliveryMode: POLL
                hint: john
                hintType: LOGIN_HINT
                requestedExpiry: 0
                scopes:
                - defaultEntry: false
                  name: openid
                serviceAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                ticket: Y1qeCf0A-JUz6caceaBfd2AaBYNZ-X-WGTP5Qv47cQI
                userCode: my-user-code
                userCodeRequired: false
              schema:
                $ref: '#/components/schemas/backchannel_authentication_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/backchannel/authentication, TLS must\
                  \ be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/backchannel/authentication, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/backchannel/authentication, The service\
                  \ (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/backchannel/authentication, Authlete\
                  \ Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/backchannel/authentication API
      tags:
      - CIBA
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/backchannel/authentication\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"parameters\": \"login_hint=john&scope=openid&client_notification_token=my-client-notification-token&user_code=my-user-code\"\
          , \"clientId\": \"26862190133482\", \"clientSecret\":\"8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          BackchannelAuthenticationRequest req = new BackchannelAuthenticationRequest();
          req.setParameters(...);
          req.setClientId("26862190133482");
          req.setClientSecret("8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A");

          api.backchannelAuthentication(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = new AuthletePropertiesConfiguration();
          IAuthleteApi api = new AuthleteApi(conf);

          BackchannelAuthenticationRequest req = new BackchannelAuthenticationRequest();
          req.Parameters = ...;
          req.ClientId = "26862190133482";
          req.ClientSecret = "8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A";

          await api.BackchannelAuthentication(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new BackchannelAuthenticationRequest();
          $req.setParameters(...);
          $req.setClientId("26862190133482");
          $req.setClientSecret("8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A");

          $api.backchannelAuthentication($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::BackchannelAuthenticationRequest.new
          req.parameters = '...'
          req.client_id = '26862190133482'
          req.client_secret = '8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A'

          api.backchannel_authentication(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = BackchannelAuthenticationRequest()
          req.parameters = ...
          req.clientId = '26862190133482'
          req.clientSecret = '8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A'

          api.backchannelAuthentication(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.BackchannelAuthenticationRequest{}\n\
          req.Parameters = ...\nreq.ClientId = \"26862190133482\"\nreq.ClientSecret\
          \ = \"8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A\"\
          \n\napi.BackchannelAuthentication(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/backchannel/authentication/issue:
    post:
      description: "This API prepares JSON that contains an `auth_req_id`. The JSON\
        \ should be used as the response body\nof the response which is returned to\
        \ the client from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)\n\
        \n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed\
        \ to be called from within the implementation of the backchannel authentication\n\
        endpoint of the service in order to generate a successful response to the\
        \ client application.\n\nThe description of the `/backchannel/authentication`\
        \ API describes the timing when this API should\nbe called and the meaning\
        \ of request parameters. See [AUTH_REQ_ID ISSUE] in `USER_IDENTIFICATION`.\n\
        \nThe response from `/backchannel/authentication/issue` API has some parameters.\
        \ Among them, it is\n`action` parameter that the authorization server implementation\
        \ should check first because it denotes\nthe next `action` that the authorization\
        \ server implementation should take. According to the value\nof `action`,\
        \ the authorization server implementation must take the steps described below.\n\
        \n```java\n@POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic\
        \ Response post(String parameters)\n{\n    // 'parameters' is the entity body\
        \ of the backchannel authentication request.\n    ......\n}\n```\n\nThe endpoint\
        \ implementation does not have to parse the request parameters from the client\
        \ application\nbecause Authlete's `/backchannel/authentication` API does it.\n\
        \nThe response from `/backchannel/authentication` API has various parameters.\
        \ Among them, it is `action`\nparameter that the authorization server implementation\
        \ should check first because it denotes the\nnext action that the authorization\
        \ server implementation should take. According to the value of\n`action`,\
        \ the service implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\
        \nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the\
        \ request from the authorization\nserver implementation was wrong or that\
        \ an error occurred in Authlete.\nIn either case, from the viewpoint of the\
        \ client application, it is an error on the server side.\nTherefore, the service\
        \ implementation should generate a response to the client application with\n\
        HTTP status of \"500 Internal Server Error\" and `application/json`.\n\nThe\
        \ value of `responseContent` is a JSON string which describes the error, so\
        \ it can be used as\nthe entity body of the response.\n\nThe following illustrates\
        \ the response which the service implementation should generate and return\n\
        to the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type:\
        \ application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n\
        ```\n\n**INVALID_TICKET**\n\nWhen the value of `action` is `INVALID_TICKET`,\
        \ it means that the ticket included in the API call\nwas invalid. For example,\
        \ it does not exist or has expired.\n\nFrom a viewpoint of the client application,\
        \ this is an error on the server side. Therefore, the\nauthorization server\
        \ implementation should generate a response to the client application with\n\
        \"500 Internal Server Error\" and `application/json`.\n\nYou can build an\
        \ error response in the same way as shown in the description for the case\
        \ of `INTERNAL_SERVER_ERROR`.\n\n**OK**\n\nWhen the value of `action` is `OK`,\
        \ it means that Authlete has succeeded in preparing JSON that\ncontains an\
        \ `auth_req_id`. The JSON should be used as the response body of the response\
        \ that is\nreturned to the client from the backchannel authentication endpoint.\
        \ `responseContent` contains\nthe JSON.\n\nThe following illustrates the response\
        \ which the authorization server implementation should generate\nand return\
        \ to the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
      operationId: backchannel_authentication_issue_api
      requestBody:
        content:
          application/json:
            example:
              ticket: NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q
            schema:
              $ref: '#/components/schemas/backchannel_authentication_issue_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/backchannel_authentication_issue_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A183001
                resultMessage: "[A183001] An auth_req_id was issued successfully."
                action: OK
                authReqId: _mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE
                expiresIn: 3600
                interval: 0
                responseContent: "{\\\"auth_req_id\\\":\\\"_mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE\\\
                  \",\\\"interval\\\":0,\\\"expires_in\\\":3600}"
              schema:
                $ref: '#/components/schemas/backchannel_authentication_issue_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/backchannel/authentication/issue,\
                  \ TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/backchannel/authentication/issue,\
                  \ Authorization header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/backchannel/authentication/issue,\
                  \ The service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/backchannel/authentication/issue,\
                  \ Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/backchannel/authentication/issue API
      tags:
      - CIBA
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/backchannel/authentication/issue\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"ticket\": \"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          BackchannelAuthenticationIssueRequest req = new BackchannelAuthenticationIssueRequest();
          req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");

          api.backchannelAuthenticationIssue(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          BackchannelAuthenticationIssueRequest req = new BackchannelAuthenticationIssueRequest();
          req.Ticket = "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q";

          await api.BackchannelAuthenticationIssue(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new BackchannelAuthenticationIssueRequest();
          $req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");

          $api.backchannelAuthenticationIssue($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::BackchannelAuthenticationIssueRequest.new
          req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'

          api.backchannel_authentication_issue(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = BackchannelAuthenticationIssueRequest()
          req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'

          api.backchannelAuthenticationIssue(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.BackchannelAuthenticationIssueRequest{}\n\
          req.Ticket = \"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\"\n\napi.BackchannelAuthenticationIssue(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/backchannel/authentication/fail:
    post:
      description: "The API prepares JSON that contains an error. The JSON should\
        \ be used as the response body of the\nresponse which is returned to the client\
        \ from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint).\n\
        \n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed\
        \ to be called from within the implementation of the [backchannel authentication\n\
        endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)\n\
        of the service in order to generate an error response to the client application.\n\
        \nThe response from `/backchannel/authentication/fails` API has some parameters.\
        \ Among them, it is\n`action` parameter that the authorization server implementation\
        \ should check first because it denotes\nthe next action that the authorization\
        \ server implementation should take. According to the value\nof `action`,\
        \ the authorization server implementation must take the steps described below.\n\
        \n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`,\
        \ it means that (1) the `reason` request parameter\nof the API call was `SERVER_ERROR`,\
        \ (2) an error occurred on Authlete side, or (3) the request parameters\n\
        of the API call were wrong. In this case, the authorization server implementation\
        \ should return\na \"500 Internal Server Error\" response to the client application.\
        \ However, in most cases, commercial\nimplementations prefer to use other\
        \ HTTP status code than 5xx.\n\n**BAD_REQUEST**\n\nWhen the value of `action`\
        \ is `BAD_REQUEST`, the authorization server implementation should return\
        \ a\n\"400 Bad Request\" response to the client application.\n\n**FORBIDDEN**\n\
        \nWhen the value of `action` is `FORBIDDEN`, it means that the `reason` request\
        \ parameter of the API call\nwas `ACCESS_DENIED`. In this case, the backchannel\
        \ authentication endpoint of the authorization\nserver implementation should\
        \ return a \"403 Forbidden\" response to the client application.\n\n</details>\n"
      operationId: backchannel_authentication_fail_api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backchannel_authentication_fail_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/backchannel_authentication_fail_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A185001
                resultMessage: "[A185001] Successfully generated an error response\
                  \ for the backchannel authentication request."
                action: FORBIDDEN
                responseContent: "{\\\"error\\\":\\\"access_denied\\\"}"
              schema:
                $ref: '#/components/schemas/backchannel_authentication_fail_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/backchannel/authentication/fail, TLS\
                  \ must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/backchannel/authentication/fail, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/backchannel/authentication/fail, The\
                  \ service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/backchannel/authentication/fail, Authlete\
                  \ Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/backchannel/authentication/fail API
      tags:
      - CIBA
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/backchannel/authentication/fail\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"ticket\": \"holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0\"\
          , \"reason\": \"ACCESS_DENIED\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          BackchannelAuthenticationFailRequest req = new BackchannelAuthenticationFailRequest();
          req.setTicket("holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0");
          req.setReason(BackchannelAuthenticationFailRequest.Reason.ACCESS_DENIED);

          api.backchannelAuthenticationFail(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          BackchannelAuthenticationFailRequest req = new BackchannelAuthenticationFailRequest();
          req.Ticket = "holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0";
          req.Reason = BackchannelAuthenticationFailReason.ACCESS_DENIED;

          await api.BackchannelAuthenticationFail(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new BackchannelAuthenticationFailRequest();
          $req.setTicket("holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0");
          $req.setReason(BackchannelAuthenticationFailReason.ACCESS_DENIED);

          $api.backchannelAuthenticationFail($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::BackchannelAuthenticationFailRequest.new
          req.ticket = 'holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0'
          req.reason = 'ACCESS_DENIED'

          api.backchannel_authentication_fail(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = BackchannelAuthenticationFailRequest()
          req.ticket = 'holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0'
          req.reason = BackchannelAuthenticationFailReason.ACCESS_DENIED

          api.backchannelAuthenticationFail(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.BackchannelAuthenticationFailRequest{}\n\
          req.Ticket = \"holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0\"\nreq.Reason\
          \ = BackchannelAuthenticationFailReason.ACCESS_DENIED\n\napi.backchannelAuthenticationFail(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/backchannel/authentication/complete:
    post:
      description: "This API returns information about what action the authorization\
        \ server should take after it receives\nthe result of end-user's decision\
        \ about whether the end-user has approved or rejected a client application's\n\
        request on the authentication device.\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nAfter the implementation of the backchannel authentication endpoint returns\
        \ JSON containing an\n`auth_req_id` to the client, the authorization server\
        \ starts a background process that communicates\nwith the authentication device\
        \ of the end-user. On the authentication device, end-user authentication\n\
        is performed and the end-user is asked whether they give authorization to\
        \ the client or not. The\nauthorization server will receive the result of\
        \ end-user authentication and authorization from\nthe authentication device.\n\
        \nAfter the authorization server receives the result from the authentication\
        \ device, or even in the\ncase where the server gave up receiving a response\
        \ from the authentication device for some reasons,\nthe server should call\
        \ the `/backchannel/authentication/complete` API to tell Authlete the result.\n\
        \nWhen the end-user was authenticated and authorization was granted to the\
        \ client by the end-user,\nthe authorization server should call the API with\
        \ `result=AUTHORIZED`. In this successful case,\nthe `subject` request parameter\
        \ is mandatory. If the token delivery mode is `push`, the API will generate\n\
        an access token, an ID token and optionally a refresh token. On the other\
        \ hand, if the token delivery\nmode is `poll` or `ping`, the API will just\
        \ update the database record so that `/auth/token` API\ncan generate tokens\
        \ later.\n\nWhen the authorization server received the decision of the end-user\
        \ from the authentication device\nand it indicates that the end-user has rejected\
        \ to give authorization to the client, the authorization\nserver should call\
        \ the API with `result=ACCESS_DENIED`. In this case, if the token delivery\
        \ mode\nis `push`, the API will generate an error response that contains the\
        \ error response parameter and\noptionally the `error_description` and error_uri\
        \ response parameters (if the `errorDescription`\nand `errorUri` request parameters\
        \ have been given). On the other hand, if the token delivery mode\nis `poll`\
        \ or `ping`, the API will just update the database record so that `/auth/token`\
        \ API can\ngenerate an error response later. In any token delivery mode, the\
        \ value of the error parameter will\nbecome `access_denied`.\n\nWhen the authorization\
        \ server could not get the result of end-user authentication and authorization\n\
        from the authentication device for some reasons, the authorization server\
        \ should call the API with\n`result=TRANSACTION_FAILED`. In this error case,\
        \ the API will behave in the same way as in the case\nof `ACCESS_DENIED`.\
        \ The only difference is that `expired_token` is used as the value of the\
        \ `error`\nparameter.\n\nThe response from `/backchannel/authentication/complete`\
        \ API has various parameters. Among them,\nit is `action` parameter that the\
        \ authorization server implementation should check first because\nit denotes\
        \ the next action that the authorization server implementation should take.\
        \ According to\nthe value of `action`, the service implementation must take\
        \ the steps described below.\n\n**SERVER_ERROR**\n\nWhen the value of `action`\
        \ is `SERVER_ERROR`, it means either (1) that the request from the authorization\n\
        server to Authlete was wrong, or (2) that an error occurred on Authlete side.\n\
        \nWhen the backchannel token delivery mode is `ping` or `push`, `SERVER_ERROR`\
        \ is used only when\nan error is detected before the record of the ticket\
        \ (which is included in the API call to `/backchannel/authentication/complete`)\n\
        is retrieved from the database successfully. If an error is detected after\
        \ the record of the ticket\nis retrieved from the database, `NOTIFICATION`\
        \ is used instead of `SERVER_ERROR`.\n\nWhen the backchannel token delivery\
        \ mode is `poll`, `SERVER_ERROR` is used regardless of whether\nit is before\
        \ or after the record of the ticket is retrieved from the database.\n\n**NO_ACTION**\n\
        \nWhen the value of `action` is `NO_ACTION`, it means that the authorization\
        \ server does not have\nto take any immediate action.\n\n`NO_ACTION` is returned\
        \ when the backchannel token delivery mode is `poll`. In this case, the client\n\
        will receive the final result at the token endpoint.\n\n**NOTIFICATION**\n\
        \nWhen the value of `action` is `NOTIFICATION`, it means that the authorization\
        \ server must send a\nnotification to the client notification endpoint.\n\n\
        According to the CIBA Core specification, the notification is an HTTP POST\
        \ request whose request\nbody is JSON and whose `Authorization` header contains\
        \ the client notification token, which was\nincluded in the backchannel authentication\
        \ request as the value of the `client_notification_token`\nrequest parameter,\
        \ as a bearer token.\n\nWhen the backchannel token delivery mode is `ping`,\
        \ the request body of the notification is JSON\nwhich contains the `auth_req_id`\
        \ property only. When the backchannel token delivery mode is `push`,\nthe\
        \ request body will additionally contain an access token, an ID token and\
        \ other properties. Note\nthat when the backchannel token delivery mode is\
        \ `poll`, a notification does not have to be sent\nto the client notification\
        \ endpoint.\n\nIn error cases, in the ping mode, however, the content of a\
        \ notification is not different from the\ncontent in successful cases. That\
        \ is, the notification contains the `auth_req_id` property only.\nThe client\
        \ will know the error when it accesses the token endpoint. On the other hand,\
        \ in the\n`push` mode, in error cases, the content of a notification will\
        \ include the `error` property instead\nof an access token and an ID token.\
        \ The client will know the error by detecting that error is included\nin the\
        \ notification.\n\nIn any case, the value of `responseContent` is JSON which\
        \ can be used as the request body of the\nnotification.\n\nThe client notification\
        \ endpoint that the notification should be sent to the value of the `clientNotificationEndpoint`\n\
        parameter. Likewise, the client notification token that the notification should\
        \ include as a bearer\ntoken is the `clientNotificationToken` parameter. With\
        \ these methods, the notification can be built\nlike the following.\n\n```\n\
        POST {clientNotificationEndpoint} HTTP/1.1\nHOST: {The host of clientNotificationEndpoint}\n\
        Authorization: Bearer {notificationToken}\nContent-Type: application/json\n\
        \n{responseContent}\n```\n</details>\n"
      operationId: backchannel_authentication_complete_api
      requestBody:
        content:
          application/json:
            example:
              ticket: NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q
              result: AUTHORIZED
              subject: john
            schema:
              $ref: '#/components/schemas/backchannel_authentication_complete_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/backchannel_authentication_complete_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A198001
                resultMessage: "[A198001] Successfully updated the database so that\
                  \ the token endpoint can generate tokens (mode = poll, result =\
                  \ AUTHORIZED)."
                accessTokenDuration: 0
                action: NO_ACTION
                authReqId: _mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE
                clientId: 26862190133482
                clientIdAliasUsed: false
                clientName: My CIBA Client
                deliveryMode: POLL
                idTokenDuration: 0
                refreshTokenDuration: 0
                serviceAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
              schema:
                $ref: '#/components/schemas/backchannel_authentication_complete_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/backchannel/authentication/complete,\
                  \ TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/backchannel/authentication/complete,\
                  \ Authorization header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/backchannel/authentication/complete,\
                  \ The service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/backchannel/authentication/complete,\
                  \ Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/backchannel/authentication/complete API
      tags:
      - CIBA
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/backchannel/authentication/complete\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"ticket\": \"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\"\
          , \"result\": \"AUTHORIZED\", \"subject\": \"john\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          BackchannelAuthenticationCompleteRequest req = new BackchannelAuthenticationCompleteRequest();
          req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");
          req.setResult(BackchannelAuthenticationCompleteRequest.Result.AUTHORIZED);
          req.setSubject("john");

          api.backchannelAuthenticationComplete(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          BackchannelAuthenticationCompleteRequest req = new BackchannelAuthenticationCompleteRequest();
          req.Ticket = "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q";
          req.Result = BackchannelAuthenticationCompleteResult.AUTHORIZED;
          req.Subject = "john";

          await api.BackchannelAuthenticationComplete(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new BackchannelAuthenticationCompleteRequest();
          $req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");
          $req.setResult(BackchannelAuthenticationCompleteResult.AUTHORIZED);
          $req.setSubject("john");

          $api.backchannelAuthenticationComplete($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::BackchannelAuthenticationCompleteRequest.new
          req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'
          req.result = 'AUTHORIZED'
          req.subject = 'john'

          api.backchannel_authentication_complete(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = BackchannelAuthenticationCompleteRequest()
          req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'
          req.result = BackchannelAuthenticationCompleteResult.AUTHORIZED
          req.subject = 'john'

          api.backchannelAuthenticationComplete(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.BackchannelAuthenticationCompleteRequest{}\n\
          req.Ticket = \"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\"\nreq.Result\
          \ = BackchannelAuthenticationCompleteResult.AUTHORIZED\nreq.Subject = \"\
          john\"\n\napi.BackchannelAuthenticationComplete(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/device/authorization:
    post:
      description: "This API parses request parameters of a [device authorization\
        \ request](https://datatracker.ietf.org/doc/html/rfc8628#section-3.1)\nand\
        \ returns necessary data for the authorization server implementation to process\
        \ the device authorization\nrequest further.\n\n<br>\n<details>\n<summary>Description</summary>\n\
        \nThis API is supposed to be called from the within the implementation of\
        \ the device authorization\nendpoint of the service. The service implementation\
        \ should retrieve the value of `action` from the\nresponse and take the following\
        \ steps according to the value.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value\
        \ of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from\
        \ the authorization\nserver implementation was wrong or that an error occurred\
        \ in Authlete.\n\nIn either case, from a viewpoint of the client application,\
        \ it is an error on the server side.\nTherefore, the authorization server\
        \ implementation should generate a response to the client application\nwith\
        \ \"500 Internal Server Error\"s and `application/json`.\n\nThe value of `responseContent`\
        \ is a JSON string which describes t he error, so it can be\nused as the entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ authorization server implementation should generate\nand return to the client\
        \ application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\
        Cache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\
        \nWhen the value of `action` is `BAD_REQUEST`, it means that the request from\
        \ the client application\nis wrong.\n\nThe authorization server implementation\
        \ should generate a response to the client application with\n\"400 Bad Request\"\
        \ and `application/json`.\n\nThe value of `responseContent` is a JSON string\
        \ which describes the error, so it can be used as\nthe entity body of the\
        \ response.\n\nThe following illustrates the response which the service implementation\
        \ should generate and return\nto the client application.\n\n```\nHTTP/1.1\
        \ 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\n\
        Pragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the\
        \ value of `action` is `UNAUTHORIZED`, it means that client authentication\
        \ of the device authorization\nrequest failed.\n\nThe authorization server\
        \ implementation should generate a response to the client application with\n\
        \"401 Unauthorized\" and `application/json`.\n\nThe value of `responseContent`\
        \ is a JSON string which describes the error, so it can be used as\nthe entity\
        \ body of the response.\n\nThe following illustrates the response which the\
        \ service implementation must generate and return\nto the client application.\n\
        \n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: (challenge)\nContent-Type:\
        \ application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n\
        ```\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the device\
        \ authorization request from the client\napplication is valid.\n\nThe authorization\
        \ server implementation should generate a response to the client application\
        \ with\n\"200 OK\" and `application/json`.\n\nThe `responseContent` is a JSON\
        \ string which can be used as the entity body of the response.\n\nThe following\
        \ illustrates the response which the authorization server implementation should\
        \ generate\nand return to the client application.\n</details>\n"
      operationId: device_authorization_api
      requestBody:
        content:
          application/json:
            example:
              parameters: client_id=26888344961664&scope=history.read
              clientId: "26888344961664"
              clientSecret: SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog
            schema:
              $ref: '#/components/schemas/device_authorization_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/device_authorization_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device_authorization_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /device/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /device/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /device/authorization, The service (API\
                  \ Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /device/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/device/authorization API
      tags:
      - Device Flow
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/device/authorization\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"parameters\": \"client_id=26888344961664&scope=history.read\"\
          , \"clientId\": \"26888344961664\", \"clientSecret\":\"SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog\"\
          \ }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          DeviceAuthorizationRequest req = new DeviceAuthorizationRequest();
          req.setParameters(...);
          req.setClientId("26888344961664");
          req.setClientSecret("SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog");

          api.deviceAuthorization(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          DeviceAuthorizationRequest req = new DeviceAuthorizationRequest();
          req.Parameters = ...;
          req.ClientId = "26888344961664";
          req.ClientSecret = "SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog";

          await api.DeviceAuthorization(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new DeviceAuthorizationRequest();
          $req.setParameters(...);
          $req.setClientId("26888344961664");
          $req.setClientSecret("SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog");

          $api.deviceAuthorization($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::DeviceAuthorizationRequest.new
          req.parameters = '...'
          req.client_id = '26888344961664'
          req.client_secret = 'SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog'

          api.device_authorization(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = DeviceAuthorizationRequest()
          req.parameters = ...
          req.clientId = '26888344961664'
          req.clientSecret = 'SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog'

          api.deviceAuthorization(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.DeviceAuthorizationRequest{}\n\
          req.Parameters = ...\nreq.ClientId = \"26888344961664\"\nreq.ClientSecret\
          \ = \"SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog\"\
          \n\napi.DeviceAuthorization(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/device/verification:
    post:
      description: "The API returns information associated with a user code.\n\n<br>\n\
        <details>\n<summary>Description</summary>\n\nAfter receiving a response from\
        \ the device authorization endpoint of the authorization server,\nthe client\
        \ application shows the end-user the user code and the verification URI which\
        \ are included\nin the device authorization response. Then, the end-user will\
        \ access the verification URI using\na web browser on another device (typically,\
        \ a smart phone). In normal implementations, the verification\nendpoint will\
        \ return an HTML page with an input form where the end-user inputs a user\
        \ code. The\nauthorization server will receive a user code from the form.\n\
        \nAfter receiving a user code, the authorization server should call Authlete's\
        \ `/device/verification`\nAPI with the user code. And then, the authorization\
        \ server implementation should retrieve the value\nof `action` parameter from\
        \ the API response and take the following steps according to the value.\n\n\
        **SERVER_ERROR**\n\nWhen the value of `action` is `SERVER_ERROR`, it means\
        \ that an error occurred on Authlete side. The\nauthorization server implementation\
        \ should tell the end-user that something wrong happened and\nurge her to\
        \ re-initiate a device flow.\n\n**NOT_EXIST**\n\nWhen the value of `action`\
        \ is `NOT_EXIST`, it means that the user code does not exist. The authorization\n\
        server implementation should tell the end-user that the user code is invalid\
        \ and urge her to retry\nto input a valid user code.\n\n**EXPIRED**\n\nWhen\
        \ the value of `action` is `EXPIRED`, it means that the user code has expired.\
        \ The authorization\nserver implementation should tell the end-user that the\
        \ user code has expired and urge her to\nre-initiate a device flow.\n\n**VALID**\n\
        \nWhen the value of `action` is `VALID`, it means that the user code exists,\
        \ has not expired, and\nbelongs to the service. The authorization server implementation\
        \ should interact with the end-user\nto ask whether she approves or rejects\
        \ the authorization request from the device.\n</details>\n"
      operationId: device_verification_api
      requestBody:
        content:
          application/json:
            example:
              userCode: XWWKPBWVXQ
            schema:
              $ref: '#/components/schemas/device_verification_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/device_verification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A224001
                resultMessage: "[A224001] The user code is valid."
                action: VALID
                clientId: 26888344961664
                clientIdAliasUsed: false
                clientName: My Device Flow Client
                expiresAt: 1642001978000
                scopes:
                - defaultEntry: false
                  name: history.read
                serviceAttributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
              schema:
                $ref: '#/components/schemas/device_verification_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /device/verification, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /device/verification, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /device/verification, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /device/verification, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/device/verification API
      tags:
      - Device Flow
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/device/verification\
          \ \\\n-H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"userCode\": \"XWWKPBWVXQ\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          DeviceVerificationRequest req = new DeviceVerificationRequest();
          req.setUserCode("XWWKPBWVXQ");

          api.deviceVerification(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          DeviceVerificationRequest req = new DeviceVerificationRequest();
          req.SetUserCode("XWWKPBWVXQ");

          await api.DeviceVerification(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new DeviceVerificationRequest();
          $req.setUserCode("XWWKPBWVXQ");

          $api.deviceVerification($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::DeviceVerificationRequest.new
          req.user_code = 'XWWKPBWVXQ'

          api.deviceVerification(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = DeviceVerificationRequest()
          req.setUserCode('XWWKPBWVXQ')

          api.deviceVerification(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.DeviceVerificationRequest{}\n\
          req.UserCode = \"XWWKPBWVXQ\"\n\napi.DeviceVerification(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/device/complete:
    post:
      description: "This API returns information about what action the authorization\
        \ server should take after it receives\nthe result of end-user's decision\
        \ about whether the end-user has approved or rejected a client\napplication's\
        \ request.\n\n<br>\n<details>\n<summary>Description</summary>\n\nIn the device\
        \ flow, an end-user accesses the verification endpoint of the authorization\
        \ server where\nshe interacts with the verification endpoint and inputs a\
        \ user code. The verification endpoint checks\nif the user code is valid and\
        \ then asks the end-user whether she approves or rejects the authorization\n\
        request which the user code represents.\n\nAfter the authorization server\
        \ receives the decision of the end-user, it should call Authlete's\n`/device/complete`\
        \ API to tell Authlete the decision.\n\nWhen the end-user was authenticated\
        \ and authorization was granted to the client by the end-user,\nthe authorization\
        \ server should call the API with `result=AUTHORIZED`. In this successful\
        \ case,\nthe subject request parameter is mandatory. The API will update the\
        \ database record so that `/auth/token`\nAPI can generate an access token\
        \ later.\n\nIf the `scope` parameter of the device authorization request included\
        \ the openid scope, an ID token\nis generated. In this case, `sub`, `authTime`,\
        \ `acr` and `claims` request parameters in the API\ncall to `/device/complete`\
        \ affect the ID token.\n\nWhen the authorization server receives the decision\
        \ of the end-user and it indicates that she has\nrejected to give authorization\
        \ to the client, the authorization server should call the API with\n`result=ACCESS_DENIED`.\
        \ In this case, the API will update the database record so that the `/auth/token`\n\
        API can generate an error response later. If `errorDescription` and `errorUri`\
        \ request parameters\nare given to the `/device/complete` API, they will be\
        \ used as the values of `error_description`\nand `error_uri` response parameters\
        \ in the error response from the token endpoint.\n\nWhen the authorization\
        \ server could not get decision from the end-user for some reasons, the authorization\n\
        server should call the API with `result=TRANSACTION_FAILED`. In this error\
        \ case, the API will behave\nin the same way as in the case of `ACCESS_DENIED`.\
        \ The only difference is that `expired_token` is\nused as the value of the\
        \ `error` response parameter instead of `access_denied`.\n\nAfter receiving\
        \ a response from the `/device/complete` API, the implementation of the authorization\n\
        server should retrieve the value of `action` from the response and take the\
        \ following steps according\nto the value.\n\n**SERVER_ERROR**\n\nWhen the\
        \ value of `action` is `SERVER_ERROR`, it means that an error occurred on\
        \ Authlete side. The\nauthorization server implementation should tell the\
        \ end-user that something wrong happened and\nurge her to re-initiate a device\
        \ flow.\n\n**USER_CODE_NOT_EXIST**\n\nWhen the value of `action` is `USER_CODE_NOT_EXIST`,\
        \ it means that the user code included in the API\ncall does not exist. The\
        \ authorization server implementation should tell the end-user that the user\n\
        code has been invalidated and urge her to re-initiate a device flow.\n\n**USER_CODE_EXPIRED**\n\
        \nWhen the value of `action` is `USER_CODE_EXPIRED`,  it means that the user\
        \ code included in the API\ncall has expired. The authorization server implementation\
        \ should tell the end-user that the user\ncode has expired and urge her to\
        \ re-initiate a device flow.\n\n**INVALID_REQUEST**\n\nWhen the value of `action`\
        \ is `INVALID_REQUEST`, it means that the API call is invalid. Probably,\n\
        the authorization server implementation has some bugs.\n\n**SUCCESS**\n\n\
        When the value of `action` is `SUCCESS`, it means that the API call has been\
        \ processed successfully.\nThe authorization server should return a successful\
        \ response to the web browser the end-user is\nusing.\n</details>\n"
      operationId: device_complete_api
      requestBody:
        content:
          application/json:
            example:
              userCode: XWWKPBWVXQ
              result: AUTHORIZED
              subject: john
            schema:
              $ref: '#/components/schemas/device_complete_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/device_complete_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A241001
                resultMessage: "[A241001] The API call was processed successfully."
                action: SUCCESS
              schema:
                $ref: '#/components/schemas/device_complete_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /device/complete, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /device/complete, Authorization header is\
                  \ missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /device/complete, The service (API Key =\
                  \ 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /device/complete, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/device/complete API
      tags:
      - Device Flow
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/device/complete \\\n\
          -H 'Content-Type: application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"userCode\": \"XWWKPBWVXQ\", \"result\": \"AUTHORIZED\", \"\
          subject\": \"john\" }'\n"
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          DeviceCompleteRequest req = new DeviceCompleteRequest();
          req.setUserCode("XWWKPBWVXQ");
          req.setResult(DeviceCompleteRequest.Result.AUTHORIZED);
          req.setSubject("john");

          api.deviceComplete(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          DeviceCompleteRequest req = new DeviceCompleteRequest();
          req.SetUserCode("XWWKPBWVXQ");
          req.SetResult(DeviceCompleteResult.AUTHORIZED);
          req.SetSubject("john");

          await api.DeviceComplete(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new DeviceCompleteRequest();
          $req.setUserCode("XWWKPBWVXQ");
          $req.setResult(DeviceCompleteResult.$AUTHORIZED);
          $req.setSubject("john");

          $api.deviceComplete($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::DeviceCompleteRequest.new
          req.use_code = 'XWWKPBWVXQ'
          req.result = 'AUTHORIZED'
          req.subject = 'john'

          api.deviceComplete(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = DeviceCompleteRequest()
          req.setUserCode('XWWKPBWVXQ')
          req.setResult(DeviceCompleteResult.AUTHORIZED)
          req.setSubject('john')

          api.deviceComplete(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.DeviceCompleteRequest{}\n\
          req.UserCode = \"XWWKPBWVXQ\"\nreq.Result = DeviceCompleteResult.AUTHORIZED\n\
          req.Subject = \"john\"\n\napi.DeviceComplete(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/auth/token/get/list:
    get:
      description: |
        Get a list of client applications that an end-user has authorized.
      operationId: auth_token_get_list_api
      parameters:
      - description: |
          Client Identifier (client ID or client ID alias).
        in: query
        name: clientIdentifier
        required: false
        schema:
          type: string
      - description: |
          Unique user ID.
        in: query
        name: subject
        required: true
        schema:
          type: string
      - description: Start index of search results (inclusive). The default value
          is 0.
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          End index of search results (exclusive). The default value is 5.
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                accessTokens:
                - accessTokenExpiresAt: 1642048149000
                  accessTokenHash: tC5hpjGylLiiw-vsd5_tqVHtYSUHblAGimEJ-5xqAco
                  clientId: 26888344961664
                  createdAt: 1642044549000
                  grantType: AUTHORIZATION_CODE
                  lastRefreshedAt: 0
                  refreshTokenExpiresAt: 1642048149000
                  refreshTokenHash: jv4B_7_kpY-Rez_E7bYIxGYnZk43w18uigkaeUe6tc4
                  scopes:
                  - history.read
                  subject: john
                - accessTokenExpiresAt: 1642051604000
                  accessTokenHash: Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg
                  clientId: 26888344961664
                  createdAt: 1642048004000
                  grantType: AUTHORIZATION_CODE
                  lastRefreshedAt: 0
                  refreshTokenExpiresAt: 1642051604000
                  refreshTokenHash: YHmwk4xETvoIJ_maWCpJDlpvmcFLkxmaaSS-v9KPng4
                  scopes:
                  - history.read
                  - openid
                  - timeline.read
                  subject: john
                - accessTokenExpiresAt: 1642052094000
                  accessTokenHash: UUatYXjkqYFbRQlnItjq03DtUYA2MRRtuL88GCbQpbw
                  clientId: 26888344961664
                  createdAt: 1642048494000
                  grantType: AUTHORIZATION_CODE
                  lastRefreshedAt: 0
                  refreshTokenExpiresAt: 1642052094000
                  refreshTokenHash: wjc-IXoScxDiVyBmRrB92I-B0zMXSSKw_qwP_WK1lFM
                  scopes:
                  - history.read
                  subject: john
                client:
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26888344961664
                  clientIdAliasEnabled: false
                  clientName: My Device Flow Client
                  clientSecret: SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog
                  clientType: CONFIDENTIAL
                  createdAt: 1641996927000
                  defaultMaxAge: 0
                  derivedSectorIdentifier: api.authlete.com
                  developer: authlete_21653835348762
                  dynamicallyRegistered: false
                  extension:
                    accessTokenDuration: 0
                    refreshTokenDuration: 0
                    requestableScopesEnabled: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantTypes:
                  - AUTHORIZATION_CODE
                  - IMPLICIT
                  - PASSWORD
                  - CLIENT_CREDENTIALS
                  - REFRESH_TOKEN
                  - CIBA
                  - DEVICE_CODE
                  idTokenSignAlg: HS256
                  modifiedAt: 1641996927000
                  number: 6260
                  parRequired: false
                  redirectUris:
                  - https://api.authlete.com/api/mock/redirection/21653835348762
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  responseTypes:
                  - NONE
                  - CODE
                  - TOKEN
                  - ID_TOKEN
                  - CODE_TOKEN
                  - CODE_ID_TOKEN
                  - ID_TOKEN_TOKEN
                  - CODE_ID_TOKEN_TOKEN
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                end: 3
                start: 0
                subject: john
                totalCount: 3
              schema:
                $ref: '#/components/schemas/token_get_list_response'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/token/get/list, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/token/get/list, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/token/get/list, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/token/get/list API
      tags:
      - Token Operations
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/auth/token/get/list/?clientIdentifier=26888344961664\&subject=john\&start=0\&end=3 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nString clientIdentifier = \"26888344961664\";\nString subject = \"john\"\
          ;\nint start = 0;\nint end = 3;\n\napi.getTokenList(clientIdentifier, subject,\
          \ start, end);\n"
      - lang: cs
        label: C#
        source: |
          // This API is not supported yet.
      - lang: php
        label: PHP
        source: |
          // This API is not supported yet.
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\napi.get_token_list(\n\
          \  client_identifier: '26888344961664',\n  subject: 'john',\n  start: 0,\n\
          \  end: 3\n)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientIdentifier = '26888344961664'\n\
          subject = 'john'\nstart = 0\nend = 3\n\napi.getTokenList(clientIdentifier,\
          \ subject, start, end)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nclientIdentifier = \"26888344961664\"\
          \nsubject = \"john\"\nstart = 0\nend = 3\n\napi.GetTokenList(clientIdentifier,\
          \ subject, start, end)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/auth/token/create:
    post:
      description: |
        Create an access token.
      operationId: auth_token_create_api
      requestBody:
        content:
          application/json:
            example:
              grantType: AUTHORIZATION_CODE
              clientId: 26888344961664
              subject: john
              scopes:
              - history.read
              - timeline.read
            schema:
              $ref: '#/components/schemas/token_create_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/token_create_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A109001
                resultMessage: "[A109001] An access token was created successfully:\
                  \ authorization_code, client = 26888344961664"
                accessToken: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
                action: OK
                clientId: 26888344961664
                expiresAt: 1642048148973
                expiresIn: 3600
                grantType: AUTHORIZATION_CODE
                refreshToken: 9beh15GWkGLseBBO1tPobnsGpKLHV3mTkm0EWnNBa4g
                scopes:
                - history.read
                - timeline.read
                subject: john
                tokenType: Bearer
              schema:
                $ref: '#/components/schemas/token_create_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/token/create, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/token/create, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/token/create, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/token/create, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/token/create API
      tags:
      - Token Operations
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/token/create \\\
          \n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"grantType\": \"AUTHORIZATION_CODE\", \"clientId\": 26888344961664,\
          \ \"subject\": \"john\", \"scopes\": [ \"history.read\", \"timeline.read\"\
          \ ] }'\n"
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nTokenCreateRequest req = new TokenCreateRequest();\nreq.setGrantType(GrantType.AUTHORIZATION_CODE)\n\
          req.setClientId(26888344961664)\nreq.setSubject(\"john\")\nreq.setScopes({\
          \ \"history.read\", \"timeline.read\" });\n\napi.tokenCreate(req);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nTokenCreateRequest req = new TokenCreateRequest();\nreq.GrantType = GrantType.AUTHORIZATION_CODE;\n\
          req.ClientId = 26888344961664;\nreq.Subject = \"john\";\nreq.Scopes = {\
          \ \"history.read\", \"timeline.read\" };\n\nawait api.TokenCreate(request);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$req = new TokenCreateRequest();\n\
          $req.setGrantType(GrantType.$AUTHORIZATION_CODE);\n$req.setClientId(26888344961664);\n\
          $req.setSubject(\"john\");\n$req.setScopes([ \"history.read\", \"timeline.read\"\
          \ ]);\n\n$api.tokenCreate($req);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nreq = Authlete::Model::Request::TokenCreateRequest.new\n\
          req.grant_type = 'AUTHORIZATION_CODE'\nreq.client_id = 26888344961664\n\
          req.subject = 'john'\nreq.scopes = [ 'history.read', 'timeline.read' ]\n\
          \napi.token_create(req)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenCreateRequest()\n\
          req.grantType = GrantType.AUTHORIZATION_CODE\nreq.clientId = 26888344961664\n\
          req.subject = 'john'\nreq.scopes = [ 'history.read', 'timeline.read' ]\n\
          \napi.tokenCreate(req)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.TokenCreateRequest{}\n\
          req.GrantType = types.GrantType_AUTHORIZATION_CODE;\nreq.ClientId = 26888344961664;\n\
          req.Subject = \"john\";\nreq.Scopes = [2]string{\"history.read\", \"timeline.read\"\
          };\n\napi.TokenCreate(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/auth/token/update:
    post:
      description: |
        Update an access token.
      operationId: auth_token_update_api
      requestBody:
        content:
          application/json:
            example:
              accessToken: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
              scopes:
              - history.read
            schema:
              $ref: '#/components/schemas/token_update_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/token_update_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A135001
                resultMessage: "[A135001] Updated the access token successfully."
                accessToken: Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q
                accessTokenExpiresAt: 1642048149000
                action: OK
                scopes:
                - history.read
                tokenType: Bearer
              schema:
                $ref: '#/components/schemas/token_update_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/token/update, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/token/update, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/token/update, The service (API Key\
                  \ = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/token/update, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/auth/token/update API
      tags:
      - Token Operations
      x-code-samples:
      - lang: shell
        label: curl
        source: "curl -v -X POST https://api.authlete.com/api/auth/token/update \\\
          \n-H 'Content-Type:application/json' \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\
          \ \\\n-d '{ \"accessToken\": \"Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q\"\
          , \"scopes\": [ \"history.read\" ] }'\n"
      - lang: java
        label: java
        source: "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\
          \nTokenUpdateRequest req = new TokenUpdateRequest();\nreq.setAccessToken(\"\
          JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs\");\nreq.setScopes({ \"history.read\"\
          \ });\n\napi.tokenUpdate(req);\n"
      - lang: cs
        label: C#
        source: "IAuthleteConfiguration conf = ...;\nIAuthleteApi api = new AuthleteApi(conf);\n\
          \nTokenUpdateRequest req = new TokenUpdateRequest();\nreq.AccessToken =\
          \ \"JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs\";\nreq.Scopes = { \"history.read\"\
          \ };\n\nawait api.TokenUpdate(request);\n"
      - lang: php
        label: PHP
        source: "$conf = ...;\n$api = new AuthleteApiImpl($conf);\n\n$req = new TokenUpdateRequest();\n\
          $req.setAccessToken(\"JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs\");\n\
          $req.setScopes([ \"history.read\" ]);\n\n$api.tokenUpdate($req);\n"
      - lang: ruby
        source: "conf = ...\napi = Authlete::Api.new(conf)\n\nreq = Authlete::Model::Request::TokenUpdateRequest.new\n\
          req.access_token = 'JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs'\nreq.scopes\
          \ = [ 'history.read' ]\n\napi.token_update(req)\n"
      - lang: python
        source: "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenUpdateRequest()\n\
          req.accessToken = 'JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs'\nreq.scopes\
          \ = [ 'history.read' ]\n\napi.tokenUpdate(req)\n"
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.TokenUpdateRequest{}\n\
          req.AccessToken = \"JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs\"\nreq.Scopes\
          \ = [1]string{ \"history.read\" }\n\napi.TokenUpdate(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/auth/token/delete/{accessTokenIdentifier}:
    delete:
      description: |
        Delete an access token.
      operationId: auth_token_delete_api
      parameters:
      - description: |
          The identifier of an existing access token. The identifier is the value of the access token
          or the value of the hash of the access token.
        in: path
        name: tokenIdentifier
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The access token was successfully deleted.
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/token/delete/{tokenIdentifier}, TLS\
                  \ must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/token/delete/{tokenIdentifier}, Authorization\
                  \ header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/token/delete/{tokenIdentifier}, The\
                  \ service (API Key = 21653835348762) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/token/delete/{tokenIdentifier}, Authlete\
                  \ Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/auth/token/delete/{tokenIdentifier} API"
      tags:
      - Token Operations
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X DELETE https://api.authlete.com/api/auth/token/delete/Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg \
          -H 'Content-Type:application/json' \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          String tokenIdentifier = "Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg";

          api.tokenDelete(tokenIdentifier);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          string tokenIdentifier = "Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg";

          await api.TokenDelete(tokenIdentifier);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $tokenIdentifier = "Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg";

          $api.tokenDelete($tokenIdentifier);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          token_identifier = 'Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg'

          api.token_delete(token_identifier)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          tokenIdentifier = 'Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg'

          api.tokenDelete(tokenIdentifier)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          tokenIdentifier := "Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg"

          api.TokenDelete(tokenIdentifier)
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/jose/verify:
    post:
      description: |
        This API verifies a JOSE object.
      operationId: jose_verify_api
      requestBody:
        content:
          application/json:
            example:
              jose: eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA
              clockSkew: 100
              signedByClient: true
              clientIdentifier: "57297408867"
            schema:
              $ref: '#/components/schemas/jose_verify_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/jose_verify_request'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A160001
                resultMessage: "[A160001] The JOSE is valid."
                signatureValid: true
                valid: true
              schema:
                $ref: '#/components/schemas/jose_verify_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /jose/verify, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /jose/verify, Authorization header is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /jose/verify, The service owner (API Key\
                  \ = 9503564192) is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /jose/verify, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: /api/jose/verify API
      tags:
      - Jose Object
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/jose/verify \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
          -d jose=eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA \
          -d clockSkew=100 \
          -d signedByClient=true \
          -d clientIdentifier=57297408867
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          JoseVerifyRequest req = new JoseVerifyRequest();
          req.setJose("eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw");
          req.setClockSkew(100);
          req.setSinedByClient(true);
          req.setClientIdentifier("57297408867");

          api.verifyJose(request);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          JoseVerifyRequest req = new JoseVerifyRequest();
          req.Jose = "eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw";
          req.ClockSkew = 100;
          req.SinedByClient = true;
          req.ClientIdentifier = "57297408867";

          await api.VerifyJose(req);
      - lang: php
        label: PHP
        source: |
          // This API is not supported yet.
      - lang: ruby
        source: |
          # This API is not supported yet.
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = JoseVerifyRequest()
          req.jose = 'eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw'
          req.clockSkew = 100
          req.sinedByClient = True
          req.clientIdentifier = '57297408867'

          api.verifyJose(req)
      - lang: go
        source: "conf := ...\napi := api.New(&conf)\n\nreq := dto.JoseVerifyRequest{}\n\
          req.Jose = \"eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw\"\
          \nreq.ClockSkew = 100\nreq.SinedByClient = true\nreq.ClientIdentifier =\
          \ \"57297408867\"\n\napi.VerifyJose(&req)\n"
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
components:
  schemas:
    AccessToken:
      example:
        createdAt: 2
        lastRefreshedAt: 7
        refreshTokenExpiresAt: 5
        clientId: 9
        accessTokenExpiresAt: 5
        subject: subject
        scopes:
        - scopes
        - scopes
        accessTokenHash: accessTokenHash
        refreshTokenHash: refreshTokenHash
        grantType: null
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
      properties:
        accessTokenHash:
          description: The hash of the access token.
          type: string
        accessTokenExpiresAt:
          description: The timestamp at which the access token will expire.
          format: int64
          type: integer
        refreshTokenHash:
          description: The hash of the refresh token.
          type: string
        refreshTokenExpiresAt:
          description: The timestamp at which the refresh token will expire.
          format: int64
          type: integer
        createdAt:
          description: |
            The timestamp at which the access token was first created.
          format: int64
          type: integer
        lastRefreshedAt:
          description: |
            The timestamp at which the access token was last refreshed using the refresh token.
          format: int64
          type: integer
        clientId:
          description: |
            The ID of the client associated with the access token.
          format: int64
          type: integer
        subject:
          description: |
            The subject (= unique user ID) associated with the access token.
          type: string
        grantType:
          $ref: '#/components/schemas/grant_type'
        scopes:
          description: |
            The scopes associated with the access token.
          items:
            type: string
          type: array
        properties:
          description: |
            The properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
      type: object
    ApplicationType:
      description: |
        The application type. The value of this property affects the validation steps for a redirect URI.
        See the description about `redirectUris` property for more details.
      enum:
      - WEB
      - NATIVE
      - null
      nullable: true
      type: string
    AuthorizationDetails:
      description: |
        The authorization details. This represents the value of the `authorization_details`
        request parameter in the preceding device authorization request which is defined in
        "OAuth 2.0 Rich Authorization Requests".
      example:
        elements:
        - dataTypes:
          - dataTypes
          - dataTypes
          identifier: identifier
          privileges:
          - privileges
          - privileges
          locations:
          - locations
          - locations
          type: type
          otherFields: otherFields
          actions:
          - actions
          - actions
        - dataTypes:
          - dataTypes
          - dataTypes
          identifier: identifier
          privileges:
          - privileges
          - privileges
          locations:
          - locations
          - locations
          type: type
          otherFields: otherFields
          actions:
          - actions
          - actions
      properties:
        elements:
          description: |
            Elements of this authorization details.
          items:
            $ref: '#/components/schemas/authorization_details_element'
          type: array
      type: object
    AuthorizationDetailsElement:
      example:
        dataTypes:
        - dataTypes
        - dataTypes
        identifier: identifier
        privileges:
        - privileges
        - privileges
        locations:
        - locations
        - locations
        type: type
        otherFields: otherFields
        actions:
        - actions
        - actions
      properties:
        type:
          description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization\
            \ Requests\"_: _\"The type of authorization data as a string.\nThis field\
            \ MAY define which other elements are allowed in the request. This element\
            \ is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
          type: string
        locations:
          description: "The resources and/or resource servers. This property may be\
            \ `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array\
            \ of strings representing the location of\nthe resource or resource server.\
            \ This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
          items:
            type: string
          type: array
        actions:
          description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"\
            _: _\"An array of strings representing the kinds of actions\nto be taken\
            \ at the resource. The values of the strings are determined by the API\
            \ being protected.\"_\n\nThis property may be `null`.\n"
          items:
            type: string
          type: array
        dataTypes:
          description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array\
            \ of strings representing the kinds of data being requested\nfrom the\
            \ resource.\"_\n\nThis property may be `null`.\n"
          items:
            type: string
          type: array
        identifier:
          description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0\
            \ Rich Authorization Requests\"_: _\"A string identifier indicating a\
            \ specific resource available at the API.\"_\n\nThis property may be `null`.\n"
          type: string
        privileges:
          description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization\
            \ Requests\": _\"An array of strings representing the types or\nlevels\
            \ of privilege being requested at the resource.\"_\n\nThis property may\
            \ be `null`.\n"
          items:
            type: string
          type: array
        otherFields:
          description: |
            The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
            The content and semantics are specific to the deployment and the use case implemented.
          type: string
      required:
      - type
      type: object
    ClaimType:
      enum:
      - NORMAL
      - AGGREGATED
      - DISTRIBUTED
      type: string
    ClientAuthenticationMethod:
      description: "The client authentication method that the client application declares\
        \ that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method`\
        \ in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
      enum:
      - NONE
      - CLIENT_SECRET_BASIC
      - CLIENT_SECRET_POST
      - CLIENT_SECRET_JWT
      - PRIVATE_KEY_JWT
      - TLS_CLIENT_AUTH
      - SELF_SIGNED_TLS_CLIENT_AUTH
      type: string
    ClientExtension:
      example:
        refreshTokenDuration: 9
        requestableScopes:
        - requestableScopes
        - requestableScopes
        requestableScopesEnabled: true
        accessTokenDuration: 7
      properties:
        requestableScopes:
          description: "The set of scopes that the client application is allowed to\
            \ request. This paramter will be one\nof the following.\n\n  - `null`\n\
            \  - an empty set\n  - a set with at least one element\n\nWhen the value\
            \ of this parameter is `null`, it means that the set of scopes that the\
            \ client\napplication is allowed to request is the set of the scopes that\
            \ the service supports. When the\nvalue of this parameter is an empty\
            \ set, it means that the client application is not allowed to\nrequest\
            \ any scopes. When the value of this parameter is a set with at least\
            \ one element, it means\nthat the set is the set of scopes that the client\
            \ application is allowed to request.\n"
          items:
            type: string
          type: array
        requestableScopesEnabled:
          description: "The flag to indicate whether \"Requestable Scopes per Client\"\
            \ is enabled or not. If `true`, you\ncan define the set of scopes which\
            \ this client application can request. If `false`, this client\napplication\
            \ can request any scope which is supported by the authorization server.\n"
          type: boolean
        accessTokenDuration:
          description: "The value of the duration of access tokens per client in seconds.\
            \ In normal cases, the value of\nthe service's `accessTokenDuration` property\
            \ is used as the duration of access tokens issued by\nthe service. However,\
            \ if this `accessTokenDuration` property holds a non-zero positive number\n\
            and its value is less than the duration configured by the service, the\
            \ value is used as the duration\nof access tokens issued to the client\
            \ application.\n\nNote that the duration of access tokens can be controlled\
            \ by the scope attribute `access_token.duration`,\ntoo. Authlete chooses\
            \ the minimum value among the candidates.\n"
          format: int64
          type: integer
        refreshTokenDuration:
          description: "The value of the duration of refresh tokens per client in\
            \ seconds. In normal cases, the value\nof the service's `refreshTokenDuration`\
            \ property is used as the duration of refresh tokens issued\nby the service.\
            \ However, if this `refreshTokenDuration` property holds a non-zero positive\
            \ number\nand its value is less than the duration configured by the service,\
            \ the value is used as the duration\nof refresh tokens issued to the client\
            \ application.\n\nNote that the duration of refresh tokens can be controlled\
            \ by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses\
            \ the minimum value among the candidates."
          format: int64
          type: integer
      type: object
    Client:
      example:
        serviceNumber: 6
        applicationType: null
        bcNotificationEndpoint: bcNotificationEndpoint
        tlsClientAuthSanEmail: tlsClientAuthSanEmail
        modifiedAt: 5
        logoUris:
        - tag: tag
          value: value
        - tag: tag
          value: value
        descriptions:
        - tag: tag
          value: value
        - tag: tag
          value: value
        subjectType: null
        clientNames:
        - tag: tag
          value: value
        - tag: tag
          value: value
        number: 0
        createdAt: 5
        clientType: null
        tlsClientCertificateBoundAccessTokens: true
        bcDeliveryMode: bcDeliveryMode
        idTokenEncryptionEnc: null
        clientSecret: clientSecret
        selfSignedCertificateKeyId: selfSignedCertificateKeyId
        idTokenSignAlg: null
        clientUri: clientUri
        tlsClientAuthSanDns: tlsClientAuthSanDns
        tlsClientAuthSanIp: tlsClientAuthSanIp
        policyUris:
        - tag: tag
          value: value
        - tag: tag
          value: value
        parRequired: true
        derivedSectorIdentifier: derivedSectorIdentifier
        logoUri: logoUri
        requestObjectEncryptionEncMatchRequired: true
        redirectUris:
        - redirectUris
        - redirectUris
        requestEncryptionAlg: null
        defaultAcrs:
        - defaultAcrs
        - defaultAcrs
        requestObjectEncryptionAlgMatchRequired: true
        grantTypes:
        - null
        - null
        authorizationEncryptionEnc: null
        tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
        tosUri: tosUri
        requestUris:
        - requestUris
        - requestUris
        softwareVersion: softwareVersion
        authorizationSignAlg: null
        registrationAccessTokenHash: registrationAccessTokenHash
        extension:
          refreshTokenDuration: 9
          requestableScopes:
          - requestableScopes
          - requestableScopes
          requestableScopesEnabled: true
          accessTokenDuration: 7
        jwks: jwks
        clientUris:
        - tag: tag
          value: value
        - tag: tag
          value: value
        clientName: clientName
        requestSignAlg: null
        tosUris:
        - tag: tag
          value: value
        - tag: tag
          value: value
        description: description
        jwksUri: jwksUri
        authorizationDetailsTypes:
        - authorizationDetailsTypes
        - authorizationDetailsTypes
        userInfoEncryptionEnc: null
        clientIdAlias: clientIdAlias
        authorizationEncryptionAlg: null
        loginUri: loginUri
        userInfoSignAlg: null
        policyUri: policyUri
        customMetadata: customMetadata
        tokenAuthSignAlg: null
        authTimeRequired: true
        idTokenEncryptionAlg: null
        clientIdAliasEnabled: true
        bcUserCodeRequired: true
        tokenAuthMethod: null
        defaultMaxAge: 2
        responseTypes:
        - null
        - null
        sectorIdentifierUri: sectorIdentifierUri
        clientId: 1
        dynamicallyRegistered: true
        requestObjectRequired: true
        requestEncryptionEnc: null
        tlsClientAuthSanUri: tlsClientAuthSanUri
        frontChannelRequestObjectEncryptionRequired: true
        softwareId: softwareId
        userInfoEncryptionAlg: null
        developer: developer
        attributes:
        - value: value
          key: key
        - value: value
          key: key
        bcRequestSignAlg: null
        contacts:
        - contacts
        - contacts
      properties:
        number:
          description: |
            The sequential number of the client. The value of this property is assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        serviceNumber:
          description: |
            The sequential number of the service of the client application. The value of this property is
            assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        developer:
          description: |
            The developer of the client application.
          type: string
        clientName:
          description: "The name of the client application. This property corresponds\
            \ to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0,\
            \ 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        clientNames:
          description: "Client names with language tags. If the client application\
            \ has different names for different\nlanguages, this property can be used\
            \ to register the names.\n"
          items:
            $ref: '#/components/schemas/tagged_value'
          type: array
        description:
          description: The description about the client application.
          type: string
        descriptions:
          description: "Descriptions about the client application with language tags.\
            \ If the client application has different\ndescriptions for different\
            \ languages, this property can be used to register the descriptions.\n"
          items:
            $ref: '#/components/schemas/tagged_value'
          type: array
        clientId:
          description: The client ID. The value of this property is assigned by Authlete.
          format: int64
          readOnly: true
          type: integer
        clientSecret:
          description: "The client secret. A random 512-bit value encoded by base64url\
            \ (86 letters). The value of this\nproperty is assigned by Authlete.\n\
            \nNote that Authlete issues a client secret even to a \"public\" client\
            \ application, but the client\napplication should not use the client secret\
            \ unless it changes its client type to \"confidential\".\nThat is, a public\
            \ client application should behave as if it had not been issued a client\
            \ secret.\nTo be specific, a token request from a public client of Authlete\
            \ should not come along with a\nclient secret although [RFC 6749, 3.2.1.\
            \ Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\n\
            says as follows.\n\n> Confidential clients or other clients issued client\
            \ credentials MUST authenticate with the\nauthorization server as described\
            \ in Section 2.3 when making requests to the token endpoint.\n"
          readOnly: true
          type: string
        clientIdAlias:
          description: |
            The alias of the client ID.

            Note that the client ID alias is recognized only when this client's `clientIdAliasEnabled` property
            is set to `true` AND the service's `clientIdAliasEnabled` property is also set to `true`.
          type: string
        clientIdAliasEnabled:
          description: "The flag to indicate whether the client ID alias is enabled\
            \ or not.\n\nNote that a service also has `clientIdAliasEnabled` property.\
            \ If the service's `clientIdAliasEnabled`\nproperty is set to `false`,\
            \ the client ID alias of this client is not recognized even if this\n\
            client's `clientIdAliasEnabled` property is set to `true`.\n"
          type: boolean
        clientType:
          $ref: '#/components/schemas/client_type'
        applicationType:
          $ref: '#/components/schemas/application_type'
        logoUri:
          description: "The URL pointing to the logo image of the client application.\n\
            \nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client\
            \ Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        logoUris:
          description: "Logo image URLs with language tags. If the client application\
            \ has different logo images for\ndifferent languages, this property can\
            \ be used to register URLs of the images.\n"
          items:
            $ref: '#/components/schemas/tagged_value'
          type: array
        contacts:
          description: "An array of email addresses of people responsible for the\
            \ client application.\n\nThis property corresponds to contacts in [OpenID\
            \ Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          items:
            type: string
          type: array
        tlsClientCertificateBoundAccessTokens:
          description: |
            The flag to indicate whether this client use TLS client certificate bound access tokens.
          type: boolean
        dynamicallyRegistered:
          description: "The flag to indicate whether this client has been registered\
            \ dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
          readOnly: true
          type: boolean
        softwareId:
          description: "The unique identifier string assigned by the client developer\
            \ or software publisher used by\nregistration endpoints to identify the\
            \ client software to be dynamically registered.\n\nThis property corresponds\
            \ to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\n\
            of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
          type: string
        softwareVersion:
          description: "The version identifier string for the client software identified\
            \ by the software ID.\n\nThis property corresponds to the software_version\
            \ metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\n\
            of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
          type: string
        registrationAccessTokenHash:
          description: |
            The hash of the registration access token for this client.
          type: string
        createdAt:
          description: The time at which this client was created. The value is represented
            as milliseconds since the UNIX epoch (1970-01-01).
          format: int64
          readOnly: true
          type: integer
        modifiedAt:
          description: The time at which this client was last modified. The value
            is represented as milliseconds since the UNIX epoch (1970-01-01).
          format: int64
          readOnly: true
          type: integer
        grantTypes:
          description: "A string array of grant types which the client application\
            \ declares that it will restrict itself to using.\nThis property corresponds\
            \ to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n\
            2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          items:
            $ref: '#/components/schemas/grant_type'
          type: array
        responseTypes:
          description: "A string array of response types which the client application\
            \ declares that it will restrict itself to using.\nThis property corresponds\
            \ to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n\
            2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          items:
            $ref: '#/components/schemas/response_type'
          type: array
        redirectUris:
          description: "Redirect URIs that the client application uses to receive\
            \ a response from the authorization endpoint.\nRequirements for a redirect\
            \ URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749,\
            \ 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\
            \n- Must be an absolute URI.\n- Must not have a fragment component.\n\n\
            **Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client\
            \ Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\n\
            application_type\")\n\n- The scheme of the redirect URI used for Implicit\
            \ Grant by a client application whose application\nis `web` must be `https`.\
            \ This is checked at runtime by Authlete.\n- The hostname of the redirect\
            \ URI used for Implicit Grant by a client application whose application\n\
            type is `web` must not be `localhost`. This is checked at runtime by Authlete.\n\
            - The scheme of the redirect URI used by a client application whose application\
            \ type is `native`\nmust be either (1) a custom scheme or (2) `http`,\
            \ which is allowed only when the hostname part\nis `localhost`. This is\
            \ checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n\
            - Must consist of printable ASCII letters only.\n- Must not exceed 200\
            \ letters.\n\nNote that Authlete allows the application type to be `null`.\
            \ In other words, a client application\ndoes not have to choose `web`\
            \ or `native` as its application type.\nIf the application type is `null`,\
            \ the requirements by OpenID Connect are not checked at runtime.\n\nAn\
            \ authorization request from a client application which has not registered\
            \ any redirect URI\nfails unless at least all the following conditions\
            \ are satisfied.\n\n- The client type of the client application is `confidential`.\n\
            - The value of `response_type` request parameter is `code`.\n- The authorization\
            \ request has the `redirect_uri` request parameter.\n- The value of `scope`\
            \ request parameter does not contain `openid`.\n\nRFC 6749 allows partial\
            \ match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\n\
            Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2)\
            \ for\ndetails), but OpenID Connect requires exact match.\n"
          items:
            type: string
          type: array
        authorizationSignAlg:
          $ref: '#/components/schemas/jws_alg'
        authorizationEncryptionAlg:
          $ref: '#/components/schemas/jwe_alg'
        authorizationEncryptionEnc:
          $ref: '#/components/schemas/jwe_enc'
        tokenAuthMethod:
          $ref: '#/components/schemas/client_authentication_method'
        tokenAuthSignAlg:
          $ref: '#/components/schemas/jws_alg'
        selfSignedCertificateKeyId:
          description: |
            The key ID of a JWK containing a self-signed certificate of this client.
          type: string
        tlsClientAuthSubjectDn:
          description: "The string representation of the expected subject distinguished\
            \ name of the certificate this\nclient will use in mutual TLS authentication.\n\
            \nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth\
            \ Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
          type: string
        tlsClientAuthSanDns:
          description: "The string representation of the expected DNS subject alternative\
            \ name of the certificate this\nclient will use in mutual TLS authentication.\n\
            \nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients,\
            \ 2.3. Dynamic Client\nRegistration\" for details.\n"
          type: string
        tlsClientAuthSanUri:
          description: "The string representation of the expected URI subject alternative\
            \ name of the certificate this\nclient will use in mutual TLS authentication.\n\
            \nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients,\
            \ 2.3. Dynamic Client\nRegistration\" for details.\n"
          type: string
        tlsClientAuthSanIp:
          description: "The string representation of the expected IP address subject\
            \ alternative name of the certificate\nthis client will use in mutual\
            \ TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS\
            \ Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for\
            \ details.\n"
          type: string
        tlsClientAuthSanEmail:
          description: "The string representation of the expected email address subject\
            \ alternative name of the certificate\nthis client will use in mutual\
            \ TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS\
            \ Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for\
            \ details.\n"
          type: string
        parRequired:
          description: |
            The flag to indicate whether this client is required to use the pushed authorization request endpoint.
            This property corresponds to the `require_pushed_authorization_requests` client metadata defined
            in "OAuth 2.0 Pushed Authorization Requests".
          type: boolean
        requestObjectRequired:
          description: "The flag to indicate whether authorization requests from this\
            \ client are always required to\nutilize a request object by using either\
            \ `request` or `request_uri` request parameter.\n\nIf this flag is set\
            \ to `true` and the service's `traditionalRequestObjectProcessingApplied`\
            \ is\nset to `false`, authorization requests from this client are processed\
            \ as if `require_signed_request_object`\nclient metadata of this client\
            \ is `true`. The metadata is defined in \"JAR (JWT Secured Authorization\
            \ Request)\".\n"
          type: boolean
        requestSignAlg:
          $ref: '#/components/schemas/jws_alg'
        requestEncryptionAlg:
          $ref: '#/components/schemas/jwe_alg'
        requestEncryptionEnc:
          $ref: '#/components/schemas/jwe_enc'
        requestUris:
          description: "An array of URLs each of which points to a request object.\n\
            \nAuthlete requires that URLs used as values for `request_uri` request\
            \ parameter be pre-registered.\nThis property is used for the pre-registration.\n\
            See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter)\
            \ for details.\n"
          items:
            type: string
          type: array
        defaultMaxAge:
          description: "The default maximum authentication age in seconds. This value\
            \ is used when an authorization request from the client application does\
            \ not have `max_age` request parameter.\n\nThis property corresponds to\
            \ `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0,\
            \ 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          format: int32
          type: integer
        defaultAcrs:
          description: |
            The default ACRs (Authentication Context Class References). This value is used when an authorization
            request from the client application has neither `acr_values` request parameter nor `acr` claim
            in claims request parameter.
          items:
            type: string
          type: array
        idTokenSignAlg:
          $ref: '#/components/schemas/jws_alg'
        idTokenEncryptionAlg:
          $ref: '#/components/schemas/jwe_alg'
        idTokenEncryptionEnc:
          $ref: '#/components/schemas/jwe_enc'
        authTimeRequired:
          description: "The flag to indicate whether this client requires `auth_time`\
            \ claim to be embedded in the ID token.\n\nThis property corresponds to\
            \ `require_auth_time` in\n[OpenID Connect Dynamic Client Registration\
            \ 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: boolean
        subjectType:
          $ref: '#/components/schemas/subject_type'
        sectorIdentifierUri:
          description: "The value of the sector identifier URI.\nThis represents the\
            \ `sector_identifier_uri` client metadata which is defined in\n[OpenID\
            \ Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
          type: string
        derivedSectorIdentifier:
          description: "The sector identifier host component as derived from either\
            \ the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri`\
            \ is registered and multiple redirect URIs\nare also registered, the value\
            \ of this property is `null`.\n"
          readOnly: true
          type: string
        jwksUri:
          description: "The URL pointing to the JWK Set of the client application.\n\
            The content pointed to by the URL is JSON which complies with the format\
            \ described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\n\
            The JWK Set must not include private keys of the client application.\n\
            \nIf the client application requests encryption for ID tokens (from the\
            \ authorization/token/userinfo endpoints)\nand/or signs request objects,\
            \ it must make available its JWK Set containing public keys for the\n\
            encryption and/or the signature at the URL of `jwksUri`. The service (Authlete)\
            \ fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic\
            \ Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n\
            says that `jwks` must not be used when the client can use `jwks_uri`,\
            \ but Authlete allows both\nproperties to be registered at the same time.\
            \ However, Authlete does not use the content of `jwks`\nwhen `jwksUri`\
            \ is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID\
            \ Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        jwks:
          description: "The content of the JWK Set of the client application.\nThe\
            \ format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\n\
            The JWK Set must not include private keys of the client application.\n\
            \n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n\
            says that `jwks` must not be used when the client can use `jwks_uri`,\
            \ but Authlete allows both\nproperties to be registered at the same time.\
            \ However, Authlete does not use the content of `jwks`\nwhen `jwksUri`\
            \ is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID\
            \ Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        userInfoSignAlg:
          $ref: '#/components/schemas/jws_alg'
        userInfoEncryptionAlg:
          $ref: '#/components/schemas/jwe_alg'
        userInfoEncryptionEnc:
          $ref: '#/components/schemas/jwe_enc'
        loginUri:
          description: "The URL which a third party can use to initiate a login by\
            \ the client application.\n\nThis property corresponds to `initiate_login_uri`\
            \ in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        tosUri:
          description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis\
            \ property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client\
            \ Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        tosUris:
          description: "URLs of \"Terms Of Service\" pages with language tags.\n\n\
            If the client application has different \"Terms Of Service\" pages for\
            \ different languages,\nthis property can be used to register the URLs.\n"
          items:
            $ref: '#/components/schemas/tagged_value'
          type: array
        policyUri:
          description: "The URL pointing to the page which describes the policy as\
            \ to how end-user's profile data is used.\n\nThis property corresponds\
            \ to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0,\
            \ 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        policyUris:
          description: "URLs of policy pages with language tags.\nIf the client application\
            \ has different policy pages for different languages, this property can\
            \ be used to register the URLs.\n"
          items:
            $ref: '#/components/schemas/tagged_value'
          type: array
        clientUri:
          description: "The URL pointing to the home page of the client application.\n\
            \nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic\
            \ Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
          type: string
        clientUris:
          description: "Home page URLs with language tags.\nIf the client application\
            \ has different home pages for different languages, this property can\n\
            be used to register the URLs.\n"
          items:
            $ref: '#/components/schemas/tagged_value'
          type: array
        bcDeliveryMode:
          description: |
            The backchannel token delivery mode.

            This property corresponds to the `backchannel_token_delivery_mode` metadata.
            The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
            Backchannel Authentication)".
          type: string
        bcNotificationEndpoint:
          description: |
            The backchannel client notification endpoint.

            This property corresponds to the `backchannel_client_notification_endpoint` metadata.
            The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
            Backchannel Authentication)".
          type: string
        bcRequestSignAlg:
          $ref: '#/components/schemas/jws_alg'
        bcUserCodeRequired:
          description: |
            The boolean flag to indicate whether a user code is required when this client makes a backchannel
            authentication request.

            This property corresponds to the `backchannel_user_code_parameter` metadata.
          type: boolean
        attributes:
          description: |
            The attributes of this client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        extension:
          $ref: '#/components/schemas/client_extension'
        authorizationDetailsTypes:
          description: "The authorization details types that this client may use as\
            \ values of the `type` field in\n`authorization_details`.\n\nThis property\
            \ corresponds to the `authorization_details_types` metadata. See [OAuth\
            \ 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\
            \ for details.\n\nNote that the property name was renamed from authorizationDataTypes\
            \ to authorizationDetailsTypes\nto align with the change made by the 5th\
            \ draft of the RAR specification.\n"
          items:
            type: string
          type: array
        customMetadata:
          description: "The custom client metadata in JSON format.\n\nStandard specifications\
            \ define client metadata as necessary. The following are such examples.\n\
            \n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n\
            * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n\
            * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound\
            \ Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID\
            \ Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n\
            * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request\
            \ (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n\
            * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth\
            \ 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n\
            * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n\
            * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\
            \nStandard client metadata included in Client Registration Request and\
            \ Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html),\
            \ [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html))\
            \ are, if supported by Authlete, set\nto corresponding properties of the\
            \ client application. For example, the value of the `client_name`\nclient\
            \ metadata in Client Registration/Update Request is set to the clientName\
            \ property. On the\nother hand, unrecognized client metadata are discarded.\n\
            \nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata`\
            \ property\nof Service, Authlete can recognize them and stores their values\
            \ into the database. The stored\ncustom client metadata values can be\
            \ referenced by this property.\n"
          type: string
        frontChannelRequestObjectEncryptionRequired:
          description: "The flag indicating whether encryption of request object is\
            \ required when the request object\nis passed through the front channel.\n\
            \nThis flag does not affect the processing of request objects at the Pushed\
            \ Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed\
            \ Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\n\
            Unecrypted request objects are accepted at the endpoint even if this flag\
            \ is `true`.\n\nThis flag does not indicate whether a request object is\
            \ always required. There is a different\nflag, `requestObjectRequired`,\
            \ for the purpose.\n\nEven if this flag is `false`, encryption of request\
            \ object is required if the `frontChannelRequestObjectEncryptionRequired`\n\
            flag of the service is `true`.\n"
          type: boolean
        requestObjectEncryptionAlgMatchRequired:
          description: "The flag indicating whether the JWE alg of encrypted request\
            \ object must match the `request_object_encryption_alg`\nclient metadata.\n\
            \nThe `request_object_encryption_alg` client metadata itself is defined\
            \ in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\
            \ as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE]\
            \ alg algorithm [JWA] the RP is declaring that it may use for encrypting\
            \ Request\n  Objects sent to the OP. This parameter SHOULD be included\
            \ when symmetric encryption will be used,\n  since this signals to the\
            \ OP that a client_secret value needs to be returned from which the\n\
            \  symmetric key will be derived, that might not otherwise be returned.\
            \ The RP MAY still use other\n  supported encryption algorithms or send\
            \ unencrypted Request Objects, even when this parameter\n  is present.\
            \ If both signing and encryption are requested, the Request Object will\
            \ be signed\n  then encrypted, with the result being a Nested JWT, as\
            \ defined in [JWT]. The default, if omitted,\n  is that the RP is not\
            \ declaring whether it might encrypt any Request Objects.\n\nThe point\
            \ here is \"The RP MAY still use other supported encryption algorithms\
            \ or send unencrypted\nRequest Objects, even when this parameter is present.\"\
            \n\nThe property that represents the client metadata is `requestEncryptionAlg`.\
            \ See the description\nof `requestEncryptionAlg` for details.\n\nEven\
            \ if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\n\
            flag of the service is `true`.\n"
          type: boolean
        requestObjectEncryptionEncMatchRequired:
          description: "The flag indicating whether the JWE enc of encrypted request\
            \ object must match the `request_object_encryption_enc`\nclient metadata.\n\
            \nThe `request_object_encryption_enc` client metadata itself is defined\
            \ in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\
            \ as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc\
            \ algorithm [JWA] the RP is declaring that it may use for encrypting Request\n\
            \  Objects sent to the OP. If request_object_encryption_alg is specified,\
            \ the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc\
            \ is included, request_object_encryption_alg\n  MUST also be provided.\n\
            \nThe property that represents the client metadata is `requestEncryptionEnc`.\
            \ See the description\nof `requestEncryptionEnc`  for details.\n\nEven\
            \ if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\n\
            flag of the service is `true`.\n"
          type: boolean
      type: object
    DeliveryMode:
      description: "Backchannel token delivery mode defined in the specification of\
        \ [CIBA (Client Initiated Backchannel\nAuthentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
      enum:
      - PING
      - POLL
      - PUSH
      type: string
    Display:
      description: "The display mode which the client application requests by `display`\
        \ request parameter.\nWhen the authorization request does not have `display`\
        \ request parameter, `PAGE` is set as the default value.\n\nIt is ensured\
        \ that the value of `display` is one of the supported display modes which\
        \ are specified\nby `supportedDisplays` configuration parameter of the service.\
        \ If the display mode specified by the\nauthorization request is not supported,\
        \ an error is raised.\n\nValues for this property correspond to the values\
        \ listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest),\
        \ display\".\n"
      enum:
      - PAGE
      - POPUP
      - TOUCH
      - WAP
      type: string
    DynamicScope:
      example:
        name: name
        value: value
      properties:
        name:
          description: The scope name.
          type: string
        value:
          description: The scope value.
          type: string
      type: object
    GrantType:
      description: |
        The grant type of the access token when the access token was created.
      enum:
      - AUTHORIZATION_CODE
      - IMPLICIT
      - PASSWORD
      - CLIENT_CREDENTIALS
      - REFRESH_TOKEN
      - CIBA
      - DEVICE_CODE
      type: string
    JweAlg:
      description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending\
        \ upon the context, this refers to key transport scheme to be used by the\
        \ client and by the server. For instance:\n- as `authorizationEncryptionAlg`\
        \ value, it refers to the encoding algorithm used by server for transporting\
        \ they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers\
        \ to the expected key transport encoding algorithm that server expect from\
        \ client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value,\
        \ it refers to the algorithm used by the server to key transport of id_tokens\n\
        \n**Please note that some of the algorithms are more secure than others, some\
        \ are not supported very well cross platforms and some (like RSA1_5) is known\
        \ to be weak**.\n"
      enum:
      - RSA1_5
      - RSA_OAEP
      - RSA_OAEP_256
      - A128KW
      - A192KW
      - A256KW
      - DIR
      - ECDH_ES
      - ECDH_ES_A128KW
      - ECDH_ES_A192KW
      - ECDH_ES_A256KW
      - A128GCMKW
      - A192GCMKW
      - A256GCMKW
      - PBES2_HS256_A128KW
      - PBES2_HS384_A192KW
      - PBES2_HS512_A256KW
      type: string
    JweEnc:
      description: "This is the encryption algorithm to be used when encrypting a\
        \ JWT on client or server side.\nDepending upon the context, this refers to\
        \ encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc`\
        \ value, it refers to the encryption algorithm used by server when creating\
        \ a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected\
        \ encryption algorithm used by the client when encrypting a Request Object\n\
        \  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the\
        \ server to encrypt id_tokens\n"
      enum:
      - A128CBC_HS256
      - A192CBC_HS384
      - A256CBC_HS512
      - A128GCM
      - A192GCM
      - A256GCM
      type: string
    JwsAlg:
      description: "The signature algorithm for JWT. This value is represented on\
        \ 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where\
        \ is this defined, for instance:\n  - as service accessTokenSignAlg value,\
        \ it defines that access token are JWT and the algorithm used to sign it.\
        \ Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n\
        \  - as client authorizationSignAlg value, it represents the signature algorithm\
        \ used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n\
        \  - or as client requestSignAlg value, it specifies which is the expected\
        \ signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
      enum:
      - NONE
      - HS256
      - HS384
      - HS512
      - RS256
      - RS384
      - RS512
      - ES256
      - ES384
      - ES512
      - PS256
      - PS384
      - PS512
      - ES256K
      - EdDSA
      type: string
    NamedUri:
      example:
        name: name
        uri: https://openapi-generator.tech
      properties:
        name:
          type: string
        uri:
          format: uri
          type: string
      type: object
    Pair:
      example:
        value: value
        key: key
      properties:
        key:
          description: The key part.
          type: string
        value:
          description: The value part.
          type: string
      type: object
    Prompt:
      description: "The prompt that the UI displayed to the end-user must satisfy\
        \ as the minimum level. This value comes from `prompt` request parameter.\n\
        \nWhen the authorization request does not contain `prompt` request parameter,\
        \ `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0,\
        \ 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest),\
        \ prompt\" for `prompt` request parameter.\n"
      enum:
      - NONE
      - LOGIN
      - CONSENT
      - SELECT_ACCOUNT
      type: string
    Property:
      example:
        hidden: true
        value: value
        key: key
      properties:
        key:
          description: The key part.
          type: string
        value:
          description: The value part.
          type: string
        hidden:
          description: "The flag to indicate whether this property hidden from or\
            \ visible to client applications.\nIf `true`, this property is hidden\
            \ from client applications. Otherwise, this property is visible to client\
            \ applications."
          type: boolean
      type: object
    ResponseType:
      enum:
      - NONE
      - CODE
      - TOKEN
      - ID_TOKEN
      - CODE_TOKEN
      - CODE_ID_TOKEN
      - ID_TOKEN_TOKEN
      - CODE_ID_TOKEN_TOKEN
      type: string
    Scope:
      example:
        name: name
        description: description
        attributes:
        - value: value
          key: key
        - value: value
          key: key
        defaultEntry: true
        descriptions:
        - tag: tag
          value: value
        - tag: tag
          value: value
      properties:
        name:
          description: The name of the scope.
          type: string
        defaultEntry:
          description: '`true` to mark the scope as default. Scopes marked as default
            are regarded as requested when an authorization request from a client
            application does not contain scope request parameter. '
          type: boolean
        description:
          description: The description about the scope.
          type: string
        descriptions:
          description: The descriptions about this scope in multiple languages.
          items:
            $ref: '#/components/schemas/tagged_value'
          type: array
        attributes:
          description: The attributes of the scope.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
      type: object
    ServiceProfile:
      enum:
      - FAPI
      - OPEN_BANKING
      type: string
    Service:
      example:
        metadata:
        - value: value
          key: key
        - value: value
          key: key
        apiKey: 1
        supportedScopes:
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        idTokenSignatureKeyId: idTokenSignatureKeyId
        singleAccessTokenPerSubject: true
        issuer: issuer
        dynamicRegistrationSupported: true
        number: 0
        supportedServiceProfiles:
        - null
        - null
        authorizationResponseDuration: 7
        supportedClaims:
        - supportedClaims
        - supportedClaims
        registrationManagementEndpoint: https://openapi-generator.tech
        missingClientIdAllowed: true
        userCodeLength: 7
        deviceFlowPollingInterval: 6
        developerSnsCredentials: developerSnsCredentials
        deviceFlowCodeDuration: 1
        supportedTrustFrameworks:
        - supportedTrustFrameworks
        - supportedTrustFrameworks
        developerAuthenticationCallbackApiKey: developerAuthenticationCallbackApiKey
        deviceVerificationUriComplete: https://openapi-generator.tech
        refreshTokenKept: true
        authenticationCallbackEndpoint: https://openapi-generator.tech
        apiSecret: apiSecret
        developerAuthenticationCallbackApiSecret: developerAuthenticationCallbackApiSecret
        accessTokenDuration: 3
        backchannelUserCodeParameterSupported: true
        supportedVerifiedClaims:
        - supportedVerifiedClaims
        - supportedVerifiedClaims
        clientsPerDeveloper: 5
        unauthorizedOnClientConfigSupported: true
        snsCredentials:
        - apiKey: apiKey
          sns: sns
          apiSecret: apiSecret
        - apiKey: apiKey
          sns: sns
          apiSecret: apiSecret
        directRevocationEndpointEnabled: true
        grantManagementActionRequired: true
        requestObjectAudienceChecked: true
        jwks: jwks
        tokenExpirationLinked: true
        supportedCustomClientMetadata:
        - supportedCustomClientMetadata
        - supportedCustomClientMetadata
        directAuthorizationEndpointEnabled: true
        pushedAuthReqEndpoint: https://openapi-generator.tech
        developerAuthenticationCallbackEndpoint: https://openapi-generator.tech
        tokenEndpoint: https://openapi-generator.tech
        supportedIntrospectionAuthMethods:
        - null
        - null
        supportedClaimTypes:
        - null
        - null
        mutualTlsValidatePkiCertChain: true
        scopeRequired: true
        policyUri: https://openapi-generator.tech
        userInfoEndpoint: https://openapi-generator.tech
        dcrScopeUsedAsRequestable: true
        registrationEndpoint: https://openapi-generator.tech
        deviceVerificationUri: https://openapi-generator.tech
        authenticationCallbackApiSecret: authenticationCallbackApiSecret
        requestObjectRequired: true
        backchannelAuthenticationEndpoint: https://openapi-generator.tech
        serviceOwnerNumber: 6
        authorizationSignatureKeyId: authorizationSignatureKeyId
        endSessionEndpoint: https://openapi-generator.tech
        grantManagementEndpoint: grantManagementEndpoint
        supportedUiLocales:
        - supportedUiLocales
        - supportedUiLocales
        nbfOptional: true
        attributes:
        - value: value
          key: key
        - value: value
          key: key
        traditionalRequestObjectProcessingApplied: true
        backchannelBindingMessageRequiredInFapi: true
        pkceRequired: true
        claimShortcutRestrictive: true
        directIntrospectionEndpointEnabled: true
        hsks:
        - value: value
          key: key
        - value: value
          key: key
        modifiedAt: 2
        introspectionEndpoint: https://openapi-generator.tech
        supportedBackchannelTokenDeliveryModes:
        - null
        - null
        accessTokenType: accessTokenType
        refreshTokenDurationReset: true
        createdAt: 5
        loopbackRedirectionUriVariable: true
        tlsClientCertificateBoundAccessTokens: true
        userCodeCharset: null
        issSuppressed: true
        supportedVerificationMethods:
        - supportedVerificationMethods
        - supportedVerificationMethods
        serviceDocumentation: https://openapi-generator.tech
        revocationEndpoint: https://openapi-generator.tech
        hsmEnabled: true
        supportedDisplays:
        - null
        - null
        parRequired: true
        errorDescriptionOmitted: true
        refreshTokenDurationKept: true
        requestObjectEncryptionEncMatchRequired: true
        trustedRootCertificates:
        - trustedRootCertificates
        - trustedRootCertificates
        authorizationEndpoint: https://openapi-generator.tech
        supportedClaimLocales:
        - supportedClaimLocales
        - supportedClaimLocales
        requestObjectEncryptionAlgMatchRequired: true
        pkceS256Required: true
        tosUri: https://openapi-generator.tech
        userInfoSignatureKeyId: userInfoSignatureKeyId
        directUserInfoEndpointEnabled: true
        accessTokenSignatureKeyId: accessTokenSignatureKeyId
        directTokenEndpointEnabled: true
        mtlsEndpointAliases:
        - name: name
          uri: https://openapi-generator.tech
        - name: name
          uri: https://openapi-generator.tech
        description: description
        jwksUri: https://openapi-generator.tech
        pushedAuthReqDuration: 9
        supportedEvidence:
        - supportedEvidence
        - supportedEvidence
        supportedAcrs:
        - supportedAcrs
        - supportedAcrs
        errorUriOmitted: true
        directJwksEndpointEnabled: true
        supportedIdentityDocuments:
        - supportedIdentityDocuments
        - supportedIdentityDocuments
        supportedResponseTypes:
        - null
        - null
        clientIdAliasEnabled: true
        supportedTokenAuthMethods:
        - null
        - null
        allowableClockSkew: 7
        deviceAuthorizationEndpoint: https://openapi-generator.tech
        backchannelAuthReqIdDuration: 1
        supportedGrantTypes:
        - null
        - null
        supportedAuthorizationDetailsTypes:
        - supportedAuthorizationDetailsTypes
        - supportedAuthorizationDetailsTypes
        backchannelPollingInterval: 1
        serviceName: serviceName
        accessTokenSignAlg: null
        idTokenDuration: 4
        authenticationCallbackApiKey: authenticationCallbackApiKey
        frontChannelRequestObjectEncryptionRequired: true
        refreshTokenDuration: 2
        supportedRevocationAuthMethods:
        - null
        - null
        supportedSnses:
        - null
        - null
        supportedDeveloperSnses:
        - null
        - null
      properties:
        number:
          description: The sequential number of the service. The value of this property
            is assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        serviceOwnerNumber:
          description: The sequential number of the service owner of the service.
            The value of this property is assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        serviceName:
          description: The name of this service.
          type: string
        issuer:
          description: "The issuer identifier of the service.\n\nA URL that starts\
            \ with  https:// and has no query or fragment component.\n\nThe value\
            \ of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\n\
            and `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          type: string
        description:
          description: The description about the service.
          type: string
        apiKey:
          description: The API key. The value of this property is assigned by Authlete.
          format: int64
          readOnly: true
          type: integer
        apiSecret:
          description: The API secret. A random 256-bit value encoded by base64url
            (43 letters). The value of this property is assigned by Authlete.
          readOnly: true
          type: string
        clientsPerDeveloper:
          description: The maximum number of client applications that a developer
            is allowed to create. `0` means no limit.
          format: int32
          readOnly: true
          type: integer
        clientIdAliasEnabled:
          description: "The flag to indicate whether the 'Client ID Alias' feature\
            \ is enabled or not.\nWhen a new client is created, Authlete generates\
            \ a numeric value and assigns it as a client ID to the newly created client.\
            \ In addition to the client ID, each client can have a client ID alias.\
            \ The client ID alias is, however, recognized only when this property\
            \ (`clientIdAliasEnabled`) is set to `true`.\n"
          type: boolean
        metadata:
          description: |
            The `metadata` of the service. The content of the returned array depends on contexts.
            The predefined service metadata is listed in the following table.

              | Key | Description |
              | --- | --- |
              | `clientCount` | The number of client applications which belong to this service.  |
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        createdAt:
          description: |
            The time at which this service was created. The value is represented as milliseconds since the
            UNIX epoch (`1970-01-01`).
          format: int64
          readOnly: true
          type: integer
        modifiedAt:
          description: |
            The time at which this service was last modified. The value is represented as milliseconds since
            the UNIX epoch (1970-01-01).
          format: int64
          readOnly: true
          type: integer
        authenticationCallbackEndpoint:
          description: |
            A Web API endpoint for user authentication which is to be prepared on the service side.

            The endpoint must be implemented if you do not implement the UI at the authorization endpoint
            but use the one provided by Authlete.

            The user authentication at the authorization endpoint provided by Authlete is performed by making
            a `POST` request to this endpoint.
          format: uri
          type: string
        authenticationCallbackApiKey:
          description: "API key for basic authentication at the authentication callback\
            \ endpoint.\n\nIf the value is not empty, Authlete generates Authorization\
            \ header for Basic authentication when\nmaking a request to the authentication\
            \ callback endpoint.\n"
          type: string
        authenticationCallbackApiSecret:
          description: API secret for `basic` authentication at the authentication
            callback endpoint.
          type: string
        supportedSnses:
          description: |
            SNSes you want to support 'social login' in the UI at the
            authorization endpoint provided by Authlete.

            You need to register a `client` application in each SNS that is set
            as this parameter and set Authlete server's `/api/sns/redirection`
            as the redirection endpoint of the client application.
          items:
            $ref: '#/components/schemas/Sns'
          type: array
        snsCredentials:
          description: |
            `SNS` credentials which Authlete uses to make requests to SNSes. The format is JSON.
          items:
            $ref: '#/components/schemas/sns_credentials'
          type: array
        supportedAcrs:
          description: "Values of acrs (authentication context class references) that\
            \ the service supports.\n\nThe value of this property is used as `acr_values_supported`\n\
            property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            type: string
          readOnly: true
          type: array
        developerAuthenticationCallbackEndpoint:
          description: |
            A Web API endpoint for developer authentication which is to be prepared on the server side.

            The endpoint must be implemented if you use Developer Console.

            The developer authentication at the login page of Developer Console is performed by making a `POST`
            request to this endpoint.
          format: uri
          type: string
        developerAuthenticationCallbackApiKey:
          description: "API key for basic authentication at the developer authentication\
            \ callback endpoint.\n\nIf the value is not empty, Authlete generates\
            \ Authorization header for Basic authentication when\nmaking a request\
            \ to the developer authentication callback endpoint.\n"
          type: string
        developerAuthenticationCallbackApiSecret:
          description: API secret for basic authentication at the developer authentication
            callback endpoint.
          type: string
        supportedDeveloperSnses:
          description: |
            SNSes you want to support 'social login' in the login page of Developer Console provided by Authlete.

            You need to register a client application in each SNS checked here and set Authlete server's
            `/api/developer/sns/redirection` as the redirection endpoint of the client application.
          items:
            $ref: '#/components/schemas/Sns'
          type: array
        developerSnsCredentials:
          description: SNS credentials which Authlete uses to make requests to SNSes.
            The format is JSON.
          type: string
        supportedGrantTypes:
          description: "Values of `grant_type` request parameter that the service\
            \ supports.\n\nThe value of this property is used as `grant_types_supported\
            \ property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            $ref: '#/components/schemas/grant_type'
          type: array
        supportedResponseTypes:
          description: "Values of `response_type` request parameter that\nthe service\
            \ supports. Valid values are listed in Response Type.\n\nThe value of\
            \ this property is used as `response_types_supported` property in the\n\
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            $ref: '#/components/schemas/response_type'
          type: array
        supportedAuthorizationDetailsTypes:
          description: |
            The supported data types that can be used as values of the type field in `authorization_details`.

            This property corresponds to the `authorization_details_types_supported` metadata. See "OAuth 2.0
            Rich Authorization Requests" (RAR) for details.
          items:
            type: string
          type: array
        supportedServiceProfiles:
          description: |
            The profiles that this service supports.
          items:
            $ref: '#/components/schemas/service_profile'
          type: array
        errorDescriptionOmitted:
          description: "The flag to indicate whether the `error_description` response\
            \ parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749),\
            \ an authorization server may include\nthe `error_description` response\
            \ parameter in error responses.\n\nIf `true`, Authlete does not embed\
            \ the `error_description` response parameter in error responses.\n"
          type: boolean
        errorUriOmitted:
          description: "The flag to indicate whether the `error_uri` response parameter\
            \ is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749),\
            \ an authorization server may include the `error_uri` response parameter\
            \ in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri`\
            \ response parameter in error responses.\n"
          type: boolean
        authorizationEndpoint:
          description: "The authorization endpoint of the service.\n\nA URL that starts\
            \ with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\
            \nThe value of this property is used as `authorization_endpoint` property\
            \ in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        directAuthorizationEndpointEnabled:
          description: |
            The flag to indicate whether the direct authorization endpoint is enabled or not.

            The path of the endpoint is `/api/auth/authorization/direct/service-api-key`.
          type: boolean
        supportedUiLocales:
          description: "UI locales that the service supports.\n\nEach element is a\
            \ language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\
            \ For example, `en-US` and `ja-JP`.\n\nThe value of this property is used\
            \ as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            type: string
          type: array
        supportedDisplays:
          description: "Values of `display` request parameter that service supports.\n\
            \nThe value of this property is used as `display_values_supported` property\
            \ in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            $ref: '#/components/schemas/Display'
          type: array
        pkceRequired:
          description: "The flag to indicate whether the use of Proof Key for Code\
            \ Exchange (PKCE) is always required for authorization requests by Authorization\
            \ Code Flow.\n\nIf `true`, `code_challenge` request parameter is always\
            \ required for authorization requests using Authorization Code Flow.\n\
            \nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code\
            \ Exchange by OAuth Public Clients) for details about `code_challenge`\
            \ request parameter.\n"
          type: boolean
        pkceS256Required:
          description: "The flag to indicate whether `S256` is always required as\
            \ the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636)\
            \ is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256`\
            \ must be included in the authorization request\nwhenever it includes\
            \ the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method`\
            \ request parameter nor use of plain (`code_challenge_method=plain`) is\
            \ allowed.\n"
          type: boolean
        authorizationResponseDuration:
          description: "The duration of authorization response JWTs in seconds.\n\n\
            [Financial-grade API: JWT Secured Authorization Response Mode for OAuth\
            \ 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n\
            defines new values for the `response_mode` request parameter. They are\
            \ `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them\
            \ is specified as the response mode, response parameters\nfrom the authorization\
            \ endpoint will be packed into a JWT. This property is used to compute\
            \ the\nvalue of the `exp` claim of the JWT.\n"
          format: int64
          type: integer
        tokenEndpoint:
          description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2)\
            \ of the service.\n\nA URL that starts with `https://` and has not fragment\
            \ component. For example, `https://example.com/auth/token`.\n\nThe value\
            \ of this property is used as `token_endpoint` property in the\n[OpenID\
            \ Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        directTokenEndpointEnabled:
          description: |
            The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint
            is `/api/auth/token/direct/service-api-key`.
          type: boolean
        supportedTokenAuthMethods:
          description: "Client authentication methods supported by the token endpoint\
            \ of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports`\
            \ property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            $ref: '#/components/schemas/client_authentication_method'
          type: array
        missingClientIdAllowed:
          description: |
            The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.

            This flag should not be set unless you have special reasons.
          type: boolean
        revocationEndpoint:
          description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009)\
            \ of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
          format: uri
          type: string
        directRevocationEndpointEnabled:
          description: 'The flag to indicate whether the direct revocation endpoint
            is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. '
          type: boolean
        supportedRevocationAuthMethods:
          description: |
            Client authentication methods supported at the revocation endpoint.
          items:
            $ref: '#/components/schemas/client_authentication_method'
          type: array
        introspectionEndpoint:
          description: The URI of the introspection endpoint.
          format: uri
          type: string
        directIntrospectionEndpointEnabled:
          description: "The flag to indicate whether the direct userinfo endpoint\
            \ is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
          type: boolean
        supportedIntrospectionAuthMethods:
          description: |
            Client authentication methods supported at the introspection endpoint.
          items:
            $ref: '#/components/schemas/client_authentication_method'
          type: array
        pushedAuthReqEndpoint:
          description: "The URI of the pushed authorization request endpoint.\n\n\
            This property corresponds to the `pushed_authorization_request_endpoint`\
            \ metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\"\
            \ of OAuth 2.0 Pushed Authorization Requests.\n"
          format: uri
          type: string
        pushedAuthReqDuration:
          description: "The duration of pushed authorization requests in seconds.\n\
            \n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\n\
            defines an endpoint (called \"pushed authorization request endpoint\"\
            ) which client applications\ncan register authorization requests into\
            \ and get corresponding URIs (called \"request URIs\") from.\nThe issued\
            \ URIs represent the registered authorization requests. The client applications\
            \ can use\nthe URIs as the value of the `request_uri` request parameter\
            \ in an authorization request.\n\nThe property represents the duration\
            \ of registered authorization requests and is used as the value\nof the\
            \ `expires_in` parameter in responses from the pushed authorization request\
            \ endpoint.\n"
          format: int64
          type: integer
        parRequired:
          description: "The flag to indicate whether this service requires that clients\
            \ use the pushed authorization\nrequest endpoint.\n\nThis property corresponds\
            \ to the `require_pushed_authorization_requests` server metadata defined\n\
            in [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
          type: boolean
        requestObjectRequired:
          description: "The flag to indicate whether this service requires that authorization\
            \ requests always utilize\na request object by using either request or\
            \ `request_uri` request parameter.\n\nIf this flag is set to `true` and\
            \ the value of `traditionalRequestObjectProcessingApplied` is\n`false`,\
            \ the value of `require_signed_request_object` server metadata of this\
            \ service is reported\nas `true` in the discovery document. The metadata\
            \ is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object`\
            \ is `true` means that authorization requests which don't\nconform to\
            \ the JAR specification are rejected.\n"
          type: boolean
        traditionalRequestObjectProcessingApplied:
          description: "The flag to indicate whether a request object is processed\
            \ based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html)\
            \ or JAR (JWT\nSecured Authorization Request).\n\nDifferences between\
            \ rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n \
            \ - JAR requires that a request object be always -signed.\n  - JAR does\
            \ not allow request parameters outside a request object to be referred\
            \ to.\n  - OIDC Core 1.0 requires that response_type request parameter\
            \ exist outside a request object even if the request object includes the\
            \ request parameter.\n  - OIDC Core 1.0 requires that scope request parameter\
            \ exist outside a request object if the authorization request is an\n\
            \  - OIDC request even if the request object includes the request parameter.\n\
            \nIf this flag is set to `false` and the value of `requestObjectRequired`\
            \ is `true`, the value of\n`require_signed_request_object` server metadata\
            \ of this service\nis reported as `true` in the discovery document. The\
            \ metadata is defined in JAR (JWT Secured\nAuthorization Request). That\
            \ `require_signed_request_object` is `true` means that authorization\n\
            requests which don't conform to the JAR specification are rejected.\n"
          type: boolean
        mutualTlsValidatePkiCertChain:
          description: |
            The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.
          type: boolean
        trustedRootCertificates:
          description: |
            The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.
          items:
            type: string
          type: array
        mtlsEndpointAliases:
          description: "The MTLS endpoint aliases.\n\nThis property corresponds to\
            \ the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual\
            \ TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication\
            \ and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\
            \nThe aliases will be embedded in the response from the discovery endpoint\
            \ like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\"\
            : {\n    \"token_endpoint\":         \"https://mtls.example.com/token\"\
            ,\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n\
            \    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\
            \n  }\n}\n```\n"
          items:
            $ref: '#/components/schemas/named_uri'
          type: array
        accessTokenType:
          description: "The access token type.\n\nThis value is used as the value\
            \ of `token_type` property in access token responses. If this service\n\
            complies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value\
            \ of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0),\
            \ 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1)\
            \ for details.\n"
          type: string
        tlsClientCertificateBoundAccessTokens:
          description: |
            The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.
          type: boolean
        accessTokenDuration:
          description: "The duration of access tokens in seconds. This value is used\
            \ as the value of `expires_in` property\nin access token responses. `expires_in`\
            \ is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
          format: int64
          type: integer
        singleAccessTokenPerSubject:
          description: "The flag to indicate whether the number of access tokens per\
            \ subject (and per client) is at most one or can be more.\n\nIf `true`,\
            \ an attempt to issue a new access token invalidates existing access tokens\
            \ that are associated with the same subject and the same client.\n\nNote\
            \ that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4)\
            \ do not invalidate existing access tokens because access tokens issued\
            \ by Client Credentials Flow are not associated with any end-user's subject.\
            \ Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6)\
            \ invalidates the coupled access token only and this invalidation is always\
            \ performed regardless of whether the value of this setting item is `true`\
            \ or `false`.\n"
          type: boolean
        accessTokenSignAlg:
          $ref: '#/components/schemas/jws_alg'
        accessTokenSignatureKeyId:
          description: "The key ID to identify a JWK used for signing access tokens.\n\
            \nA JWK Set can be registered as a property of a service. A JWK Set can\
            \ contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for\
            \ signing from the JWK Set when it generates a JWT-based\naccess token.\
            \ Authlete Server searches the registered JWK Set for a JWK which satisfies\
            \ conditions\nfor access token signature. If the number of JWK candidates\
            \ which satisfy the conditions is 1,\nthere is no problem. On the other\
            \ hand, if there exist multiple candidates, a Key ID is needed\nto be\
            \ specified so that Authlete Server can pick up one JWK from among the\
            \ JWK candidates.\n"
          type: string
        refreshTokenDuration:
          description: "The duration of refresh tokens in seconds. The related specifications\
            \ have no requirements on refresh token duration, but Authlete sets expiration\
            \ for refresh tokens."
          format: int64
          type: integer
        refreshTokenDurationKept:
          description: |
            The flag to indicate whether the remaining duration of the used refresh token is taken over to
            the newly issued refresh token.
          type: boolean
        refreshTokenDurationReset:
          description: "The flag which indicates whether duration of refresh tokens\
            \ are reset when they are used even\nif the `refreshTokenKept` property\
            \ of this service set to is `true` (= even if \"Refresh Token\nContinuous\
            \ Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept`\
            \ property is set to `false`. In other words,\nif this service issues\
            \ a new refresh token on every refresh token request, the refresh token\n\
            will have fresh duration (unless `refreshTokenDurationKept` is set to\
            \ `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
          type: boolean
        refreshTokenKept:
          description: "The flag to indicate whether a refresh token remains unchanged\
            \ or gets renewed after its use.\n\nIf `true`, a refresh token used to\
            \ get a new access token remains valid after its use. Otherwise, if `false`,\
            \ a refresh token is invalidated after its use and a new refresh token\
            \ is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6),\
            \ as to how to get a new access token using a refresh token.\n"
          type: boolean
        supportedScopes:
          description: "Scopes supported by the service.\n\nAuthlete strongly recommends\
            \ that the service register at least the following scopes.\n\n| Name |\
            \ Description |\n| --- | --- |\n| openid | A permission to get an ID token\
            \ of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0,\
            \ 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\
            \ Without this scope, Authlete does not allow `response_type` request\
            \ parameter to have values other than code and token. |\n| profile | A\
            \ permission to get information about `name`, `family_name`, `given_name`,\
            \ `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`,\
            \ `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at`\
            \ from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting\
            \ Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\
            \ for details. |\n| email | A permission to get information about `email`\
            \ and `email_verified` from the user info endpoint. See [OpenID Connect\
            \ Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\
            \ for details. |\n| address | A permission to get information about address\
            \ from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting\
            \ Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\
            \ and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim)\
            \ for details. |\n| phone | A permission to get information about `phone_number`\
            \ and `phone_number_verified` from the user info endpoint. See [OpenID\
            \ Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\
            \ for details. |\n| offline_access | A permission to get information from\
            \ the user info endpoint even when the end-user is not present. See [OpenID\
            \ Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess)\
            \ for details. |\n\nThe value of this property is used as `scopes_supported`\
            \ property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        scopeRequired:
          description: "The flag to indicate whether requests that request no scope\
            \ are rejected or not.\n\nWhen a request has no explicit `scope` parameter\
            \ and the service's pre-defined default scope set is empty,\nthe authorization\
            \ server regards the request requests no scope. When this flag is set\
            \ to `true`,\nrequests that request no scope are rejected.\n\nThe requirement\
            \ below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\n\
            does not explicitly mention the case where the default scope set is empty.\n\
            \n> If the client omits the scope parameter when requesting authorization,\
            \ the authorization server\nMUST either process the request using a pre-defined\
            \ default value or fail the request indicating an invalid scope.\n\nHowever,\
            \ if you interpret *\"the default scope set exists but is empty\"* as\
            \ *\"the default scope set does not exist\"*\nand want to strictly conform\
            \ to the requirement above, this flag has to be `true`.\n"
          type: boolean
        idTokenDuration:
          description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\n\
            in seconds. This value is used to calculate the value of `exp` claim in\
            \ an ID token.'\n"
          format: int64
          type: integer
        allowableClockSkew:
          description: "The allowable clock skew between the server and clients in\
            \ seconds.\n\nThe clock skew is taken into consideration when time-related\
            \ claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
          format: int32
          type: integer
        supportedClaimTypes:
          description: "Claim types supported by the service. Valid values are listed\
            \ in Claim Type. Note that Authlete\ncurrently doesn't provide any API\
            \ to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value\
            \ of this property is used as `claim_types_supported` property in the\
            \ [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            $ref: '#/components/schemas/claim_type'
          type: array
        supportedClaimLocales:
          description: "Claim locales that the service supports. Each element is a\
            \ language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\n\
            For example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages\
            \ and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\n\
            for details.\n\nThe value of this property is used as `claims_locales_supported`\
            \ property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          items:
            type: string
          type: array
        supportedClaims:
          description: "Claim names that the service supports. The standard claim\
            \ names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\
            \ should\nbe supported. The following is the list of standard claims.\n\
            \n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n\
            - `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n\
            - `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n\
            - `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n\
            - `updated_at`\n\nThe value of this property is used as `claims_supported`\
            \ property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\
            \nThe service may support its original claim names. See [OpenID Connect\
            \ Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
          items:
            type: string
          type: array
        claimShortcutRestrictive:
          description: "The flag indicating whether claims specified by shortcut scopes\
            \ (e.g. `profile`) are included\nin the issued ID token only when no access\
            \ token is issued.\n\nTo strictly conform to the description below excerpted\
            \ from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims),\
            \ this flag has to be `true`.\n\n> The Claims requested by the profile,\
            \ email, address, and phone scope values are returned from\nthe UserInfo\
            \ Endpoint, as described in Section 5.3.2, when a response_type value\
            \ is used that\nresults in an Access Token being issued. However, when\
            \ no Access Token is issued (which is the\ncase for the response_type\
            \ value id_token), the resulting Claims are returned in the ID Token.\n"
          type: boolean
        jwksUri:
          description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517)\
            \ document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications\
            \ accesses this URL (1) to get the public key of the service to validate\
            \ the\nsignature of an ID token issued by the service and (2) to get the\
            \ public key of the service to\nencrypt an request object of the client\
            \ application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc)\
            \ for details.\n\nThe value of this property is used as `jwks_uri` property\
            \ in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        directJwksEndpointEnabled:
          description: |
            'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint
            is `/api/service/jwks/get/direct/service-api-key`. '
          type: boolean
        jwks:
          description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517)\
            \ document.\n\nIf this property is not `null` in a `/service/create` request\
            \ or a `/service/update` request,\nAuthlete hosts the content in the database.\
            \ This property must not be `null` and must contain\npairs of public/private\
            \ keys if the service wants to support asymmetric signatures for ID tokens\n\
            and asymmetric encryption for request objects. See [OpenID Connect Core\
            \ 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc)\
            \ for details.\n"
          type: string
        idTokenSignatureKeyId:
          description: "The key ID to identify a JWK used for ID token signature using\
            \ an asymmetric key.\n\nA JWK Set can be registered as a property of a\
            \ Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517)\
            \ for details about JWK). Authlete Server has\nto pick up one JWK for\
            \ signature from the JWK Set when it generates an ID token and signature\n\
            using an asymmetric key is required. Authlete Server searches the registered\
            \ JWK Set for a JWK\nwhich satisfies conditions for ID token signature.\
            \ If the number of JWK candidates which satisfy\nthe conditions is 1,\
            \ there is no problem. On the other hand, if there exist multiple candidates,\n\
            a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed\
            \ to be specified so that\nAuthlete Server can pick up one JWK from among\
            \ the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists\
            \ for the purpose described above. For key rotation\n(OpenID Connect Core\
            \ 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\n\
            this mechanism is needed.\n"
          type: string
        userInfoSignatureKeyId:
          description: "The key ID to identify a JWK used for user info signature\
            \ using an asymmetric key.\n\nA JWK Set can be registered as a property\
            \ of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517)\
            \ for details about JWK). Authlete Server has\nto pick up one JWK for\
            \ signature from the JWK Set when it is required to sign user info (which\n\
            is returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\n\
            using an asymmetric key. Authlete Server searches the registered JWK Set\
            \ for a JWK which satisfies\nconditions for user info signature. If the\
            \ number of JWK candidates which satisfy the conditions\nis 1, there is\
            \ no problem. On the other hand, if there exist multiple candidates, a\
            \ [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed\
            \ to be specified so that Authlete Server can pick up one JWK from among\
            \ the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists\
            \ for the purpose described above. For key rotation\n(OpenID Connect Core\
            \ 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\n\
            this mechanism is needed.\n"
          type: string
        authorizationSignatureKeyId:
          description: "The key ID to identify a JWK used for signing authorization\
            \ responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured\
            \ Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n\
            defines new values for the `response_mode` request parameter. They are\
            \ `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them\
            \ is specified as the response mode, response parameters\nfrom the authorization\
            \ endpoint will be packed into a JWT. This property is used to compute\
            \ the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches\
            \ the JWK Set for a JWK which satisfies conditions for authorization response\n\
            signature. If the number of JWK candidates which satisfy the conditions\
            \ is 1, there is no problem.\nOn the other hand, if there exist multiple\
            \ candidates, a Key ID is needed to be specified so that\nAuthlete Server\
            \ can pick up one JWK from among the JWK candidates. This property exists\
            \ to specify\nthe key ID.\n"
          type: string
        userInfoEndpoint:
          description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo)\
            \ of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\
            \nThe value of this property is used as `userinfo_endpoint` property in\
            \ the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        directUserInfoEndpointEnabled:
          description: |
            The flag to indicate whether the direct userinfo endpoint is enabled or not. The path
            of the endpoint is `/api/auth/userinfo/direct/service-api-key`.
          type: boolean
        dynamicRegistrationSupported:
          description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic\
            \ Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\n\
            is supported.\n"
          type: boolean
        registrationEndpoint:
          description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\n\
            of the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\
            \nThe value of this property is used as `registration_endpoint` property\
            \ in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        registrationManagementEndpoint:
          description: "The URI of the registration management endpoint. If dynamic\
            \ client registration is supported,\nand this is set, this URI will be\
            \ used as the basis of the client's management endpoint by appending\n\
            `/clientid}/` to it as a path element. If this is unset, the value of\
            \ `registrationEndpoint` will\nbe used as the URI base instead.\n"
          format: uri
          type: string
        policyUri:
          description: "The URL of the \"Policy\" of the service.\n\nThe value of\
            \ this property is used as `op_policy_uri` property in the [OpenID Provider\
            \ Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        tosUri:
          description: "The URL of the \"Terms Of Service\" of the service.\n\nThe\
            \ value of this property is used as `op_tos_uri` property in the [OpenID\
            \ Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        serviceDocumentation:
          description: "The URL of a page where documents for developers can be found.\n\
            \nThe value of this property is used as `service_documentation` property\
            \ in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        backchannelAuthenticationEndpoint:
          description: "The URI of backchannel authentication endpoint, which is defined\
            \ in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
          format: uri
          type: string
        supportedBackchannelTokenDeliveryModes:
          description: "The supported backchannel token delivery modes. This property\
            \ corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\
            \nBackchannel token delivery modes are defined in the specification of\
            \ [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
          items:
            $ref: '#/components/schemas/delivery_mode'
          type: array
        backchannelAuthReqIdDuration:
          description: |
            The duration of backchannel authentication request IDs issued from the backchannel authentication
            endpoint in seconds. This is used as the value of the `expires_in` property in responses from
            the backchannel authentication endpoint.
          format: int32
          type: integer
        backchannelPollingInterval:
          description: |
            The minimum interval between polling requests to the token endpoint from client applications in
            seconds. This is used as the value of the `interval` property in responses from the backchannel
            authentication endpoint.
          format: int32
          type: integer
        backchannelUserCodeParameterSupported:
          description: |
            The boolean flag which indicates whether the `user_code` request parameter is supported at the
            backchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`
            metadata.
          type: boolean
        backchannelBindingMessageRequiredInFapi:
          description: "The flag to indicate whether the `binding_message` request\
            \ parameter is always required whenever\na backchannel authentication\
            \ request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA\
            \ profile requires that the authorization server _\"shall ensure unique\
            \ authorization\ncontext exists in the authorization request or require\
            \ a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2,\
            \ 2). The simplest way to fulfill this requirement is to set this property\n\
            to `true`.\n\nIf this property is set to `false`, the `binding_message`\
            \ request parameter remains optional\neven in FAPI context, but in exchange,\
            \ your authorization server must implement a custom mechanism\nthat ensures\
            \ each backchannel authentication request has unique context.\n"
          type: boolean
        deviceAuthorizationEndpoint:
          description: |
            The URI of the device authorization endpoint.

            Device authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.
          format: uri
          type: string
        deviceVerificationUri:
          description: |
            The verification URI for the device flow. This URI is used as the value of the `verification_uri`
            parameter in responses from the device authorization endpoint.
          format: uri
          type: string
        deviceVerificationUriComplete:
          description: "The verification URI for the device flow with a placeholder\
            \ for a user code. This URI is used\nto build the value of the `verification_uri_complete`\
            \ parameter in responses from the device\nauthorization endpoint.\n\n\
            It is expected that the URI contains a fixed string `USER_CODE` somewhere\
            \ as a placeholder for\na user code. For example, like the following.\n\
            \n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string\
            \ is replaced with an actual user code when Authlete builds a verification\
            \ URI\nwith a user code for the `verification_uri_complete` parameter.\n\
            \nIf this URI is not set, the `verification_uri_complete` parameter won't\
            \ appear in device authorization\nresponses.\n"
          format: uri
          type: string
        deviceFlowCodeDuration:
          description: |
            The duration of device verification codes and end-user verification codes issued from the device
            authorization endpoint in seconds. This is used as the value of the `expires_in` property in responses
            from the device authorization endpoint.
          format: int32
          type: integer
        deviceFlowPollingInterval:
          description: |
            The minimum interval between polling requests to the token endpoint from client applications in
            seconds in device flow. This is used as the value of the `interval` property in responses from
            the device authorization endpoint.
          format: int32
          type: integer
        userCodeCharset:
          $ref: '#/components/schemas/user_code_charset'
        userCodeLength:
          description: |
            The length of end-user verification codes (`user_code`) for Device Flow.
          format: int32
          type: integer
        supportedTrustFrameworks:
          description: "Trust frameworks supported by this service. This corresponds\
            \ to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
          items:
            type: string
          type: array
        supportedEvidence:
          description: "Evidence supported by this service. This corresponds to the\
            \ `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
          items:
            type: string
          type: array
        supportedIdentityDocuments:
          description: "Identity documents supported by this service. This corresponds\
            \ to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
          items:
            type: string
          type: array
        supportedVerificationMethods:
          description: "Verification methods supported by this service. This corresponds\
            \ to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
          items:
            type: string
          type: array
        supportedVerifiedClaims:
          description: "Verified claims supported by this service. This corresponds\
            \ to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
          items:
            type: string
          type: array
        attributes:
          description: |
            The attributes of this service.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        nbfOptional:
          description: "The flag indicating whether the nbf claim in the request object\
            \ is optional even when the authorization\nrequest is regarded as a FAPI-Part2\
            \ request.\n\nThe final version of Financial-grade API was approved in\
            \ January, 2021. The Part 2 of the final\nversion has new requirements\
            \ on lifetime of request objects. They require that request objects\n\
            contain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no\
            \ longer than 60 minutes.\n\nTherefore, when an authorization request\
            \ is regarded as a FAPI-Part2 request, the request object\nused in the\
            \ authorization request must contain an nbf claim. Otherwise, the authorization\
            \ server\nrejects the authorization request.\n\nWhen this flag is `true`,\
            \ the `nbf` claim is treated as an optional claim even when the authorization\n\
            request is regarded as a FAPI-Part2 request. That is, the authorization\
            \ server does not perform\nthe validation on lifetime of the request object.\n\
            \nSkipping the validation is a violation of the FAPI specification. The\
            \ reason why this flag has\nbeen prepared nevertheless is that the new\
            \ requirements (which do not exist in the Implementer's\nDraft 2 released\
            \ in October, 2018) have big impacts on deployed implementations of client\n\
            applications and Authlete thinks there should be a mechanism whereby to\
            \ make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
          type: boolean
        issSuppressed:
          description: "The flag indicating whether generation of the iss response\
            \ parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer\
            \ Identifier in Authorization Response\" has defined a new\nauthorization\
            \ response parameter, `iss`, as a countermeasure for a certain type of\
            \ mix-up attacks.\n\nThe specification requires that the `iss` response\
            \ parameter always be included in authorization\nresponses unless JARM\
            \ (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag\
            \ is `true`, the authorization server does not include the `iss` response\
            \ parameter\nin authorization responses. By turning this flag on and off,\
            \ developers of client applications\ncan experiment the mix-up attack\
            \ and the effect of the `iss` response parameter.\n\nNote that this flag\
            \ should not be `true` in production environment unless there are special\n\
            reasons for it.\n"
          type: boolean
        supportedCustomClientMetadata:
          description: "custom client metadata supported by this service.\n\nStandard\
            \ specifications define client metadata as necessary. The following are\
            \ such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n\
            * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n\
            * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound\
            \ Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID\
            \ Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n\
            * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request\
            \ (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n\
            * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth\
            \ 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n\
            * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n\
            * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\
            \nStandard client metadata included in Client Registration Request and\
            \ Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html),\
            \ [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html))\
            \ are, if supported by Authlete, stored\ninto Authlete database. On the\
            \ other hand, unrecognized client metadata are discarded.\n\nBy listing\
            \ up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\n\
            Authlete can recognize them and stores their values into the database.\
            \ The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
          items:
            type: string
          type: array
        tokenExpirationLinked:
          description: "The flag indicating whether the expiration date of an access\
            \ token never exceeds that of the\ncorresponding refresh token.\n\nWhen\
            \ a new access token is issued by a refresh token request (= a token request\
            \ with `grant_type=refresh_token`),\nthe expiration date of the access\
            \ token may exceed the expiration date of the corresponding\nrefresh token.\
            \ This behavior itself is not wrong and may happen when `refreshTokenKept`\
            \ is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen\
            \ this flag is `true`, the expiration date of an access token never exceeds\
            \ that of the corresponding\nrefresh token regardless of the calculated\
            \ duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration`\
            \ in `extension` and `access_token.duration` scope attribute.\n\nIt is\
            \ technically possible to set a value which is bigger than the duration\
            \ of refresh tokens\nas the duration of access tokens although it is strange.\
            \ In the case, the duration of an access\ntoken becomes longer than the\
            \ duration of the refresh token which is issued together with the\naccess\
            \ token. Even if the duration values are configured so, if this flag is\
            \ `true`, the expiration\ndate of the access token does not exceed that\
            \ of the refresh token. That is, the duration of\nthe access token will\
            \ be shortened, and as a result, the access token and the refresh token\n\
            will have the same expiration date.\n"
          type: boolean
        frontChannelRequestObjectEncryptionRequired:
          description: "The flag indicating whether encryption of request object is\
            \ required when the request object\nis passed through the front channel.\n\
            \nThis flag does not affect the processing of request objects at the Pushed\
            \ Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed\
            \ Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\n\
            Unecrypted request objects are accepted at the endpoint even if this flag\
            \ is `true`.\n\nThis flag does not indicate whether a request object is\
            \ always required. There is a different\nflag, `requestObjectRequired`,\
            \ for the purpose. See the description of `requestObjectRequired`\nfor\
            \ details.\n\nEven if this flag is `false`, encryption of request object\
            \ is required if the `frontChannelRequestObjectEncryptionRequired`\nflag\
            \ of the client is `true`.\n"
          type: boolean
        requestObjectEncryptionAlgMatchRequired:
          description: "The flag indicating whether the JWE alg of encrypted request\
            \ object must match the `request_object_encryption_alg`\nclient metadata\
            \ of the client that has sent the request object.\n\nThe request_object_encryption_alg\
            \ client metadata itself is defined in [OpenID Connect Dynamic\nClient\
            \ Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\
            \ as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE]\
            \ alg algorithm [JWA] the RP is declaring that it may use for encrypting\n\
            Request Objects sent to the OP. This parameter SHOULD be included when\
            \ symmetric encryption\nwill be used, since this signals to the OP that\
            \ a client_secret value needs to be returned\nfrom which the symmetric\
            \ key will be derived, that might not otherwise be returned. The RP\n\
            MAY still use other supported encryption algorithms or send unencrypted\
            \ Request Objects, even\nwhen this parameter is present. If both signing\
            \ and encryption are requested, the Request Object\nwill be signed then\
            \ encrypted, with the result being a Nested JWT, as defined in [JWT].\
            \ The\ndefault, if omitted, is that the RP is not declaring whether it\
            \ might encrypt any Request Objects.\n\nThe point here is \"The RP MAY\
            \ still use other supported encryption algorithms or send unencrypted\n\
            Request Objects, even when this parameter is present.\"\n\nThe Client's\
            \ property that represents the client metadata is `requestEncryptionAlg`.\
            \ See the\ndescription of `requestEncryptionAlg` for details.\n\nEven\
            \ if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\n\
            flag of the client is `true`.\n"
          type: boolean
        requestObjectEncryptionEncMatchRequired:
          description: "The flag indicating whether the JWE `enc` of encrypted request\
            \ object must match the `request_object_encryption_enc`\nclient metadata\
            \ of the client that has sent the request object.\n\nThe `request_object_encryption_enc`\
            \ client metadata itself is defined in [OpenID Connect Dynamic\nClient\
            \ Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\
            \ as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc\
            \ algorithm [JWA] the RP is declaring that it may use for encrypting Request\n\
            Objects sent to the OP. If request_object_encryption_alg is specified,\
            \ the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc\
            \ is included, request_object_encryption_alg\nMUST also be provided.\n\
            \nThe Client's property that represents the client metadata is `requestEncryptionEnc`.\
            \ See the\ndescription of `requestEncryptionEnc` for details.\n\nEven\
            \ if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\n\
            flag is `true`.\n"
          type: boolean
        hsmEnabled:
          description: "The flag indicating whether HSM (Hardware Security Module)\
            \ support is enabled for this service.\n\nWhen this flag is `false`, keys\
            \ managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*`\
            \ APIs reject all requests.\n\nEven if this flag is `true`, HSM-related\
            \ features do not work if the configuration of the Authlete\nserver you\
            \ are using does not support HSM.\n"
          type: boolean
        hsks:
          description: "The information about keys managed on HSMs (Hardware Security\
            \ Modules).\n\nThis `hsks` property is output only, meaning that `hsks`\
            \ in requests to `/api/service/create`\nAPI and `/api/service/update`\
            \ API do not have any effect. The contents of this property is controlled\n\
            only by `/api/hsk/*` APIs.\n"
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        grantManagementEndpoint:
          description: |
            The URL of the grant management endpoint.
          type: string
        grantManagementActionRequired:
          description: "The flag indicating whether every authorization request (and\
            \ any request serving as an authorization\nrequest such as CIBA backchannel\
            \ authentication request and device authorization request) must\ninclude\
            \ the `grant_management_action` request parameter.\n\nThis property corresponds\
            \ to the `grant_management_action_required` server metadata defined\n\
            in [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\
            \nNote that setting true to this property will result in blocking all\
            \ public clients because\nthe specification requires that grant management\
            \ be usable only by confidential clients for\nsecurity reasons.\n"
          type: boolean
        unauthorizedOnClientConfigSupported:
          description: "The flag indicating whether Authlete's `/api/client/registration`\
            \ API uses `UNAUTHORIZED` as\na value of the `action` response parameter\
            \ when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not\
            \ defined as a possible value of the `action`\nparameter in an `/api/client/registration`\
            \ API response. This means that implementations of\nclient `configuration`\
            \ endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\n\
            strictly.\n\nFor backward compatibility (to avoid breaking running systems),\
            \ Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED`\
            \ enum value if this flag is not turned on.\n\nThe steps an existing implementation\
            \ of client configuration endpoint has to do in order to\nconform to the\
            \ requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update\
            \ the Authlete library (e.g. authlete-java-common) your system is using.\n\
            2. Update your implementation of client configuration endpoint so that\
            \ it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported`\
            \ flag.\n"
          type: boolean
        dcrScopeUsedAsRequestable:
          description: |
            The flag indicating whether the `scope` request parameter in dynamic client registration and
            update requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.

            Limiting the range of scopes that a client can request is achieved by listing scopes in the
            `client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`
            property to `true`. This feature is called "requestable scopes".

            This property affects behaviors of `/api/client/registration` and other family APIs.
          type: boolean
        endSessionEndpoint:
          description: "The endpoint for clients ending the sessions.\n\nA URL that\
            \ starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\
            \nThe value of this property is used as `end_session_endpoint` property\
            \ in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
          format: uri
          type: string
        loopbackRedirectionUriVariable:
          description: "The flag indicating whether the port number component of redirection\
            \ URIs can be variable when\nthe host component indicates loopback.\n\n\
            When this flag is `true`, if the host component of a redirection URI specified\
            \ in an authorization\nrequest indicates loopback (to be precise, when\
            \ the host component is localhost, `127.0.0.1`\nor `::1`), the port number\
            \ component is ignored when the specified redirection URI is compared\n\
            to pre-registered ones. This behavior is described in [7.3. Loopback Interface\
            \ Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3)\
            \ of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\n\
            for Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\n\
            of [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"\
            If the client registration\nincluded the full redirection URI, the authorization\
            \ server MUST compare the two URIs using\nsimple string comparison as\
            \ defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri`\
            \ in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\n\
            of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html)\
            \ states\n_\"This URI MUST exactly match one of the Redirection URI values\
            \ for the Client pre-registered\nat the OpenID Provider, with the matching\
            \ performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String\
            \ Comparison**).\"_ These \"Simple String Comparison\" requirements are\
            \ preceded\nby this flag. That is, even when the conditions described\
            \ in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number\
            \ component of loopback redirection URIs can be variable when this\nflag\
            \ is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\n\
            of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\
            \n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"\
            `) function\nsimilarly to loopback IP redirects described in Section 7.3,\
            \ the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI\
            \ with the loopback IP literal rather than localhost avoids inadvertently\n\
            listening on network interfaces other than the loopback interface. It\
            \ is also less susceptible\nto client-side firewalls and misconfigured\
            \ host name resolution on the user's device.\n\nHowever, Authlete allows\
            \ the port number component to be variable in the case of `localhost`,\n\
            too. It is left to client applications whether they use `localhost` or\
            \ a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\
            \nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html)\
            \ state\nthat loopback redirection URIs use the `\"http\"` scheme, but\
            \ Authlete allows the port number\ncomponent to be variable in other cases\
            \ (e.g. in the case of the `\"https\"` scheme), too.\n"
          type: boolean
        requestObjectAudienceChecked:
          description: "The flag indicating whether Authlete checks whether the `aud`\
            \ claim of request objects matches\nthe issuer identifier of this service.\n\
            \n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\n\
            of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html)\
            \ has the following\nstatement.\n\n> The `aud` value SHOULD be or include\
            \ the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4)\
            \ of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth\
            \ 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR))\
            \ has the following statement.\n\n> The value of aud should be the value\
            \ of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\
            \nAs excerpted above, validation on the `aud` claim of request objects\
            \ is optional. However, if\nthis flag is turned on, Authlete checks whether\
            \ the `aud` claim of request objects matches the issuer\nidentifier of\
            \ this service and raises an error if they are different."
          type: boolean
      type: object
    SnsCredentials:
      example:
        apiKey: apiKey
        sns: sns
        apiSecret: apiSecret
      properties:
        sns:
          description: SNS.
          type: string
        apiKey:
          description: API key.
          type: string
        apiSecret:
          description: API secret.
          type: string
      type: object
    Sns:
      enum:
      - FACEBOOK
      type: string
    SubjectType:
      description: "The subject type that the client application requests. Details\
        \ about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct\
        \ Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\
        \nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic\
        \ Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
      enum:
      - PUBLIC
      - PAIRWISE
      type: string
    TaggedValue:
      example:
        tag: tag
        value: value
      properties:
        tag:
          description: The language tag part.
          type: string
        value:
          description: The value part.
          type: string
      type: object
    UserCodeCharset:
      description: |
        The character set for end-user verification codes (`user_code`) for Device Flow.
      enum:
      - BASE20
      - NUMERIC
      type: string
    result:
      example:
        resultCode: resultCode
        resultMessage: resultMessage
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
      type: object
    service_get_list_response:
      example:
        start: 0
        end: 6
        services:
        - metadata:
          - value: value
            key: key
          - value: value
            key: key
          apiKey: 1
          supportedScopes:
          - name: name
            description: description
            attributes:
            - value: value
              key: key
            - value: value
              key: key
            defaultEntry: true
            descriptions:
            - tag: tag
              value: value
            - tag: tag
              value: value
          - name: name
            description: description
            attributes:
            - value: value
              key: key
            - value: value
              key: key
            defaultEntry: true
            descriptions:
            - tag: tag
              value: value
            - tag: tag
              value: value
          idTokenSignatureKeyId: idTokenSignatureKeyId
          singleAccessTokenPerSubject: true
          issuer: issuer
          dynamicRegistrationSupported: true
          number: 0
          supportedServiceProfiles:
          - null
          - null
          authorizationResponseDuration: 7
          supportedClaims:
          - supportedClaims
          - supportedClaims
          registrationManagementEndpoint: https://openapi-generator.tech
          missingClientIdAllowed: true
          userCodeLength: 7
          deviceFlowPollingInterval: 6
          developerSnsCredentials: developerSnsCredentials
          deviceFlowCodeDuration: 1
          supportedTrustFrameworks:
          - supportedTrustFrameworks
          - supportedTrustFrameworks
          developerAuthenticationCallbackApiKey: developerAuthenticationCallbackApiKey
          deviceVerificationUriComplete: https://openapi-generator.tech
          refreshTokenKept: true
          authenticationCallbackEndpoint: https://openapi-generator.tech
          apiSecret: apiSecret
          developerAuthenticationCallbackApiSecret: developerAuthenticationCallbackApiSecret
          accessTokenDuration: 3
          backchannelUserCodeParameterSupported: true
          supportedVerifiedClaims:
          - supportedVerifiedClaims
          - supportedVerifiedClaims
          clientsPerDeveloper: 5
          unauthorizedOnClientConfigSupported: true
          snsCredentials:
          - apiKey: apiKey
            sns: sns
            apiSecret: apiSecret
          - apiKey: apiKey
            sns: sns
            apiSecret: apiSecret
          directRevocationEndpointEnabled: true
          grantManagementActionRequired: true
          requestObjectAudienceChecked: true
          jwks: jwks
          tokenExpirationLinked: true
          supportedCustomClientMetadata:
          - supportedCustomClientMetadata
          - supportedCustomClientMetadata
          directAuthorizationEndpointEnabled: true
          pushedAuthReqEndpoint: https://openapi-generator.tech
          developerAuthenticationCallbackEndpoint: https://openapi-generator.tech
          tokenEndpoint: https://openapi-generator.tech
          supportedIntrospectionAuthMethods:
          - null
          - null
          supportedClaimTypes:
          - null
          - null
          mutualTlsValidatePkiCertChain: true
          scopeRequired: true
          policyUri: https://openapi-generator.tech
          userInfoEndpoint: https://openapi-generator.tech
          dcrScopeUsedAsRequestable: true
          registrationEndpoint: https://openapi-generator.tech
          deviceVerificationUri: https://openapi-generator.tech
          authenticationCallbackApiSecret: authenticationCallbackApiSecret
          requestObjectRequired: true
          backchannelAuthenticationEndpoint: https://openapi-generator.tech
          serviceOwnerNumber: 6
          authorizationSignatureKeyId: authorizationSignatureKeyId
          endSessionEndpoint: https://openapi-generator.tech
          grantManagementEndpoint: grantManagementEndpoint
          supportedUiLocales:
          - supportedUiLocales
          - supportedUiLocales
          nbfOptional: true
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          traditionalRequestObjectProcessingApplied: true
          backchannelBindingMessageRequiredInFapi: true
          pkceRequired: true
          claimShortcutRestrictive: true
          directIntrospectionEndpointEnabled: true
          hsks:
          - value: value
            key: key
          - value: value
            key: key
          modifiedAt: 2
          introspectionEndpoint: https://openapi-generator.tech
          supportedBackchannelTokenDeliveryModes:
          - null
          - null
          accessTokenType: accessTokenType
          refreshTokenDurationReset: true
          createdAt: 5
          loopbackRedirectionUriVariable: true
          tlsClientCertificateBoundAccessTokens: true
          userCodeCharset: null
          issSuppressed: true
          supportedVerificationMethods:
          - supportedVerificationMethods
          - supportedVerificationMethods
          serviceDocumentation: https://openapi-generator.tech
          revocationEndpoint: https://openapi-generator.tech
          hsmEnabled: true
          supportedDisplays:
          - null
          - null
          parRequired: true
          errorDescriptionOmitted: true
          refreshTokenDurationKept: true
          requestObjectEncryptionEncMatchRequired: true
          trustedRootCertificates:
          - trustedRootCertificates
          - trustedRootCertificates
          authorizationEndpoint: https://openapi-generator.tech
          supportedClaimLocales:
          - supportedClaimLocales
          - supportedClaimLocales
          requestObjectEncryptionAlgMatchRequired: true
          pkceS256Required: true
          tosUri: https://openapi-generator.tech
          userInfoSignatureKeyId: userInfoSignatureKeyId
          directUserInfoEndpointEnabled: true
          accessTokenSignatureKeyId: accessTokenSignatureKeyId
          directTokenEndpointEnabled: true
          mtlsEndpointAliases:
          - name: name
            uri: https://openapi-generator.tech
          - name: name
            uri: https://openapi-generator.tech
          description: description
          jwksUri: https://openapi-generator.tech
          pushedAuthReqDuration: 9
          supportedEvidence:
          - supportedEvidence
          - supportedEvidence
          supportedAcrs:
          - supportedAcrs
          - supportedAcrs
          errorUriOmitted: true
          directJwksEndpointEnabled: true
          supportedIdentityDocuments:
          - supportedIdentityDocuments
          - supportedIdentityDocuments
          supportedResponseTypes:
          - null
          - null
          clientIdAliasEnabled: true
          supportedTokenAuthMethods:
          - null
          - null
          allowableClockSkew: 7
          deviceAuthorizationEndpoint: https://openapi-generator.tech
          backchannelAuthReqIdDuration: 1
          supportedGrantTypes:
          - null
          - null
          supportedAuthorizationDetailsTypes:
          - supportedAuthorizationDetailsTypes
          - supportedAuthorizationDetailsTypes
          backchannelPollingInterval: 1
          serviceName: serviceName
          accessTokenSignAlg: null
          idTokenDuration: 4
          authenticationCallbackApiKey: authenticationCallbackApiKey
          frontChannelRequestObjectEncryptionRequired: true
          refreshTokenDuration: 2
          supportedRevocationAuthMethods:
          - null
          - null
          supportedSnses:
          - null
          - null
          supportedDeveloperSnses:
          - null
          - null
        - metadata:
          - value: value
            key: key
          - value: value
            key: key
          apiKey: 1
          supportedScopes:
          - name: name
            description: description
            attributes:
            - value: value
              key: key
            - value: value
              key: key
            defaultEntry: true
            descriptions:
            - tag: tag
              value: value
            - tag: tag
              value: value
          - name: name
            description: description
            attributes:
            - value: value
              key: key
            - value: value
              key: key
            defaultEntry: true
            descriptions:
            - tag: tag
              value: value
            - tag: tag
              value: value
          idTokenSignatureKeyId: idTokenSignatureKeyId
          singleAccessTokenPerSubject: true
          issuer: issuer
          dynamicRegistrationSupported: true
          number: 0
          supportedServiceProfiles:
          - null
          - null
          authorizationResponseDuration: 7
          supportedClaims:
          - supportedClaims
          - supportedClaims
          registrationManagementEndpoint: https://openapi-generator.tech
          missingClientIdAllowed: true
          userCodeLength: 7
          deviceFlowPollingInterval: 6
          developerSnsCredentials: developerSnsCredentials
          deviceFlowCodeDuration: 1
          supportedTrustFrameworks:
          - supportedTrustFrameworks
          - supportedTrustFrameworks
          developerAuthenticationCallbackApiKey: developerAuthenticationCallbackApiKey
          deviceVerificationUriComplete: https://openapi-generator.tech
          refreshTokenKept: true
          authenticationCallbackEndpoint: https://openapi-generator.tech
          apiSecret: apiSecret
          developerAuthenticationCallbackApiSecret: developerAuthenticationCallbackApiSecret
          accessTokenDuration: 3
          backchannelUserCodeParameterSupported: true
          supportedVerifiedClaims:
          - supportedVerifiedClaims
          - supportedVerifiedClaims
          clientsPerDeveloper: 5
          unauthorizedOnClientConfigSupported: true
          snsCredentials:
          - apiKey: apiKey
            sns: sns
            apiSecret: apiSecret
          - apiKey: apiKey
            sns: sns
            apiSecret: apiSecret
          directRevocationEndpointEnabled: true
          grantManagementActionRequired: true
          requestObjectAudienceChecked: true
          jwks: jwks
          tokenExpirationLinked: true
          supportedCustomClientMetadata:
          - supportedCustomClientMetadata
          - supportedCustomClientMetadata
          directAuthorizationEndpointEnabled: true
          pushedAuthReqEndpoint: https://openapi-generator.tech
          developerAuthenticationCallbackEndpoint: https://openapi-generator.tech
          tokenEndpoint: https://openapi-generator.tech
          supportedIntrospectionAuthMethods:
          - null
          - null
          supportedClaimTypes:
          - null
          - null
          mutualTlsValidatePkiCertChain: true
          scopeRequired: true
          policyUri: https://openapi-generator.tech
          userInfoEndpoint: https://openapi-generator.tech
          dcrScopeUsedAsRequestable: true
          registrationEndpoint: https://openapi-generator.tech
          deviceVerificationUri: https://openapi-generator.tech
          authenticationCallbackApiSecret: authenticationCallbackApiSecret
          requestObjectRequired: true
          backchannelAuthenticationEndpoint: https://openapi-generator.tech
          serviceOwnerNumber: 6
          authorizationSignatureKeyId: authorizationSignatureKeyId
          endSessionEndpoint: https://openapi-generator.tech
          grantManagementEndpoint: grantManagementEndpoint
          supportedUiLocales:
          - supportedUiLocales
          - supportedUiLocales
          nbfOptional: true
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          traditionalRequestObjectProcessingApplied: true
          backchannelBindingMessageRequiredInFapi: true
          pkceRequired: true
          claimShortcutRestrictive: true
          directIntrospectionEndpointEnabled: true
          hsks:
          - value: value
            key: key
          - value: value
            key: key
          modifiedAt: 2
          introspectionEndpoint: https://openapi-generator.tech
          supportedBackchannelTokenDeliveryModes:
          - null
          - null
          accessTokenType: accessTokenType
          refreshTokenDurationReset: true
          createdAt: 5
          loopbackRedirectionUriVariable: true
          tlsClientCertificateBoundAccessTokens: true
          userCodeCharset: null
          issSuppressed: true
          supportedVerificationMethods:
          - supportedVerificationMethods
          - supportedVerificationMethods
          serviceDocumentation: https://openapi-generator.tech
          revocationEndpoint: https://openapi-generator.tech
          hsmEnabled: true
          supportedDisplays:
          - null
          - null
          parRequired: true
          errorDescriptionOmitted: true
          refreshTokenDurationKept: true
          requestObjectEncryptionEncMatchRequired: true
          trustedRootCertificates:
          - trustedRootCertificates
          - trustedRootCertificates
          authorizationEndpoint: https://openapi-generator.tech
          supportedClaimLocales:
          - supportedClaimLocales
          - supportedClaimLocales
          requestObjectEncryptionAlgMatchRequired: true
          pkceS256Required: true
          tosUri: https://openapi-generator.tech
          userInfoSignatureKeyId: userInfoSignatureKeyId
          directUserInfoEndpointEnabled: true
          accessTokenSignatureKeyId: accessTokenSignatureKeyId
          directTokenEndpointEnabled: true
          mtlsEndpointAliases:
          - name: name
            uri: https://openapi-generator.tech
          - name: name
            uri: https://openapi-generator.tech
          description: description
          jwksUri: https://openapi-generator.tech
          pushedAuthReqDuration: 9
          supportedEvidence:
          - supportedEvidence
          - supportedEvidence
          supportedAcrs:
          - supportedAcrs
          - supportedAcrs
          errorUriOmitted: true
          directJwksEndpointEnabled: true
          supportedIdentityDocuments:
          - supportedIdentityDocuments
          - supportedIdentityDocuments
          supportedResponseTypes:
          - null
          - null
          clientIdAliasEnabled: true
          supportedTokenAuthMethods:
          - null
          - null
          allowableClockSkew: 7
          deviceAuthorizationEndpoint: https://openapi-generator.tech
          backchannelAuthReqIdDuration: 1
          supportedGrantTypes:
          - null
          - null
          supportedAuthorizationDetailsTypes:
          - supportedAuthorizationDetailsTypes
          - supportedAuthorizationDetailsTypes
          backchannelPollingInterval: 1
          serviceName: serviceName
          accessTokenSignAlg: null
          idTokenDuration: 4
          authenticationCallbackApiKey: authenticationCallbackApiKey
          frontChannelRequestObjectEncryptionRequired: true
          refreshTokenDuration: 2
          supportedRevocationAuthMethods:
          - null
          - null
          supportedSnses:
          - null
          - null
          supportedDeveloperSnses:
          - null
          - null
        totalCount: 1
      properties:
        start:
          description: |
            Start index (inclusive) of the result set. The default value is 0. Must not be a negative
            number.
          format: int32
          type: integer
        end:
          description: |
            Start index (inclusive) of the result set. The default value is 0. Must not be a negative
            number.
          format: int32
          type: integer
        totalCount:
          description: |
            Total number of services owned by the service owner. This doesn't mean the number of services
            contained in the response.
          format: int32
          type: integer
        services:
          description: |
            An array of services.
          items:
            $ref: '#/components/schemas/Service'
          type: array
      type: object
    client_get_list_response:
      example:
        clients:
        - serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        - serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        start: 0
        developer: developer
        end: 6
        totalCount: 1
      properties:
        developer:
          description: "The developer of the client applications. If the request did\
            \ not contain `developer` request\nparameter, this property is set to\
            \ `null`.\n"
          type: string
        start:
          description: |
            Start index (inclusive) of the result set of the query.
          format: int32
          type: integer
        end:
          description: |
            End index (exclusive) of the result set of the query.
          format: int32
          type: integer
        totalCount:
          description: |
            Total number of clients that belong to the service. This doesn't mean the number of clients
            contained in the response.
          format: int32
          type: integer
        clients:
          description: |
            An array of clients.
          items:
            $ref: '#/components/schemas/Client'
          type: array
      type: object
    client_secret_refresh_response:
      example:
        newClientSecret: newClientSecret
        resultCode: resultCode
        resultMessage: resultMessage
        oldClientSecret: oldClientSecret
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        newClientSecret:
          description: |
            The new client secret.
          type: string
        oldClientSecret:
          description: |
            The old client secret.
          type: string
      type: object
    client_secret_update_request:
      properties:
        clientSecret:
          description: "The new value of the client secret. Valid characters for a\
            \ client secret are `A-Z`, `a-z`, `0-9`,\n`-`, and `_`. The maximum length\
            \ of a client secret is 86."
          type: string
      required:
      - clientSecret
      type: object
    client_secret_update_response:
      example:
        newClientSecret: newClientSecret
        resultCode: resultCode
        resultMessage: resultMessage
        oldClientSecret: oldClientSecret
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        newClientSecret:
          description: |
            The new client secret.
          type: string
        oldClientSecret:
          description: |
            The old client secret.
          type: string
      type: object
    client_authorization_get_list_response:
      example:
        clients:
        - serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        - serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        subject: subject
        start: 0
        end: 6
        developer: developer
        totalCount: 1
      properties:
        start:
          description: |
            Start index of search results (inclusive).
          format: int32
          type: integer
        end:
          description: |
            End index of search results (exclusive).
          format: int32
          type: integer
        developer:
          description: |
            Unique ID of a client developer.
          type: string
        subject:
          description: |
            Unique user ID of an end-user.
          type: string
        totalCount:
          description: |
            Unique ID of a client developer.
          format: int32
          type: integer
        clients:
          description: |
            An array of clients.
          items:
            $ref: '#/components/schemas/Client'
          type: array
      type: object
    client_authorization_update_request:
      properties:
        subject:
          description: |
            The subject (= unique identifier) of the end-user who has granted authorization to the client
            application.
          type: string
        scopes:
          description: "An array of new scopes. Optional. If a non-null value is given,\
            \ the new scopes are set to all\nexisting access tokens. If an API call\
            \ is made using `\"Content-Type: application/x-www-form-urlencoded\"`,\n\
            scope names listed in this request parameter should be delimited by spaces\
            \ (after form encoding,\nspaces are converted to `+`)."
          items:
            type: string
          type: array
      required:
      - subject
      type: object
    client_authorization_update_response:
      example:
        resultCode: resultCode
        resultMessage: resultMessage
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
      type: object
    client_authorization_delete_response:
      example:
        resultCode: resultCode
        resultMessage: resultMessage
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
      type: object
    client_granted_scopes_get_response:
      example:
        clientId: 6.027456183070403
        mergedGrantedScopes:
        - mergedGrantedScopes
        - mergedGrantedScopes
        latestGrantedScopes:
        - latestGrantedScopes
        - latestGrantedScopes
        subject: subject
        modifiedAt: 1.4658129805029452
        resultCode: resultCode
        resultMessage: resultMessage
        serviceApiKey: 0.8008281904610115
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        serviceApiKey:
          description: The API key of the service.
          type: number
        clientId:
          description: The client ID.
          type: number
        subject:
          description: The subject (= unique identifier) of the user who has granted
            authorization to the client.
          type: string
        latestGrantedScopes:
          description: "The scopes granted to the client application by the last authorization\
            \ process by the user (who\nis identified by the subject). `null` means\
            \ that there is no record about granted scopes. An empty\narray means\
            \ that there exists a record about granted scopes but no scope has been\
            \ granted to the\nclient application. If the returned array holds some\
            \ elements, they are the scopes granted to\nthe client application by\
            \ the last authorization process.\n"
          items:
            type: string
          type: array
        mergedGrantedScopes:
          description: |
            The scopes granted to the client application by all the past authorization processes. Note that
            revoked scopes are not included.
          items:
            type: string
          type: array
        modifiedAt:
          description: The timestamp in milliseconds since Unix epoch at which this
            record was modified.
          type: number
      type: object
    authorization_request:
      properties:
        parameters:
          description: |-
            OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
            the authorization server implementation received from the client application.

            The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
            or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
            the client application is `POST`.
          type: string
      required:
      - parameters
      type: object
    authorization_response:
      example:
        lowestPrompt: null
        purpose: purpose
        acrEssential: true
        subject: subject
        resultCode: resultCode
        acrs:
        - acrs
        - acrs
        userInfoClaims: userInfoClaims
        loginHint: loginHint
        action: INTERNAL_SERVER_ERROR
        client:
          serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        requestObjectPayload: requestObjectPayload
        prompts:
        - null
        - null
        idTokenClaims: idTokenClaims
        uiLocales:
        - uiLocales
        - uiLocales
        ticket: ticket
        display: null
        resources: resources
        resultMessage: resultMessage
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        claimsLocales:
        - claimsLocales
        - claimsLocales
        dynamicScopes:
        - name: name
          value: value
        - name: name
          value: value
        maxAge: 0
        service:
          metadata:
          - value: value
            key: key
          - value: value
            key: key
          apiKey: 1
          supportedScopes:
          - name: name
            description: description
            attributes:
            - value: value
              key: key
            - value: value
              key: key
            defaultEntry: true
            descriptions:
            - tag: tag
              value: value
            - tag: tag
              value: value
          - name: name
            description: description
            attributes:
            - value: value
              key: key
            - value: value
              key: key
            defaultEntry: true
            descriptions:
            - tag: tag
              value: value
            - tag: tag
              value: value
          idTokenSignatureKeyId: idTokenSignatureKeyId
          singleAccessTokenPerSubject: true
          issuer: issuer
          dynamicRegistrationSupported: true
          number: 0
          supportedServiceProfiles:
          - null
          - null
          authorizationResponseDuration: 7
          supportedClaims:
          - supportedClaims
          - supportedClaims
          registrationManagementEndpoint: https://openapi-generator.tech
          missingClientIdAllowed: true
          userCodeLength: 7
          deviceFlowPollingInterval: 6
          developerSnsCredentials: developerSnsCredentials
          deviceFlowCodeDuration: 1
          supportedTrustFrameworks:
          - supportedTrustFrameworks
          - supportedTrustFrameworks
          developerAuthenticationCallbackApiKey: developerAuthenticationCallbackApiKey
          deviceVerificationUriComplete: https://openapi-generator.tech
          refreshTokenKept: true
          authenticationCallbackEndpoint: https://openapi-generator.tech
          apiSecret: apiSecret
          developerAuthenticationCallbackApiSecret: developerAuthenticationCallbackApiSecret
          accessTokenDuration: 3
          backchannelUserCodeParameterSupported: true
          supportedVerifiedClaims:
          - supportedVerifiedClaims
          - supportedVerifiedClaims
          clientsPerDeveloper: 5
          unauthorizedOnClientConfigSupported: true
          snsCredentials:
          - apiKey: apiKey
            sns: sns
            apiSecret: apiSecret
          - apiKey: apiKey
            sns: sns
            apiSecret: apiSecret
          directRevocationEndpointEnabled: true
          grantManagementActionRequired: true
          requestObjectAudienceChecked: true
          jwks: jwks
          tokenExpirationLinked: true
          supportedCustomClientMetadata:
          - supportedCustomClientMetadata
          - supportedCustomClientMetadata
          directAuthorizationEndpointEnabled: true
          pushedAuthReqEndpoint: https://openapi-generator.tech
          developerAuthenticationCallbackEndpoint: https://openapi-generator.tech
          tokenEndpoint: https://openapi-generator.tech
          supportedIntrospectionAuthMethods:
          - null
          - null
          supportedClaimTypes:
          - null
          - null
          mutualTlsValidatePkiCertChain: true
          scopeRequired: true
          policyUri: https://openapi-generator.tech
          userInfoEndpoint: https://openapi-generator.tech
          dcrScopeUsedAsRequestable: true
          registrationEndpoint: https://openapi-generator.tech
          deviceVerificationUri: https://openapi-generator.tech
          authenticationCallbackApiSecret: authenticationCallbackApiSecret
          requestObjectRequired: true
          backchannelAuthenticationEndpoint: https://openapi-generator.tech
          serviceOwnerNumber: 6
          authorizationSignatureKeyId: authorizationSignatureKeyId
          endSessionEndpoint: https://openapi-generator.tech
          grantManagementEndpoint: grantManagementEndpoint
          supportedUiLocales:
          - supportedUiLocales
          - supportedUiLocales
          nbfOptional: true
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          traditionalRequestObjectProcessingApplied: true
          backchannelBindingMessageRequiredInFapi: true
          pkceRequired: true
          claimShortcutRestrictive: true
          directIntrospectionEndpointEnabled: true
          hsks:
          - value: value
            key: key
          - value: value
            key: key
          modifiedAt: 2
          introspectionEndpoint: https://openapi-generator.tech
          supportedBackchannelTokenDeliveryModes:
          - null
          - null
          accessTokenType: accessTokenType
          refreshTokenDurationReset: true
          createdAt: 5
          loopbackRedirectionUriVariable: true
          tlsClientCertificateBoundAccessTokens: true
          userCodeCharset: null
          issSuppressed: true
          supportedVerificationMethods:
          - supportedVerificationMethods
          - supportedVerificationMethods
          serviceDocumentation: https://openapi-generator.tech
          revocationEndpoint: https://openapi-generator.tech
          hsmEnabled: true
          supportedDisplays:
          - null
          - null
          parRequired: true
          errorDescriptionOmitted: true
          refreshTokenDurationKept: true
          requestObjectEncryptionEncMatchRequired: true
          trustedRootCertificates:
          - trustedRootCertificates
          - trustedRootCertificates
          authorizationEndpoint: https://openapi-generator.tech
          supportedClaimLocales:
          - supportedClaimLocales
          - supportedClaimLocales
          requestObjectEncryptionAlgMatchRequired: true
          pkceS256Required: true
          tosUri: https://openapi-generator.tech
          userInfoSignatureKeyId: userInfoSignatureKeyId
          directUserInfoEndpointEnabled: true
          accessTokenSignatureKeyId: accessTokenSignatureKeyId
          directTokenEndpointEnabled: true
          mtlsEndpointAliases:
          - name: name
            uri: https://openapi-generator.tech
          - name: name
            uri: https://openapi-generator.tech
          description: description
          jwksUri: https://openapi-generator.tech
          pushedAuthReqDuration: 9
          supportedEvidence:
          - supportedEvidence
          - supportedEvidence
          supportedAcrs:
          - supportedAcrs
          - supportedAcrs
          errorUriOmitted: true
          directJwksEndpointEnabled: true
          supportedIdentityDocuments:
          - supportedIdentityDocuments
          - supportedIdentityDocuments
          supportedResponseTypes:
          - null
          - null
          clientIdAliasEnabled: true
          supportedTokenAuthMethods:
          - null
          - null
          allowableClockSkew: 7
          deviceAuthorizationEndpoint: https://openapi-generator.tech
          backchannelAuthReqIdDuration: 1
          supportedGrantTypes:
          - null
          - null
          supportedAuthorizationDetailsTypes:
          - supportedAuthorizationDetailsTypes
          - supportedAuthorizationDetailsTypes
          backchannelPollingInterval: 1
          serviceName: serviceName
          accessTokenSignAlg: null
          idTokenDuration: 4
          authenticationCallbackApiKey: authenticationCallbackApiKey
          frontChannelRequestObjectEncryptionRequired: true
          refreshTokenDuration: 2
          supportedRevocationAuthMethods:
          - null
          - null
          supportedSnses:
          - null
          - null
          supportedDeveloperSnses:
          - null
          - null
        claims:
        - claims
        - claims
        scopes:
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        clientIdAliasUsed: true
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - LOCATION
          - FORM
          - NO_INTERACTION
          - INTERACTION
          type: string
        client:
          $ref: '#/components/schemas/Client'
        display:
          $ref: '#/components/schemas/Display'
        maxAge:
          description: "The maximum authentication age. This value comes from `max_age`\
            \ request parameter, or `defaultMaxAge` configuration parameter\nof the\
            \ client application when the authorization request does not contain `max_age`\
            \ request parameter.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication\
            \ Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest),\
            \ max_age\"\nfor `max_age` request parameter, and see \"[OpenID Connect\
            \ Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\
            \ default_max_age\"\nfor `defaultMaxAge` configuration parameter.\n"
          format: int32
          type: integer
        service:
          $ref: '#/components/schemas/Service'
        scopes:
          description: "The scopes that the client application requests. This value\
            \ comes from `scope` request parameter.\nIf the request does not contain\
            \ `scope` parameter, this parameter is a list of scopes which are registered\
            \ as default.\nIf the authorization request does not have `scope` request\
            \ parameter and the service has not registered any default scope,\nthe\
            \ value of this parameter is `null`.\n\nIt is ensured that scopes listed\
            \ by this parameters are contained in the list of supported scopes which\
            \ are specified\nby `supportedScopes` configuration parameter of the service.\
            \ Unsupported scopes in the authorization request do not cause\nan error\
            \ and are just ignored.\n\nOpenID Connect defines some scope names which\
            \ need to be treated specially. The table below lists the special scope\
            \ names.\n\n| Name | Description |\n| --- | --- |\n| `openid` | This scope\
            \ must be contained in `scope` request parameter to promote an OAuth 2.0\
            \ authorization request to an OpenID Connect request. It is described\
            \ in \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest),\
            \ scope\". |\n| `profile` | This scope is used to request some claims\
            \ to be embedded in the ID token. The claims are `name`, `family_name`,\
            \ `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`,\
            \ `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and\
            \ `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting\
            \ Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).\
            \ |\n| `email` | This scope is used to request some claims to be embedded\
            \ in the ID token. The claims are `email` and `email_verified`. It is\
            \ described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using\
            \ Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).\
            \ |\n| `address` |  This scope is used to request `address` claim to be\
            \ embedded in the ID token. It is described in [OpenID Connect Core 1.0,\
            \ 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br>\
            \ The format of `address` claim is not a simple string. It is described\
            \ in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).\
            \  |\n| `phone` | This scope is used to request some claims to be embedded\
            \ in the ID token. The claims are `phone_number` and `phone_number_verified`.\
            \ It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims\
            \ using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).\
            \  |\n| `offline_access` | The following is an excerpt about this scope\
            \ from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).\
            \ <blockquote>This scope value requests that an OAuth 2.0 Refresh Token\
            \ be issued that can be used to obtain an Access Token that grants access\
            \ to the end-user's userinfo endpoint even when the end-user is not present\
            \ (not logged in).</blockquote>  |\n\nNote that, if `response_type` request\
            \ parameter does not contain code, `offline_acccess` scope is removed\
            \ from this list even\nwhen scope request parameter contains `offline_access`.\
            \ This behavior is a requirement written in\n[OpenID Connect Core 1.0,\
            \ 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).\n"
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        uiLocales:
          description: "The locales that the client application presented as candidates\
            \ to be used for UI.\nThis value comes from `ui_locales` request parameter.\
            \ The format of `ui_locales` is a space-separated list of language tag\
            \ values\ndefined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).\n\
            See \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest),\
            \ ui_locales\" for details.\n\nIt is ensured that locales listed by this\
            \ parameters are contained in the list of supported UI locales which are\
            \ specified\nby `supportedUiLocales` configuration parameter of the service.\
            \ Unsupported UI locales in the authorization request do not\ncause an\
            \ error and are just ignored.\n"
          items:
            type: string
          type: array
        claimsLocales:
          description: "End-user's preferred languages and scripts for claims. This\
            \ value comes from `claims_locales` request parameter.\nThe format of\
            \ `claims_locales` is a space-separated list of language tag values defined\
            \ in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).\nSee \"\
            [OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\"\
            \ for details.\n\nIt is ensured that locales listed by this parameters\
            \ are contained in the list of supported claim locales\nwhich are specified\
            \ by `supportedClaimsLocales` configuration parameter of the service.\n\
            Unsupported claim locales in the authorization request do not cause an\
            \ error and are just ignored.\n"
          items:
            type: string
          type: array
        claims:
          description: "The list of claims that the client application requests to\
            \ be embedded in the ID token.\nThe value comes from (1) `id_token` in\
            \ `claims` request parameter [1] and/or (2) special scopes (`profile`,\
            \ `email`, `address` and `phone`)\nwhich are expanded to claims.\n\nSee\
            \ [OpenID Connect Core 1.0, 5.5. Requesting Claims using the \"claims\"\
            \ Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)\n\
            for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4.\
            \ Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\n\
            for the special scopes.\n"
          items:
            type: string
          type: array
        acrEssential:
          description: "This boolean value indicates whether the authentication of\
            \ the end-user must be one of the ACRs (Authentication Context Class References)\
            \ listed in `acrs` parameter.\nThis parameter becomes `true` only when\
            \ (1) the authorization request contains `claims` request parameter and\
            \ (2) `acr` claim is in it, and (3) `essential` property of\nthe `acr`\
            \ claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the\
            \ \"acr\" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics)\
            \ for details.\n"
          type: boolean
        clientIdAliasUsed:
          description: |
            `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
            `false` if the value is the original numeric client ID.
          type: boolean
        acrs:
          description: "The list of ACRs (Authentication Context Class References)\
            \ one of which the client application requests to be satisfied for the\
            \ authentication of the end-user.\nThis value comes from `acr_values`\
            \ request parameter or `defaultAcrs` configuration parameter of the client\
            \ application.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication\
            \ Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest),\
            \ acr_values\" for `acr_values`\nrequest parameter, and see \"[OpenID\
            \ Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\n\
            default_acr_values\" for `defaultAcrs` configuration parameter.\n"
          items:
            type: string
          type: array
        subject:
          description: |
            The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
            The value comes from `sub` claim in `claims` request parameter.
          type: string
        loginHint:
          description: A hint about the login identifier of the end-user. The value
            comes from `login_hint` request parameter.
          type: string
        prompts:
          description: "The list of values of prompt request parameter. See \"[OpenID\
            \ Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest),\
            \ prompt\" for prompt request parameter."
          items:
            $ref: '#/components/schemas/Prompt'
          type: array
        lowestPrompt:
          $ref: '#/components/schemas/Prompt'
        requestObjectPayload:
          description: |
            The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
          type: string
        idTokenClaims:
          description: "The value of the `id_token` property in the claims request\
            \ parameter or in the claims property in a request object.\n\nA client\
            \ application may request certain claims be embedded in an ID token or\
            \ in a response from the userInfo endpoint.\nThere are several ways. Including\
            \ the `claims` request parameter and including the `claims` property in\
            \ a request object are such examples.\nIn both the cases, the value of\
            \ the `claims` parameter/property is JSON. Its format is described in\
            \ [5.5. Requesting Claims using the \"claims\"\nRequest Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).\n\
            \nThe following is an excerpt from the specification.\nYou can find `userinfo`\
            \ and `id_token` are top-level properties.\n\n```json\n{\n  \"userinfo\"\
            :\n  {\n    \"given_name\": { \"essential\": true },\n    \"nickname\"\
            : null,\n    \"email\": { \"essential\": true },\n    \"email_verified\"\
            : { \"essential\": true },\n    \"picture\": null,\n    \"http://example.info/claims/groups\"\
            : null\n  },\n  \"id_token\":\n  {\n    \"auth_time\": { \"essential\"\
            : true },\n    \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\"\
            \ ] }\n  }\n}\n```\n\nThis value of this property is the value of the\
            \ `id_token` property in JSON format.\nFor example, if the JSON above\
            \ is included in an authorization request, this property holds JSON equivalent\
            \ to the following.\n\n```json\n{\n  \"auth_time\": { \"essential\": true\
            \ },\n  \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\" ] }\n\
            }\n```\n\nNote that if a request object is given and it contains the `claims`\
            \ property and if the `claims` request parameter is also given,\nthis\
            \ property holds the former value.\n"
          type: string
        userInfoClaims:
          description: "The value of the `userinfo` property in the `claims` request\
            \ parameter or in the `claims` property in a request object.\n\nA client\
            \ application may request certain claims be embedded in an ID token or\
            \ in a response from the userInfo endpoint.\nThere are several ways. Including\
            \ the `claims` request parameter and including the `claims` property in\
            \ a request object are such examples.\nIn both the cases, the value of\
            \ the `claims` parameter/property is JSON. Its format is described in\
            \ [5.5. Requesting Claims using the \"claims\"\nRequest Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).\n\
            \nThe following is an excerpt from the specification. You can find `userinfo`\
            \ and `id_token` are top-level properties.\n\n```json\n{\n  \"userinfo\"\
            :\n  {\n    \"given_name\": { \"essential\": true },\n    \"nickname\"\
            : null,\n    \"email\": { \"essential\": true },\n    \"email_verified\"\
            : { \"essential\": true },\n    \"picture\": null,\n    \"http://example.info/claims/groups\"\
            : null\n  },\n  \"id_token\":\n  {\n    \"auth_time\": { \"essential\"\
            : true },\n    \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\"\
            \ ] }\n  }\n}\n````\n\nThe value of this property is the value of the\
            \ `userinfo` property in JSON format.\nFor example, if the JSON above\
            \ is included in an authorization request, this property holds JSON equivalent\
            \ to the following.\n\n```json\n{\n  \"given_name\": { \"essential\":\
            \ true },\n  \"nickname\": null,\n  \"email\": { \"essential\": true },\n\
            \  \"email_verified\": { \"essential\": true },\n  \"picture\": null,\n\
            \  \"http://example.info/claims/groups\": null\n}\n```\n\nNote that if\
            \ a request object is given and it contains the `claims` property and\
            \ if the `claims` request parameter is also given,\nthe value of this\
            \ property holds the former value.\n"
          type: string
        resources:
          description: "The resources specified by the `resource` request parameters\
            \ or by the `resource` property in the request object.\nIf both are given,\
            \ the values in the request object should be set. See \"Resource Indicators\
            \ for OAuth 2.0\" for details.\n"
          type: string
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        purpose:
          description: "The `purpose` request parameter is defined in [9. Transaction-specific\
            \ Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)\n\
            of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\
            \ as follows:\n\n> purpose: OPTIONAL. String describing the purpose for\
            \ obtaining certain user data from the OP. The purpose MUST NOT be shorter\
            \ than 3 characters and MUST NOT be longer than 300 characters.\nIf these\
            \ rules are violated, the authentication request MUST fail and the OP\
            \ returns an error invalid_request to the RP.\n"
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
        ticket:
          description: |
            A ticket issued by Authlete to the service implementation. This is needed when the service
            implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
            API.
          type: string
        dynamicScopes:
          description: |
            The dynamic scopes which the client application requested by the scope request parameter.
          items:
            $ref: '#/components/schemas/dynamic_scope'
          type: array
      type: object
    authorization_fail_request:
      properties:
        ticket:
          description: |
            The ticket issued from Authlete `/auth/authorization` API.
          type: string
        reason:
          description: "The reason of the failure of the authorization request.\n\
            For more details, see [NO_INTERACTION] in the description of `/auth/authorization`\
            \ API.\n"
          enum:
          - UNKNOWN
          - NOT_LOGGED_IN
          - MAX_AGE_NOT_SUPPORTED
          - EXCEEDS_MAX_AGE
          - DIFFERENT_SUBJECT
          - ACR_NOT_SATISFIED
          - DENIED
          - SERVER_ERROR
          - NOT_AUTHENTICATED
          - ACCOUNT_SELECTION_REQUIRED
          - CONSENT_REQUIRED
          - INTERACTION_REQUIRED
          - INVALID_TARGET
          type: string
        description:
          description: The custom description about the authorization failure.
          type: string
      required:
      - reason
      - ticket
      type: object
    authorization_fail_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - LOCATION
          - FORM
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
      type: object
    authorization_issue_request:
      properties:
        ticket:
          description: |
            The ticket issued from Authlete `/auth/authorization` API.
          type: string
        subject:
          description: |
            The subject (= a user account managed by the service) who has granted authorization to the client application.
          type: string
        authTime:
          description: |
            The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
          type: string
        acr:
          description: The Authentication Context Class Reference performed for the
            end-user authentication.
          type: string
        claims:
          description: "The claims of the end-user (= pieces of information about\
            \ the end-user) in JSON format.\nSee [OpenID Connect Core 1.0, 5.1. Standard\
            \ Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\
            \ for details about the format.\n"
          type: string
        properties:
          description: Extra properties to associate with an access token and/or an
            authorization code.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        scopes:
          description: "Scopes to associate with an access token and/or an authorization\
            \ code.\nIf a non-empty string array is given, it replaces the scopes\
            \ specified by the original authorization request.\n"
          items:
            type: string
          type: array
        sub:
          description: "The value of the `sub` claim to embed in an ID token. If this\
            \ request parameter is `null` or empty,\nthe value of the `subject` request\
            \ parameter is used as the value of the `sub` claim.\n"
          type: string
        idtHeaderParams:
          description: |
            JSON that represents additional JWS header parameters for ID tokens that may be issued based on
            the authorization request.
          type: string
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
      required:
      - subject
      - ticket
      type: object
    authorization_issue_response:
      example:
        jwtAccessToken: jwtAccessToken
        accessTokenExpiresAt: 0
        authorizationCode: authorizationCode
        resultCode: resultCode
        idToken: idToken
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        accessToken: accessToken
        accessTokenDuration: 6
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - LOCATION
          - FORM
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
        accessToken:
          description: |
            The newly issued access token. Note that an access token is issued from an authorization endpoint only
            when `response_type` contains token.
          type: string
        accessTokenExpiresAt:
          description: |
            The datetime at which the newly issued access token will expire. The value is represented in milliseconds
            since the Unix epoch (1970-01-01).
          format: int64
          type: integer
        accessTokenDuration:
          description: |
            The duration of the newly issued access token in seconds.
          format: int64
          type: integer
        idToken:
          description: |
            The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
            when `response_type` contains `id_token`.
          type: string
        authorizationCode:
          description: |
            The newly issued authorization code. Note that an authorization code is issued only
            when `response_type` contains code.
          type: string
        jwtAccessToken:
          description: "The newly issued access token in JWT format. If the service\
            \ is not configured to issue JWT-based access tokens,\nthis property is\
            \ always set to `null`.\n"
          type: string
      type: object
    pushed_auth_req_request:
      properties:
        parameters:
          description: |
            The pushed authorization request body received from the client application.

            The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
            the client application.
          type: string
        clientId:
          description: |
            The client ID extracted from `Authorization` header of the pushed request from the client application.
          type: string
        clientSecret:
          description: |
            The client secret extracted from `Authorization` header of the pushed authorization request from the client application.
          type: string
        clientCertificate:
          description: The client certificate from the MTLS connection to pushed authorization
            endpoint from the client application.
          type: string
        clientCertificatePath:
          description: |
            The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
          type: string
      required:
      - parameters
      type: object
    pushed_auth_req_response:
      example:
        resultCode: resultCode
        action: CREATED
        requestUri: requestUri
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take. Any other value other than "CREATED" should be handled as
            unsuccessful result.
          enum:
          - CREATED
          - BAD_REQUEST
          - UNAUTHORIZED
          - FORBIDDEN
          - PAYLOAD_TOO_LARGE
          - INTERNAL_SERVER_ERROR
          type: string
        requestUri:
          description: |
            The request_uri created to the client to be used as request_uri on the authorize call.
          type: string
        responseContent:
          description: |-
            The content that the authorization server implementation is to return to the client
            application.
          type: string
      type: object
    token_request:
      properties:
        parameters:
          description: |
            OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
            implementation received from the client application.

            The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
            the client application.
          type: string
        clientId:
          description: "The client ID extracted from `Authorization` header of the\
            \ token request from the client application.\n\nIf the token endpoint\
            \ of the authorization server implementation supports basic authentication\
            \ as\na means of client authentication, and the request from the client\
            \ application contained its client ID\nin `Authorization` header, the\
            \ value should be extracted and set to this parameter.\n"
          type: string
        clientSecret:
          description: "The client secret extracted from `Authorization` header of\
            \ the token request from the client application.\n\nIf the token endpoint\
            \ of the authorization server implementation supports basic authentication\
            \ as a means of\nclient authentication, and the request from the client\
            \ application contained its client secret in `Authorization` header,\n\
            the value should be extracted and set to this parameter.\n"
          type: string
        clientCertificate:
          description: The client certificate from the MTLS of the token request from
            the client application.
          type: string
        clientCertificatePath:
          description: |
            The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
          type: string
        properties:
          description: "Extra properties to associate with an access token. See [Extra\
            \ Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)\n\
            for details.\n"
          type: string
        dpop:
          description: "`DPoP` header presented by the client during the request to\
            \ the token endpoint.\n\nThe header contains a signed JWT which includes\
            \ the public key that is paired with the private key used to sign the\
            \ JWT.\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application\
            \ Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\n\
            for details.\n"
          type: string
        htm:
          description: "HTTP method of the token request. This field is used to validate\
            \ the `DPoP` header.\n\nIn normal cases, the value is `POST`. When this\
            \ parameter is omitted, `POST` is used as the default value.\nSee [OAuth\
            \ 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\n\
            for details.\n"
          type: string
        htu:
          description: "URL of the token endpoint. This field is used to validate\
            \ the `DPoP` header.\n\nIf this parameter is omitted, the `tokenEndpoint`\
            \ property of the Service is used as the default value.\nSee [OAuth 2.0\
            \ Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\n\
            for details."
          type: string
      required:
      - parameters
      type: object
    token_response:
      example:
        subject: subject
        resultCode: resultCode
        clientIdAlias: clientIdAlias
        jwtAccessToken: jwtAccessToken
        password: password
        clientAuthMethod: clientAuthMethod
        action: INTERNAL_SERVER_ERROR
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientId: 5
        ticket: ticket
        accessTokenExpiresAt: 0
        resources:
        - resources
        - resources
        accessTokenResources:
        - accessTokenResources
        - accessTokenResources
        resultMessage: resultMessage
        accessToken: accessToken
        accessTokenDuration: 6
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        refreshTokenExpiresAt: 1
        refreshTokenDuration: 5
        idToken: idToken
        clientIdAliasUsed: true
        scopes:
        - scopes
        - scopes
        grantType: grantType
        responseContent: responseContent
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
        username: username
        refreshToken: refreshToken
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - INVALID_CLIENT
          - BAD_REQUEST
          - PASSWORD
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
        username:
          description: "The value of `username` request parameter in the token request.\n\
            The client application must specify username when it uses [Resource Owner\
            \ Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).\n\
            In other words, when the value of `grant_type` request parameter is `password`,\
            \ `username` request parameter must come along.\n\nThis parameter has\
            \ a value only if the value of `grant_type` request parameter is `password`\
            \ and the token request is valid.\n"
          type: string
        password:
          description: "The value of `password` request parameter in the token request.\n\
            The client application must specify password when it uses [Resource Owner\
            \ Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).\n\
            In other words, when the value of `grant_type` request parameter is `password`,\
            \ `password` request parameter must come along.\n\nThis parameter has\
            \ a value only if the value of `grant_type` request parameter is `password`\
            \ and the token request is valid.\n"
          type: string
        ticket:
          description: |
            The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.

            This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
          type: string
        accessToken:
          description: The newly issued access token.
          type: string
        accessTokenExpiresAt:
          description: |
            The datetime at which the newly issued access token will expire.
            The value is represented in milliseconds since the Unix epoch (1970-01-01).
          format: int64
          type: integer
        accessTokenDuration:
          description: The duration of the newly issued access token in seconds.
          format: int64
          type: integer
        refreshToken:
          description: The newly issued refresh token.
          type: string
        refreshTokenExpiresAt:
          description: |
            The datetime at which the newly issued refresh token will expire.
            The value is represented in milliseconds since the Unix epoch (1970-01-01).
          format: int64
          type: integer
        refreshTokenDuration:
          description: The duration of the newly issued refresh token in seconds.
          format: int64
          type: integer
        idToken:
          description: |
            The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
            of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
          type: string
        grantType:
          description: The grant type of the token request.
          type: string
        clientId:
          description: The client ID.
          format: int64
          type: integer
        clientIdAlias:
          description: "The client ID alias when the token request was made. If the\
            \ client did not have an alias, this parameter is `null`.\nAlso, if the\
            \ token request was invalid and it failed to identify a client, this parameter\
            \ is `null`.\n"
          type: string
        clientIdAliasUsed:
          description: |
            The flag which indicates whether the client ID alias was used when the token request was made.
            `true` if the client ID alias was used when the token request was made.
          type: boolean
        subject:
          description: "The subject (= resource owner's ID) of the access token.\n\
            Even if an access token has been issued by the call of `/api/auth/token`\
            \ API, this parameter is `null` if the flow of the token request was\n\
            [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4)\
            \ (`grant_type=client_credentials`) because it means the access token\n\
            is not associated with any specific end-user.\n"
          type: string
        scopes:
          description: The scopes covered by the access token.
          items:
            type: string
          type: array
        properties:
          description: |
            The extra properties associated with the access token.
            This parameter is `null` when no extra property is associated with the issued access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        jwtAccessToken:
          description: "The newly issued access token in JWT format. If the authorization\
            \ server is configured\nto issue JWT-based access tokens (= if the service's\
            \ `accessTokenSignAlg` value is a\nnon-null value), a JWT-based access\
            \ token is issued along with the original random-string\none.\n"
          type: string
        resources:
          description: |
            The resources specified by the `resource` request parameters in the token request.
            See "Resource Indicators for OAuth 2.0" for details.
          items:
            type: string
          type: array
        accessTokenResources:
          description: |
            The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAuthMethod:
          description: |
            The client authentication method that was performed at the token endpoint.
          type: string
      type: object
    token_fail_request:
      properties:
        ticket:
          description: |
            The ticket issued from Authlete `/auth/token` API.
          type: string
        reason:
          description: The reason of the failure of the token request.
          enum:
          - UNKNOWN
          - INVALID_RESOURCE_OWNER_CREDENTIALS
          - INVALID_TARGET
          type: string
      required:
      - reason
      - ticket
      type: object
    token_fail_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter. See description for details.
          type: string
      type: object
    token_issue_request:
      properties:
        ticket:
          description: |
            The ticket issued from Authlete `/auth/token` API.
          type: string
        subject:
          description: |
            The subject (= unique identifier) of the authenticated user.
          type: string
        properties:
          description: "Extra properties to associate with a newly created access\
            \ token. Note that properties parameter is accepted only\nwhen `Content-Type`\
            \ of the request is `application/json`, so don't use `application/x-www-form-urlencoded`\n\
            if you want to specify properties."
          items:
            $ref: '#/components/schemas/Property'
          type: array
      required:
      - subject
      - ticket
      type: object
    token_issue_response:
      example:
        clientId: 5
        accessTokenExpiresAt: 0
        subject: subject
        resultCode: resultCode
        accessTokenResources:
        - accessTokenResources
        - accessTokenResources
        resultMessage: resultMessage
        accessToken: accessToken
        clientIdAlias: clientIdAlias
        accessTokenDuration: 6
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        jwtAccessToken: jwtAccessToken
        refreshTokenExpiresAt: 1
        refreshTokenDuration: 5
        action: INTERNAL_SERVER_ERROR
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientIdAliasUsed: true
        scopes:
        - scopes
        - scopes
        responseContent: responseContent
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
        username: username
        refreshToken: refreshToken
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format is JSON.
          type: string
        username:
          description: "The value of `username` request parameter in the token request.\n\
            The client application must specify username when it uses [Resource Owner\
            \ Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).\n\
            In other words, when the value of `grant_type` request parameter is `password`,\
            \ `username` request parameter must come along.\n\nThis parameter has\
            \ a value only if the value of `grant_type` request parameter is `password`\
            \ and the token request is valid.\n"
          type: string
        accessToken:
          description: The newly issued access token. This parameter is a non-null
            value only when the value of `action` parameter is `OK`.
          type: string
        accessTokenExpiresAt:
          description: |
            The datetime at which the newly issued access token will expire.
            The value is represented in milliseconds since the Unix epoch (1970-01-01).
          format: int64
          type: integer
        accessTokenDuration:
          description: The duration of the newly issued access token in seconds.
          format: int64
          type: integer
        refreshToken:
          description: "The refresh token. This parameter is a non-null value only\
            \ when `action` is `OK` and the service supports the refresh token flow.\n\
            If `refreshTokenKept` is set to `false`, a new refresh token is issued\
            \ and the old refresh token used in the refresh token flow\nis invalidated.\
            \ On the contrary, if `refreshTokenKept` is set to `true`, the refresh\
            \ token itself is not refreshed.\n"
          type: string
        refreshTokenExpiresAt:
          description: |
            The datetime at which the newly issued refresh token will expire.
            The value is represented in milliseconds since the Unix epoch (1970-01-01).
          format: int64
          type: integer
        refreshTokenDuration:
          description: The duration of the newly issued refresh token in seconds.
          format: int64
          type: integer
        clientId:
          description: The client ID.
          format: int64
          type: integer
        clientIdAlias:
          description: "The client ID alias. If the client did not have an alias,\
            \ this parameter is `null`.\n"
          type: string
        clientIdAliasUsed:
          description: |
            The flag which indicates whether the client ID alias was used when the token request was made.
            `true` if the client ID alias was used when the token request was made.
          type: boolean
        subject:
          description: "The subject (= resource owner's ID) of the access token.\n\
            Even if an access token has been issued by calling `/api/auth/token` API,\
            \ this parameter is `null` if the flow of the token request was\n[Client\
            \ Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4)\
            \ (`grant_type=client_credentials`) because it means\nthe access token\
            \ is not associated with any specific end-user.\n"
          type: string
        scopes:
          description: The scopes covered by the access token.
          items:
            type: string
          type: array
        properties:
          description: |
            The extra properties associated with the access token.
            This parameter is `null` when no extra property is associated with the issued access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        jwtAccessToken:
          description: "The newly issued access token in JWT format. If the authorization\
            \ server is configured to issue JWT-based access tokens\n(= if the service's\
            \ `accessTokenSignAlg` value is a non-null value), a JWT-based access\
            \ token is issued along with the\noriginal random-string one.\n"
          type: string
        accessTokenResources:
          description: |
            The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
      type: object
    introspection_request:
      properties:
        token:
          description: An access token to introspect.
          type: string
        scopes:
          description: "A string array listing names of scopes which the caller (=\
            \ a protected resource endpoint of the\nservice) requires. When the content\
            \ type of the request from the service is `application/x-www-form-urlencoded`,\n\
            the format of `scopes` is a space-separated list of scope names.\n\nIf\
            \ this parameter is a non-empty array and if it contains a scope which\
            \ is not covered by the\naccess token,`action=FORBIDDEN` with `error=insufficient_scope`\
            \ is returned from Authlete.\n"
          items:
            type: string
          type: array
        subject:
          description: "A subject (= a user account managed by the service) whom the\
            \ caller (= a protected resource\nendpoint of the service) requires.\n\
            \nIf this parameter is not `null` and if the value does not match the\
            \ subject who is associated\nwith the access token, `action=FORBIDDEN`\
            \ with `error=invalid_request` is returned from Authlete.\n"
          type: string
        clientCertificate:
          description: "Client certificate in PEM format, used to validate binding\
            \ against access tokens using the TLS\nclient certificate confirmation\
            \ method.\n"
          type: string
        dpop:
          description: "`DPoP` header presented by the client during the request to\
            \ the resource server.\n\nThe header contains a signed JWT which includes\
            \ the public key that is paired with the private\nkey used to sign the\
            \ JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application\n\
            Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\
            \ for details.\n"
          type: string
        htm:
          description: "HTTP method of the request from the client to the protected\
            \ resource endpoint. This field is\nused to validate the `DPoP` header.\n\
            \nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application\
            \ Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\n\
            for details.\n"
          type: string
        htu:
          description: "URL of the protected resource endpoint. This field is used\
            \ to validate the `DPoP` header.\n\nSee [OAuth 2.0 Demonstration of Proof-of-Possession\
            \ at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\n\
            for details.\n"
          type: string
        resources:
          description: |
            The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
          items:
            type: string
          type: array
      required:
      - token
      type: object
    introspection_response:
      example:
        refreshable: true
        scopeDetails:
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        clientId: 0
        subject: subject
        resultCode: resultCode
        resources:
        - resources
        - resources
        accessTokenResources:
        - accessTokenResources
        - accessTokenResources
        resultMessage: resultMessage
        clientIdAlias: clientIdAlias
        expiresAt: 6
        existent: true
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        usable: true
        sufficient: true
        certificateThumbprint: certificateThumbprint
        action: INTERNAL_SERVER_ERROR
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientIdAliasUsed: true
        scopes:
        - scopes
        - scopes
        responseContent: responseContent
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - UNAUTHORIZED
          - FORBIDDEN
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
          type: string
        clientId:
          description: The client ID.
          format: int64
          type: integer
        clientIdAlias:
          description: "The client ID alias when the token request was made. If the\
            \ client did not have an alias, this parameter is `null`.\nAlso, if the\
            \ token request was invalid and it failed to identify a client, this parameter\
            \ is `null`.\n"
          type: string
        clientIdAliasUsed:
          description: |
            The flag which indicates whether the client ID alias was used when the token request was made.
            `true` if the client ID alias was used when the token request was made.
          type: boolean
        expiresAt:
          description: |
            The time at which the access token expires.
            The value is represented in milliseconds since the Unix epoch (1970-01-01).
          format: int64
          type: integer
        subject:
          description: "The subject who is associated with the access token.\nThe\
            \ value of this property is `null` if the access token was issued using\
            \ the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).\n"
          type: string
        scopes:
          description: |
            The scopes covered by the access token.
          items:
            type: string
          type: array
        existent:
          description: |
            `true` if the access token exists.
          type: boolean
        usable:
          description: |
            true` if the access token is usable (= exists and has not expired).
          type: boolean
        sufficient:
          description: |
            `true` if the access token exists.
          type: boolean
        refreshable:
          description: |
            `true` if the access token can be refreshed using the associated refresh token which had been issued
            along with the access token. `false` if the refresh token for the access token has expired or the access
            token has no associated refresh token.
          type: boolean
        properties:
          description: The extra properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        certificateThumbprint:
          description: |
            The client certificate thumbprint used to validate the access token.
          type: string
        resources:
          description: |
            The target resources. This represents the resources specified by the `resource` request parameters
            or by the `resource` property in the request object.

            See "Resource Indicators for OAuth 2.0" for details.
          items:
            type: string
          type: array
        accessTokenResources:
          description: "The target resources this proeprty holds may be the same as\
            \ or different from the ones `resource` property holds.\n\nIn some flows,\
            \ the initial request and the subsequent token request are sent to different\
            \ endpoints.\nExample flows are the Authorization Code Flow, the Refresh\
            \ Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.\n\
            In these flows, not only the initial request but also the subsequent token\
            \ request can include the `resource` request parameters.\nThe purpose\
            \ of the `resource` request parameters in the token request is to narrow\
            \ the range of the target resources from the original\nset of target resources\
            \ requested by the preceding initial request. If narrowing down is performed,\
            \ the target resources holded by the\n`resource` proeprty and the ones\
            \ holded by this property are different. This property holds the narrowed\
            \ set of target resources.\n\nSee \"Resource Indicators for OAuth 2.0\"\
            \ for details.\n"
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        scopeDetails:
          description: |
            The scopes property of this class is a list of scope names. The property does not hold information
            about scope attributes. This scopeDetails property was newly created to convey information about
            scope attributes.
          items:
            $ref: '#/components/schemas/Scope'
          type: array
      type: object
    standard_introspection_request:
      properties:
        parameters:
          description: "Request parameters which comply with the introspection request\
            \ defined\nin \"[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)\"\
            \ in\nRFC 7662.\n\nThe implementation of the introspection endpoint of\
            \ your authorization server will receive an\nHTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)]\
            \ request with parameters\nin the `application/x-www-form-urlencoded`\
            \ format. It is the entity body of the request that\nAuthlete's  `/api/auth/introspection/standard`\
            \ API expects as the value of `parameters`.\n"
          type: string
        withHiddenProperties:
          description: "Flag indicating whether to include hidden properties in the\
            \ output.\n\nAuthlete has a mechanism whereby to associate arbitrary key-value\
            \ pairs with an access token.\nEach key-value pair has a hidden attribute.\
            \ By default, key-value pairs whose hidden attribute\nis set to `true`\
            \ are not embedded in the standard introspection output.\n\nIf the `withHiddenProperties`\
            \ request parameter is given and its value is `true`, `/api/auth/introspection/standard\n\
            API includes all the associated key-value pairs into the output regardless\
            \ of the value of the\nhidden attribute."
          type: string
      required:
      - parameters
      type: object
    standard_introspection_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client
            application.
          type: string
      type: object
    revocation_request:
      properties:
        parameters:
          description: "OAuth 2.0 token revocation request parameters which are the\
            \ request parameters that the OAuth 2.0 token revocation endpoint\n([RFC\
            \ 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization\
            \ server implementation received from the\nclient application.\n\nThe\
            \ value of parameters is the entire entity body (which is formatted in\
            \ `application/x-www-form-urlencoded`) of the request\nfrom the client\
            \ application.\n"
          type: string
        clientId:
          description: "The client ID extracted from `Authorization` header of the\
            \ revocation request from the client application.\n\nIf the revocation\
            \ endpoint of the authorization server implementation supports Basic Authentication\n\
            as a means of client authentication, and the request from the client application\
            \ contains its client ID in\n`Authorization` header, the value should\
            \ be extracted and set to this parameter.\n"
          type: string
        clientSecret:
          description: "The client secret extracted from `Authorization` header of\
            \ the revocation request from the client application.\n\nIf the revocation\
            \ endpoint of the authorization server implementation supports basic authentication\
            \ as a means of\nclient authentication, and the request from the client\
            \ application contained its client secret in `Authorization` header,\n\
            the value should be extracted and set to this parameter.\n"
          type: string
        clientCertificate:
          description: |
            The client certificate used in the TLS connection between the client application and the revocation endpoint.
          type: string
        clientCertificatePath:
          description: The certificate path presented by the client during client
            authentication.
          type: string
      required:
      - parameters
      type: object
    revocation_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - INVALID_CLIENT
          - BAD_REQUEST
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
      type: object
    userinfo_request:
      properties:
        token:
          description: |
            An access token.
          type: string
        clientCertificate:
          description: "Client certificate used in the TLS connection established\
            \ between the client application and the userinfo endpoint.\n\nThe value\
            \ of this request parameter is referred to when the access token given\
            \ to the userinfo endpoint was bound to\na client certificate when it\
            \ was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound\
            \ Access Tokens]\n(https://datatracker.ietf.org/doc/rfc8705/) for details\
            \ about the specification of certificate-bound access tokens.\n"
          type: string
        dpop:
          description: "`DPoP` header presented by the client during the request to\
            \ the user info endpoint.\n\nThe header contains a signed JWT which includes\
            \ the public key that is paired with the private key used to sign the\
            \ JWT.\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application\
            \ Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\n\
            for details.\n"
          type: string
        htm:
          description: "HTTP method of the user info request. This field is used to\
            \ validate the DPoP header.\nIn normal cases, the value is either `GET`\
            \ or `POST`.\n"
          type: string
        htu:
          description: "URL of the user info endpoint. This field is used to validate\
            \ the DPoP header.\n\nIf this parameter is omitted, the `userInfoEndpoint`\
            \ property of the service is used as the default value.\nSee [OAuth 2.0\
            \ Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\n\
            for details."
          type: string
      required:
      - token
      type: object
    userinfo_response:
      example:
        clientId: clientId
        subject: subject
        resultCode: resultCode
        resultMessage: resultMessage
        clientIdAlias: clientIdAlias
        token: token
        userInfoClaims: userInfoClaims
        claims:
        - claims
        - claims
        action: INTERNAL_SERVER_ERROR
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientIdAliasUsed: true
        scopes:
        - scopes
        - scopes
        responseContent: responseContent
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - UNAUTHORIZED
          - FORBIDDEN
          - OK
          type: string
        claims:
          description: |
            The list of claims that the client application requests to be embedded in the ID token.
          items:
            type: string
          type: array
        clientId:
          description: |
            The ID of the client application which is associated with the access token.
          type: string
        clientIdAlias:
          description: |
            The client ID alias when the authorization request for the access token was made.
          type: string
        clientIdAliasUsed:
          description: |
            The flag which indicates whether the client ID alias was used when the authorization
            request for the access token was made.
          type: boolean
        responseContent:
          description: |
            The content that the authorization server implementation can use as the value of `WWW-Authenticate`
            header on errors.
          type: string
        scopes:
          description: |
            The scopes covered by the access token.
          items:
            type: string
          type: array
        subject:
          description: |
            The subject (= resource owner's ID).
          type: string
        token:
          description: |
            The access token that came along with the userinfo request.
          type: string
        properties:
          description: |
            The extra properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        userInfoClaims:
          description: "The value of the `userinfo` property in the `claims` request\
            \ parameter or in the `claims` property in an authorization request object.\n\
            \nA client application may request certain claims be embedded in an ID\
            \ token or in a response from the userInfo endpoint.\nThere are several\
            \ ways. Including the `claims` request parameter and including the `claims`\
            \ property in a request object are such examples.\nIn both cases, the\
            \ value of the `claims` parameter/property is JSON. Its format is described\
            \ in [5.5. Requesting Claims using the \"claims\"\nRequest Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).\n\
            \nThe following is an excerpt from the specification. You can find `userinfo`\
            \ and `id_token` are top-level properties.\n\n```json\n{\n  \"userinfo\"\
            :\n  {\n    \"given_name\": { \"essential\": true },\n    \"nickname\"\
            : null,\n    \"email\": { \"essential\": true },\n    \"email_verified\"\
            : { \"essential\": true },\n    \"picture\": null,\n    \"http://example.info/claims/groups\"\
            : null\n  },\n  \"id_token\":\n  {\n    \"auth_time\": { \"essential\"\
            : true },\n    \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\"\
            \ ] }\n  }\n}\n````\n\nThe value of this property is the value of the\
            \ `userinfo` property in JSON format.\nFor example, if the JSON above\
            \ is included in an authorization request, this property holds JSON equivalent\
            \ to the following.\n\n```json\n{\n  \"given_name\": { \"essential\":\
            \ true },\n  \"nickname\": null,\n  \"email\": { \"essential\": true },\n\
            \  \"email_verified\": { \"essential\": true },\n  \"picture\": null,\n\
            \  \"http://example.info/claims/groups\": null\n}\n```\n\nNote that if\
            \ a request object is given and it contains the `claims` property and\
            \ if the `claims` request parameter is also given,\nthe value of this\
            \ property holds the former value.\n"
          type: string
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
      type: object
    userinfo_issue_request:
      properties:
        token:
          description: "The access token that has been passed to the userinfo endpoint\
            \ by the client application. In other words,\nthe access token which was\
            \ contained in the userinfo request.\n"
          type: string
        claims:
          description: "Claims in JSON format. As for the format, see [OpenID Connect\
            \ Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).\n"
          type: string
        sub:
          description: "The value of the `sub` claim. If the value of this request\
            \ parameter is not empty, it is used as the value of\nthe `sub` claim.\
            \ Otherwise, the value of the subject associated with the access token\
            \ is used."
          type: string
      required:
      - token
      type: object
    userinfo_issue_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - UNAUTHORIZED
          - FORBIDDEN
          - JSON
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation can use as the value of `WWW-Authenticate`
            header on errors.
          type: string
      type: object
    service_jwks_get_response:
      example:
        keys:
        - "{}"
        - "{}"
      properties:
        keys:
          description: "An array of [JWK](https://datatracker.ietf.org/doc/html/rfc7517)s."
          items:
            description: "An object representing JWK. See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517)\
              \ for more details.\n"
            type: object
          type: array
      type: object
    client_registration_request:
      properties:
        json:
          description: "Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)\n\
            (OAuth 2.0 Dynamic Client Registration Protocol).\n"
          type: string
        token:
          description: "The client registration access token. Used only for GET, UPDATE,\
            \ and DELETE requests.\n"
          type: string
        clientId:
          description: "The client's identifier. Used for GET, UPDATE, and DELETE\
            \ requests\n"
          type: string
      required:
      - json
      type: object
    client_registration_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        client:
          serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: |
            The next action that the authorization server implementation should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - CREATED
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
        client:
          $ref: '#/components/schemas/Client'
      type: object
    client_registration_get_request:
      properties:
        clientId:
          description: |
            Client ID.
          type: string
        token:
          description: Client registration access token.
          type: string
      required:
      - clientId
      - token
      type: object
    client_registration_get_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        client:
          serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: |
            The next action that the authorization server implementation should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - OK
          - UNAUTHORIZED
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
        client:
          $ref: '#/components/schemas/Client'
      type: object
    client_registration_update_request:
      properties:
        clientId:
          description: |
            Client ID.
          type: string
        token:
          description: |
            Client registration access token.
          type: string
        json:
          description: "Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)\n\
            (OAuth 2.0 Dynamic Client Registration Protocol)."
          type: string
      required:
      - clientId
      - json
      - token
      type: object
    client_registration_update_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        client:
          serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: |
            The next action that the authorization server implementation should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - UPDATED
          - UNAUTHORIZED
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
        client:
          $ref: '#/components/schemas/Client'
      type: object
    client_registration_delete_request:
      properties:
        clientId:
          description: |
            Client ID.
          type: string
        token:
          description: Client registration access token.
          type: string
      required:
      - clientId
      - token
      type: object
    client_registration_delete_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: |
            The next action that the authorization server implementation should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - DELETED
          - UNAUTHORIZED
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client application.
            Its format varies depending on the value of `action` parameter.
          type: string
      type: object
    backchannel_authentication_request:
      properties:
        parameters:
          description: |
            Parameters of a backchannel authentication request which are the request parameters that the
            backchannel authentication endpoint of the OpenID provider implementation received from the client
            application.

            The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
            of the request from the client application.
          type: string
        clientId:
          description: "The client ID extracted from Authorization header of the backchannel\
            \ authentication request from\nthe client application.\n\nIf the backchannel\
            \ authentication endpoint of the OpenID provider implementation supports\
            \ Basic\nAuthentication as a means of client authentication, and the request\
            \ from the client application\ncontained its client ID in Authorization\
            \ header, the value should be extracted and set to this parameter.\n"
          type: string
        clientSecret:
          description: "The client secret extracted from Authorization header of the\
            \ backchannel authentication request\nfrom the client application.\n\n\
            If the backchannel authentication endpoint of the OpenID provider implementation\
            \ supports Basic\nAuthentication as a means of client authentication,\
            \ and the request from the client application\ncontained its client secret\
            \ in Authorization header, the value should be extracted and set to\n\
            this parameter.\n"
          type: string
        clientCertificate:
          description: |
            The client certification used in the TLS connection between the client application and the
            backchannel authentication endpoint of the OpenID provider.
          type: string
        clientCertificatePath:
          description: |-
            The client certificate path presented by the client during client authentication. Each element
            is a string in PEM format.
          type: string
      required:
      - parameters
      type: object
    backchannel_authentication_response:
      example:
        userCodeRequired: true
        sub: sub
        clientName: clientName
        resultCode: resultCode
        hintType: hintType
        requestedExpiry: 6
        clientIdAlias: clientIdAlias
        acrs:
        - acrs
        - acrs
        userCode: userCode
        bindingMessage: bindingMessage
        claimNames:
        - claimNames
        - claimNames
        deliveryMode: null
        action: INTERNAL_SERVER_ERROR
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientId: 0
        ticket: ticket
        warnings:
        - warnings
        - warnings
        resources:
        - resources
        - resources
        resultMessage: resultMessage
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        dynamicScopes:
        - name: name
          value: value
        - name: name
          value: value
        requestContext: requestContext
        clientNotificationToken: clientNotificationToken
        hint: hint
        clientIdAliasUsed: true
        scopes:
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - UNAUTHORIZED
          - USER_IDENTIFICATION
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client
            application. Its format varies depending on the value of `action` parameter.
          type: string
        clientId:
          description: |
            The client ID of the client application that has made the backchannel authentication
            request.
          format: int64
          type: integer
        clientIdAlias:
          description: |
            The client ID alias of the client application that has made the backchannel authentication
            request.
          type: string
        clientIdAliasUsed:
          description: |
            `true` if the value of the client_id request parameter included in the backchannel
            authentication request is the client ID alias. `false` if the value is the original
            numeric client ID.
          type: boolean
        clientName:
          description: |
            The name of the client application which has made the backchannel authentication request.
          type: string
        scopes:
          description: "The scopes requested by the backchannel authentication request.\n\
            \nBasically, this property holds the value of the `scope` request parameter\
            \ in the backchannel\nauthentication request. However, because unregistered\
            \ scopes are dropped on Authlete side,\nif the `scope` request parameter\
            \ contains unknown scopes, the list returned by this\nproperty becomes\
            \ different from the value of the `scope` request parameter.\n\nNote that\
            \ `description` property and `descriptions` property of each `scope` object\n\
            in the array contained in this property is always null even if descriptions\
            \ of the scopes\nare registered.\n"
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        claimNames:
          description: "The names of the claims which were requested indirectly via\
            \ some special scopes.\nSee [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\n\
            in OpenID Connect Core 1.0 for details.\n"
          items:
            type: string
          type: array
        clientNotificationToken:
          description: |
            The client notification token included in the backchannel authentication request.
          type: string
        acrs:
          description: "The list of ACR values requested by the backchannel authentication\
            \ request.\n\nBasically, this property holds the value of the `acr_values`\
            \ request parameter in the\nbackchannel authentication request. However,\
            \ because unsupported ACR values are dropped\non Authlete side, if the\
            \ `acr_values` request parameter contains unrecognized ACR values,\nthe\
            \ list returned by this property becomes different from the value of the\
            \ `acr_values`\nrequest parameter.\n"
          items:
            type: string
          type: array
        hintType:
          description: |
            The type of the hint for end-user identification which was included in the backchannel authentication request.
          type: string
        hint:
          description: |
            The value of the hint for end-user identification.
          type: string
        sub:
          description: |
            The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
          type: string
        bindingMessage:
          description: |
            The binding message included in the backchannel authentication request.
          type: string
        userCode:
          description: |
            The binding message included in the backchannel authentication request.
          type: string
        userCodeRequired:
          description: |
            The flag which indicates whether a user code is required.

            `true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
            `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
            metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
            are `true`.
          type: boolean
        requestedExpiry:
          description: |
            The requested expiry for the authentication request ID (`auth_req_id`).
          format: int32
          type: integer
        requestContext:
          description: |
            The request context of the backchannel authentication request.

            It is the value of the request_context claim in the signed authentication request and
            its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
          type: string
        warnings:
          description: |
            The warnings raised during processing the backchannel authentication request.
          items:
            type: string
          type: array
        ticket:
          description: |
            The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.

            This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
          type: string
        resources:
          description: "The resources specified by the `resource` request parameters\
            \ or by the `resource` property\nin the request object. If both are given,\
            \ the values in the request object should be\nset. See \"Resource Indicators\
            \ for OAuth 2.0\" for details.\n"
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        dynamicScopes:
          description: |
            The dynamic scopes which the client application requested by the scope request parameter.
          items:
            $ref: '#/components/schemas/dynamic_scope'
          type: array
        deliveryMode:
          $ref: '#/components/schemas/delivery_mode'
      type: object
    backchannel_authentication_issue_request:
      properties:
        ticket:
          description: The ticket issued from Authlete's `/backchannel/authentication`
            API.
          type: string
      required:
      - ticket
      type: object
    backchannel_authentication_issue_response:
      example:
        expiresIn: 0
        authReqId: authReqId
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        interval: 6
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - INVALID_TICKET
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client
            application. Its format varies depending on the value of `action` parameter.
          type: string
        authReqId:
          description: |
            The newly issued authentication request ID.
          type: string
        expiresIn:
          description: |
            The duration of the issued authentication request ID in seconds.
          format: int32
          type: integer
        interval:
          description: |
            The minimum amount of time in seconds that the client must wait for between polling
            requests to the token endpoint.
          format: int32
          type: integer
      type: object
    backchannel_authentication_fail_request:
      properties:
        ticket:
          description: "The ticket which should be deleted on a call of Authlete's\
            \ `/backchannel/authentication/fail` API.\nThis request parameter is not\
            \ mandatory but optional. If this request parameter is given and the\n\
            ticket belongs to the service, the specified ticket is deleted from the\
            \ database. Giving this\nparameter is recommended to clean up the storage\
            \ area for the service.\n"
          type: string
        reason:
          description: "The reason of the failure of the backchannel authentication\
            \ request. This request parameter is\nnot mandatory but optional. However,\
            \ giving this parameter is recommended. If omitted, `SERVER_ERROR`\nis\
            \ used as a reason.\n"
          enum:
          - ACCESS_DENIED
          - EXPIRED_LOGIN_HINT_TOKEN
          - INVALID_BINDING_MESSAGE
          - INVALID_TARGET
          - INVALID_USER_CODE
          - MISSING_USER_CODE
          - SERVER_ERROR
          - UNAUTHORIZED_CLIENT
          - UNKNOWN_USER_ID
          type: string
        errorDescription:
          description: |
            The description of the error. This corresponds to the `error_description` property in the response
            to the client.
          type: string
        errorUri:
          description: "The URI of a document which describes the error in detail.\
            \ If this optional request parameter\nis given, its value is used as the\
            \ value of the `error_uri` property."
          type: string
      required:
      - reason
      - ticket
      type: object
    backchannel_authentication_fail_response:
      example:
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        resultMessage: resultMessage
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - FORBIDDEN
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client
            application. Its format varies depending on the value of `action` parameter.
          type: string
      type: object
    backchannel_authentication_complete_request:
      properties:
        ticket:
          description: |
            The ticket issued by Authlete's `/backchannel/authentication` API.
          type: string
        result:
          description: |
            The result of the end-user authentication and authorization. One of the following. Details are
            described in the description.
          enum:
          - TRANSACTION_FAILED
          - ACCESS_DENIED
          - AUTHORIZED
          type: string
        subject:
          description: |
            The subject (= unique identifier) of the end-user.
          type: string
        sub:
          description: |
            The value of the sub claim that should be used in the ID token.
          type: string
        authTime:
          description: |
            The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
          type: string
        acr:
          description: |
            The reference of the authentication context class which the end-user authentication satisfied.
          type: string
        claims:
          description: |
            Additional claims which will be embedded in the ID token.
          type: string
        properties:
          description: |
            The extra properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        scopes:
          description: "Scopes to replace the scopes specified in the original backchannel\
            \ authentication request with.\nWhen nothing is specified for this parameter,\
            \ replacement is not performed.\n"
          items:
            type: string
          type: array
        idtHeaderParams:
          description: |
            JSON that represents additional JWS header parameters for ID tokens.
          type: string
        errorDescription:
          description: "The description of the error. If this optional request parameter\
            \ is given, its value is used as\nthe value of the `error_description`\
            \ property, but it is used only when the result is not `AUTHORIZED`.\n\
            To comply with the specification strictly, the description must not include\
            \ characters outside\nthe set `%x20-21 / %x23-5B / %x5D-7E`.\n"
          type: string
        errorUri:
          description: |-
            The URI of a document which describes the error in detail. This corresponds to the `error_uri`
            property in the response to the client.
          type: string
      required:
      - result
      - subject
      - ticket
      type: object
    backchannel_authentication_complete_response:
      example:
        clientId: 0
        authReqId: authReqId
        clientName: clientName
        resultCode: resultCode
        resources:
        - resources
        - resources
        resultMessage: resultMessage
        clientIdAlias: clientIdAlias
        accessToken: accessToken
        accessTokenDuration: 6
        idTokenDuration: 5
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        jwtAccessToken: jwtAccessToken
        refreshTokenDuration: 1
        deliveryMode: null
        clientNotificationToken: clientNotificationToken
        idToken: idToken
        action: SERVER_ERROR
        clientNotificationEndpoint: clientNotificationEndpoint
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientIdAliasUsed: true
        responseContent: responseContent
        refreshToken: refreshToken
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: |
            The next action that the authorization server implementation should take.
          enum:
          - SERVER_ERROR
          - NO_ACTION
          - NOTIFICATION
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client
            application. Its format varies depending on the value of `action` parameter.
          type: string
        clientId:
          description: |
            The client ID of the client application that has made the backchannel authentication
            request.
          format: int64
          type: integer
        clientIdAlias:
          description: |
            The client ID alias of the client application that has made the backchannel authentication
            request.
          type: string
        clientIdAliasUsed:
          description: |
            `true` if the value of the client_id request parameter included in the backchannel
            authentication request is the client ID alias. `false` if the value is the original
            numeric client ID.
          type: boolean
        clientName:
          description: |
            The name of the client application which has made the backchannel authentication request.
          type: string
        deliveryMode:
          $ref: '#/components/schemas/delivery_mode'
        clientNotificationEndpoint:
          description: |
            The client notification endpoint to which a notification needs to be sent. This corresponds
            to the `client_notification_endpoint` metadata of the client application.
          type: string
        clientNotificationToken:
          description: |
            The client notification token which needs to be embedded as a Bearer token in the Authorization
            header in the notification. This is the value of the `client_notification_token` request
            parameter included in the backchannel authentication request.
          type: string
        authReqId:
          description: |
            The newly issued authentication request ID.
          type: string
        accessToken:
          description: |
            The issued access token.
          type: string
        refreshToken:
          description: |
            The issued refresh token.
          type: string
        idToken:
          description: |
            The issued ID token.
          type: string
        accessTokenDuration:
          description: |
            The duration of the access token in seconds.
          format: int64
          type: integer
        refreshTokenDuration:
          description: |
            The duration of the refresh token in seconds.
          format: int64
          type: integer
        idTokenDuration:
          description: |
            The duration of the ID token in seconds.
          format: int64
          type: integer
        jwtAccessToken:
          description: |
            The issued access token in JWT format.
          type: string
        resources:
          description: "The resources specified by the `resource` request parameters\
            \ or by the `resource` property\nin the request object. If both are given,\
            \ the values in the request object should be\nset. See \"Resource Indicators\
            \ for OAuth 2.0\" for details.\n"
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
      type: object
    device_authorization_request:
      properties:
        parameters:
          description: |
            Parameters of a device authorization request which are the request parameters that the device
            authorization endpoint of the authorization server implementation received from the client application.

            The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
            of the request from the client application.
          type: string
        clientId:
          description: "The client ID extracted from Authorization header of the device\
            \ authorization request from the\nclient application.\n\nIf the device\
            \ authorization endpoint of the authorization server implementation supports\
            \ Basic\n`Authentication` as a means of client authentication, and the\
            \ request from the client application\ncontained its client ID in `Authorization`\
            \ header, the value should be extracted and set to this\nparameter.\n"
          type: string
        clientSecret:
          description: "The client secret extracted from `Authorization` header of\
            \ the device authorization request from\nthe client application.\n\nIf\
            \ the device authorization endpoint of the authorization server implementation\
            \ supports Basic\nAuthentication as a means of client authentication,\
            \ and the request from the client application\ncontained its client secret\
            \ in `Authorization` header, the value should be extracted and set to\n\
            this parameter.\n"
          type: string
        clientCertificate:
          description: |
            The client certificate used in the TLS connection between the client application and the device
            authorization endpoint of the authorization server.
          type: string
        clientCertificatePath:
          description: |-
            The client certificate path presented by the client during client authentication. Each element
            is a string in PEM format.
          type: string
      required:
      - parameters
      type: object
    device_authorization_response:
      example:
        clientId: 0
        verificationUriComplete: verificationUriComplete
        clientName: clientName
        warnings:
        - warnings
        - warnings
        resultCode: resultCode
        resources:
        - resources
        - resources
        deviceCode: deviceCode
        resultMessage: resultMessage
        clientIdAlias: clientIdAlias
        acrs:
        - acrs
        - acrs
        userCode: userCode
        expiresIn: 6
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        dynamicScopes:
        - name: name
          value: value
        - name: name
          value: value
        claimNames:
        - claimNames
        - claimNames
        clientAuthMethod: clientAuthMethod
        action: INTERNAL_SERVER_ERROR
        interval: 1
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientIdAliasUsed: true
        scopes:
        - scopes
        - scopes
        responseContent: responseContent
        verificationUri: verificationUri
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - UNAUTHORIZED
          - OK
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client
            application. Its format varies depending on the value of `action` parameter.
          type: string
        clientId:
          description: |
            The client ID of the client application that has made the device authorization request.
          format: int64
          type: integer
        clientIdAlias:
          description: |
            The client ID alias of the client application that has made the device authorization
            request.
          type: string
        clientIdAliasUsed:
          description: |
            `true` if the value of the client_id request parameter included in the device authorization
            request is the client ID alias. `false` if the value is the original numeric client ID.
          type: boolean
        clientName:
          description: |
            The name of the client application which has made the device authorization request.
          type: string
        clientAuthMethod:
          description: |
            The client authentication method that should be performed at the device authorization
            endpoint.
          type: string
        scopes:
          description: "The scopes requested by the device authorization request.\n\
            \nBasically, this property holds the value of the scope request parameter\
            \ in the device\nauthorization request. However, because unregistered\
            \ scopes are dropped on Authlete\nside, if the `scope` request parameter\
            \ contains unknown scopes, the list returned by\nthis property becomes\
            \ different from the value of the `scope` request parameter.\n\nNote that\
            \ `description` property and `descriptions` property of each scope object\
            \ in the\narray contained in this property is always `null` even if descriptions\
            \ of the scopes\nare registered.\n"
          items:
            type: string
          type: array
        claimNames:
          description: "The names of the claims which were requested indirectly via\
            \ some special scopes.\nSee [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\n\
            in OpenID Connect Core 1.0 for details.\n"
          items:
            type: string
          type: array
        acrs:
          description: "The list of ACR values requested by the device authorization\
            \ request.\n\nBasically, this property holds the value of the `acr_values`\
            \ request parameter in the\ndevice authorization request. However, because\
            \ unsupported ACR values are dropped\non Authlete side, if the `acr_values`\
            \ request parameter contains unrecognized ACR values,\nthe list returned\
            \ by this property becomes different from the value of the `acr_values`\n\
            request parameter.\n"
          items:
            type: string
          type: array
        deviceCode:
          description: |
            The device verification code. This corresponds to the `device_code` property in the
            response to the client.
          type: string
        userCode:
          description: |
            The end-user verification code. This corresponds to the `user_code` property in the
            response to the client.
          type: string
        verificationUri:
          description: |
            The end-user verification URI. This corresponds to the `verification_uri` property in
            the response to the client.
          type: string
        verificationUriComplete:
          description: |
            The end-user verification URI that includes the end-user verification code. This corresponds
            to the `verification_uri_complete` property in the response to the client.
          type: string
        expiresIn:
          description: |
            The duration of the device verification code in seconds. This corresponds to the `expires_in`
            property in the response to the client.
          format: int32
          type: integer
        interval:
          description: |
            The minimum amount of time in seconds that the client must wait for between polling
            requests to the token endpoint. This corresponds to the `interval` property in the response
            to the client.
          format: int32
          type: integer
        warnings:
          description: |
            The warnings raised during processing the backchannel authentication request.
          items:
            type: string
          type: array
        resources:
          description: |
            The resources specified by the `resource` request parameters. See "Resource Indicators
            for OAuth 2.0" for details.
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        dynamicScopes:
          description: |
            The dynamic scopes which the client application requested by the scope request parameter.
          items:
            $ref: '#/components/schemas/dynamic_scope'
          type: array
      type: object
    device_verification_request:
      properties:
        userCode:
          description: A user code.
          type: string
      required:
      - userCode
      type: object
    device_verification_response:
      example:
        clientId: 0
        clientName: clientName
        resultCode: resultCode
        resources:
        - resources
        - resources
        resultMessage: resultMessage
        clientIdAlias: clientIdAlias
        acrs:
        - acrs
        - acrs
        expiresAt: 6
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        dynamicScopes:
        - name: name
          value: value
        - name: name
          value: value
        claimNames:
        - claimNames
        - claimNames
        action: INTERNAL_SERVER_ERROR
        serviceAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientAttributes:
        - value: value
          key: key
        - value: value
          key: key
        clientIdAliasUsed: true
        scopes:
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        - name: name
          description: description
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          defaultEntry: true
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
        responseContent: responseContent
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - NOT_EXIST
          - EXPIRED
          - VALID
          type: string
        responseContent:
          description: |
            The content that the authorization server implementation is to return to the client
            application. Its format varies depending on the value of `action` parameter.
          type: string
        clientId:
          description: |
            The client ID of the client application to which the user code has been issued.
          format: int64
          type: integer
        clientIdAlias:
          description: |
            The client ID alias of the client application to which the user code has been issued.
          type: string
        clientIdAliasUsed:
          description: |
            `true` if the value of the `client_id` request parameter included in the device authorization
            request is the client ID alias. `false` if the value is the original numeric client ID.
          type: boolean
        clientName:
          description: |
            The name of the client application to which the user code has been issued.
          type: string
        scopes:
          description: |
            The scopes requested by the device authorization request.

            Note that `description` property and `descriptions` property of each scope object in
            the array contained in this property is always null even if descriptions of the scopes
            are registered.
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        claimNames:
          description: "The names of the claims which were requested indirectly via\
            \ some special scopes.\nSee [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\n\
            in OpenID Connect Core 1.0 for details.\n\nThis property is always `null`\
            \ if the `scope` request parameter of the device authorization\nrequest\
            \ does not include the `openid` scope even if special scopes (such as\
            \ `profile`)\nare included in the request (unless the openid scope is\
            \ included in the default set\nof scopes which is used when the `scope`\
            \ request parameter is omitted).\n"
          items:
            type: string
          type: array
        acrs:
          description: |
            The list of ACR values requested by the device authorization request.
          items:
            type: string
          type: array
        resources:
          description: "The resources specified by the `resource` request parameters\
            \ or by the `resource` property\nin the request object. If both are given,\
            \ the values in the request object should be\nset. See \"Resource Indicators\
            \ for OAuth 2.0\" for details.\n"
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        serviceAttributes:
          description: |
            The attributes of this service that the client application belongs to.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        clientAttributes:
          description: |
            The attributes of the client.
          items:
            $ref: '#/components/schemas/Pair'
          type: array
        dynamicScopes:
          description: |
            The dynamic scopes which the client application requested by the scope request parameter.
          items:
            $ref: '#/components/schemas/dynamic_scope'
          type: array
        expiresAt:
          description: |
            Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
          format: int64
          type: integer
      type: object
    device_complete_request:
      properties:
        userCode:
          description: |
            A user code.
          type: string
        result:
          description: |
            The result of the end-user authentication and authorization. One of the following. Details are
            described in the description.
          enum:
          - TRANSACTION_FAILED
          - ACCESS_DENIED
          - AUTHORIZED
          type: string
        subject:
          description: |
            The subject (= unique identifier) of the end-user.
          type: string
        sub:
          description: |
            The value of the sub claim that should be used in the ID token.
          type: string
        authTime:
          description: |
            The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
          type: string
        acr:
          description: |
            The reference of the authentication context class which the end-user authentication satisfied.
          type: string
        claims:
          description: |
            Additional claims which will be embedded in the ID token.
          type: string
        properties:
          description: |
            The extra properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        scopes:
          description: "Scopes to replace the scopes specified in the original device\
            \ authorization request with.\nWhen nothing is specified for this parameter,\
            \ replacement is not performed.\n"
          items:
            type: string
          type: array
        errorDescription:
          description: "The description of the error. If this optional request parameter\
            \ is given, its value is used as\nthe value of the `error_description`\
            \ property, but it is used only when the result is not `AUTHORIZED`.\n\
            To comply with the specification strictly, the description must not include\
            \ characters outside\nthe set `%x20-21 / %x23-5B / %x5D-7E`.\n"
          type: string
        errorUri:
          description: |
            The URI of a document which describes the error in detail. This corresponds to the `error_uri`
            property in the response to the client.
          type: string
        idtHeaderParams:
          description: JSON that represents additional JWS header parameters for ID
            tokens.
          type: string
      required:
      - result
      - subject
      - userCode
      type: object
    device_complete_response:
      example:
        resultCode: resultCode
        action: SERVER_ERROR
        resultMessage: resultMessage
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: |
            The next action that the authorization server implementation should take.
          enum:
          - SERVER_ERROR
          - USER_CODE_NOT_EXIST
          - USER_CODE_EXPIRED
          - INVALID_REQUEST
          - SUCCESS
          type: string
      type: object
    token_get_list_response:
      example:
        subject: subject
        start: 0
        client:
          serviceNumber: 6
          applicationType: null
          bcNotificationEndpoint: bcNotificationEndpoint
          tlsClientAuthSanEmail: tlsClientAuthSanEmail
          modifiedAt: 5
          logoUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          descriptions:
          - tag: tag
            value: value
          - tag: tag
            value: value
          subjectType: null
          clientNames:
          - tag: tag
            value: value
          - tag: tag
            value: value
          number: 0
          createdAt: 5
          clientType: null
          tlsClientCertificateBoundAccessTokens: true
          bcDeliveryMode: bcDeliveryMode
          idTokenEncryptionEnc: null
          clientSecret: clientSecret
          selfSignedCertificateKeyId: selfSignedCertificateKeyId
          idTokenSignAlg: null
          clientUri: clientUri
          tlsClientAuthSanDns: tlsClientAuthSanDns
          tlsClientAuthSanIp: tlsClientAuthSanIp
          policyUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          parRequired: true
          derivedSectorIdentifier: derivedSectorIdentifier
          logoUri: logoUri
          requestObjectEncryptionEncMatchRequired: true
          redirectUris:
          - redirectUris
          - redirectUris
          requestEncryptionAlg: null
          defaultAcrs:
          - defaultAcrs
          - defaultAcrs
          requestObjectEncryptionAlgMatchRequired: true
          grantTypes:
          - null
          - null
          authorizationEncryptionEnc: null
          tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
          tosUri: tosUri
          requestUris:
          - requestUris
          - requestUris
          softwareVersion: softwareVersion
          authorizationSignAlg: null
          registrationAccessTokenHash: registrationAccessTokenHash
          extension:
            refreshTokenDuration: 9
            requestableScopes:
            - requestableScopes
            - requestableScopes
            requestableScopesEnabled: true
            accessTokenDuration: 7
          jwks: jwks
          clientUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          clientName: clientName
          requestSignAlg: null
          tosUris:
          - tag: tag
            value: value
          - tag: tag
            value: value
          description: description
          jwksUri: jwksUri
          authorizationDetailsTypes:
          - authorizationDetailsTypes
          - authorizationDetailsTypes
          userInfoEncryptionEnc: null
          clientIdAlias: clientIdAlias
          authorizationEncryptionAlg: null
          loginUri: loginUri
          userInfoSignAlg: null
          policyUri: policyUri
          customMetadata: customMetadata
          tokenAuthSignAlg: null
          authTimeRequired: true
          idTokenEncryptionAlg: null
          clientIdAliasEnabled: true
          bcUserCodeRequired: true
          tokenAuthMethod: null
          defaultMaxAge: 2
          responseTypes:
          - null
          - null
          sectorIdentifierUri: sectorIdentifierUri
          clientId: 1
          dynamicallyRegistered: true
          requestObjectRequired: true
          requestEncryptionEnc: null
          tlsClientAuthSanUri: tlsClientAuthSanUri
          frontChannelRequestObjectEncryptionRequired: true
          softwareId: softwareId
          userInfoEncryptionAlg: null
          developer: developer
          attributes:
          - value: value
            key: key
          - value: value
            key: key
          bcRequestSignAlg: null
          contacts:
          - contacts
          - contacts
        end: 6
        totalCount: 1
        accessTokens:
        - createdAt: 2
          lastRefreshedAt: 7
          refreshTokenExpiresAt: 5
          clientId: 9
          accessTokenExpiresAt: 5
          subject: subject
          scopes:
          - scopes
          - scopes
          accessTokenHash: accessTokenHash
          refreshTokenHash: refreshTokenHash
          grantType: null
          properties:
          - hidden: true
            value: value
            key: key
          - hidden: true
            value: value
            key: key
        - createdAt: 2
          lastRefreshedAt: 7
          refreshTokenExpiresAt: 5
          clientId: 9
          accessTokenExpiresAt: 5
          subject: subject
          scopes:
          - scopes
          - scopes
          accessTokenHash: accessTokenHash
          refreshTokenHash: refreshTokenHash
          grantType: null
          properties:
          - hidden: true
            value: value
            key: key
          - hidden: true
            value: value
            key: key
      properties:
        start:
          description: |
            Start index of search results (inclusive).
          format: int32
          type: integer
        end:
          description: |
            End index of search results (exclusive).
          format: int32
          type: integer
        totalCount:
          description: |
            Unique ID of a client developer.
          format: int32
          type: integer
        client:
          $ref: '#/components/schemas/Client'
        subject:
          description: |
            Unique user ID of an end-user.
          type: string
        accessTokens:
          description: |
            An array of access tokens.
          items:
            $ref: '#/components/schemas/access_token'
          type: array
      type: object
    token_create_request:
      properties:
        grantType:
          $ref: '#/components/schemas/grant_type'
        clientId:
          description: |
            The ID of the client application which will be associated with a newly created access token.
          format: int64
          type: integer
        subject:
          description: |
            The subject (= unique identifier) of the user who will be associated with a newly created access
            token. This parameter is required unless the grant type is `CLIENT_CREDENTIALS`. The value must
            consist of only ASCII characters and its length must not exceed 100.
          type: string
        scopes:
          description: |
            The scopes which will be associated with a newly created access token. Scopes that are not supported
            by the service cannot be specified and requesting them will cause an error.
          items:
            type: string
          type: array
        accessTokenDuration:
          description: "The duration of a newly created access token in seconds. If\
            \ the value is 0, the duration is determined\naccording to the settings\
            \ of the service.\n"
          format: int64
          type: integer
        refreshTokenDuration:
          description: "The duration of a newly created refresh token in seconds.\
            \ If the value is 0, the duration is\ndetermined according to the settings\
            \ of the service.\n\nA refresh token is not created (1) if the service\
            \ does not support `REFRESH_TOKEN`, or (2) if the\nspecified grant type\
            \ is either `IMPLICIT`or `CLIENT_CREDENTIALS`.\n"
          format: int64
          type: integer
        properties:
          description: "Extra properties to associate with a newly created access\
            \ token. Note that properties parameter\nis accepted only when the HTTP\
            \ method of the request is POST and Content-Type of the request is\n`application/json`,\
            \ so don't use `GET` method or `application/x-www-form-urlencoded` if\
            \ you want\nto specify properties.\n"
          items:
            $ref: '#/components/schemas/Property'
          type: array
        clientIdAliasUsed:
          description: "A boolean request parameter which indicates whether to emulate\
            \ that the client ID alias is used\ninstead of the original numeric client\
            \ ID when a new access token is created.\n\nThis has an effect only on\
            \ the value of the aud claim in a response from [UserInfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).\n\
            When you access the UserInfo endpoint (which is expected to be implemented\
            \ using Authlete's\n`/api/auth/userinfo` API and `/api/auth/userinfo/issue`\
            \ API) with an access token which has been\ncreated using Authlete's `/api/auth/token/create`\
            \ API with this property (`clientIdAliasUsed`)\n`true`, the client ID\
            \ alias is used as the value of the aud claim in a response from the UserInfo\n\
            endpoint.\n\nNote that if a client ID alias is not assigned to the client\
            \ when Authlete's `/api/auth/token/create`\nAPI is called, this property\
            \ (`clientIdAliasUsed`) has no effect (it is always regarded as `false`).\n"
          type: boolean
        accessToken:
          description: "The value of the new access token.\n\nThe `/api/auth/token/create`\
            \ API generates an access token. Therefore, callers of the API do not\n\
            have to specify values of newly created access tokens. However, in some\
            \ cases, for example, if\nyou want to migrate existing access tokens from\
            \ an old system to Authlete, you may want to specify\nvalues of access\
            \ tokens. In such a case, you can specify the value of a newly created\
            \ access token\nby passing a non-null value as the value of accessToken\
            \ request parameter. The implementation\nof the `/api/auth/token/create`\
            \ uses the value of the accessToken request parameter instead of\ngenerating\
            \ a new value when the request parameter holds a non-null value.\n\nNote\
            \ that if the hash value of the specified access token already exists\
            \ in Authlete's database,\nthe access token cannot be inserted and the\
            \ `/api/auth/token/create` API will report an error.\n"
          type: string
        refreshToken:
          description: "The value of the new refresh token.\n\nThe `/api/auth/token/create`\
            \ API may generate a refresh token. Therefore, callers of the API do\n\
            not have to specify values of newly created refresh tokens. However, in\
            \ some cases, for example,\nif you want to migrate existing refresh tokens\
            \ from an old system to Authlete, you may want to\nspecify values of refresh\
            \ tokens. In such a case, you can specify the value of a newly created\n\
            refresh token by passing a non-null value as the value of refreshToken\
            \ request parameter. The\nimplementation of the `/api/auth/token/create`\
            \ uses the value of the refreshToken request parameter\ninstead of generating\
            \ a new value when the request parameter holds a non-null value.\n\nNote\
            \ that if the hash value of the specified refresh token already exists\
            \ in Authlete's database,\nthe refresh token cannot be inserted and the\
            \ `/api/auth/token/create` API will report an error.\n"
          type: string
        accessTokenPersistent:
          description: "Get whether the access token expires or not. By default, all\
            \ access tokens expire after a period\nof time determined by their service.\n\
            \nIf this request parameter is `true`, then the access token will not\
            \ automatically expire and must\nbe revoked or deleted manually at the\
            \ service. If this request parameter is true, the `accessTokenDuration`\n\
            request parameter is ignored.\n"
          type: boolean
        certificateThumbprint:
          description: "The thumbprint of the MTLS certificate bound to this token.\
            \ If this property is set, a certificate\nwith the corresponding value\
            \ MUST be presented with the access token when it is used by a client.\n\
            The value of this property must be a SHA256 certificate thumbprint, base64url\
            \ encoded.\n"
          type: string
        dpopKeyThumbprint:
          description: "The thumbprint of the public key used for DPoP presentation\
            \ of this token. If this property is\nset, a DPoP proof signed with the\
            \ corresponding private key MUST be presented with the access\ntoken when\
            \ it is used by a client. Additionally, the token's `token_type` will\
            \ be set to 'DPoP'.\n"
          type: string
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        resources:
          description: |
            The value of the resources to associate with the token. This property represents the value of
            one or more `resource` request parameters which is defined in "RFC8707 Resource Indicators for
            OAuth 2.0".
          items:
            format: uri
            type: string
          type: array
      required:
      - clientId
      - grantType
      type: object
    token_create_response:
      example:
        clientId: 0
        subject: subject
        resultCode: resultCode
        resultMessage: resultMessage
        accessToken: accessToken
        expiresAt: 6
        expiresIn: 1
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        jwtAccessToken: jwtAccessToken
        action: INTERNAL_SERVER_ERROR
        scopes:
        - scopes
        - scopes
        grantType: grantType
        tokenType: tokenType
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
        refreshToken: refreshToken
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - FORBIDDEN
          - OK
          type: string
        accessToken:
          description: The newly issued access token.
          type: string
        clientId:
          description: |
            The ID of the client application associated with the access token.
          format: int64
          type: integer
        expiresAt:
          description: |
            The time at which the access token expires.
          format: int64
          type: integer
        expiresIn:
          description: |
            The duration of the newly issued access token in seconds.
          format: int64
          type: integer
        grantType:
          description: |
            The grant type for the newly issued access token.
          type: string
        properties:
          description: |
            The extra properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        refreshToken:
          description: |
            The newly issued refresh token.
          type: string
        scopes:
          description: |
            Scopes which are associated with the access token.
          items:
            type: string
          type: array
        subject:
          description: |
            The subject (= unique identifier) of the user associated with the newly issued access
            token.
          type: string
        tokenType:
          description: |
            The token type of the access token.
          type: string
        jwtAccessToken:
          description: "If the authorization server is configured to issue JWT-based\
            \ access tokens (= if `Service.accessTokenSignAlg`\nis set to a `non-null`\
            \ value), a JWT-based access token is issued along with the original\n\
            random-string one.\n"
          type: string
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
      type: object
    token_update_request:
      properties:
        accessToken:
          description: |
            An access token.
          type: string
        accessTokenExpiresAt:
          description: "A new date at which the access token will expire in milliseconds\
            \ since the Unix epoch (1970-01-01).\nIf the `accessTokenExpiresAt` request\
            \ parameter is not included in a request or its value is 0\n(or negative),\
            \ the expiration date of the access token is not changed.\n"
          format: int64
          type: integer
        scopes:
          description: "A new set of scopes assigned to the access token. Scopes that\
            \ are not supported by the service\nand those that the client application\
            \ associated with the access token is not allowed to request\nare ignored\
            \ on the server side. If the `scopes` request parameter is not included\
            \ in a request or\nits value is `null`, the scopes of the access token\
            \ are not changed. Note that `properties` parameter\nis accepted only\
            \ when `Content-Type` of the request is `application/json`, so don't use\
            \ `application/x-www-form-urlencoded`\nif you want to specify `properties`.\n"
          items:
            type: string
          type: array
        properties:
          description: "A new set of properties assigned to the access token. If the\
            \ `properties` request parameter is\nnot included in a request or its\
            \ value is null, the properties of the access token are not changed.\n"
          items:
            $ref: '#/components/schemas/Property'
          type: array
        accessTokenExpiresAtUpdatedOnScopeUpdate:
          description: |
            A boolean request parameter which indicates whether the API attempts to update the expiration
            date of the access token when the scopes linked to the access token are changed by this request.
          type: boolean
        accessTokenHash:
          description: |
            The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
            but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
          type: string
        accessTokenValueUpdated:
          description: |
            A boolean request parameter which indicates whether to update the value of the access token in
            the data store. If this parameter is set to `true` then a new access token value is generated
            by the server and returned in the response.
          type: boolean
        accessTokenPersistent:
          description: "The flag which indicates whether the access token expires\
            \ or not. By default, all access tokens\nexpire after a period of time\
            \ determined by their service. If this request parameter is `true`\nthen\
            \ the access token will not automatically expire and must be revoked or\
            \ deleted manually at\nthe service.\n\nIf this request parameter is `true`,\
            \ the `accessTokenExpiresAt` request parameter is ignored.\nIf this request\
            \ parameter is `false`, the `accessTokenExpiresAt` request parameter is\
            \ processed\nnormally.\n"
          type: boolean
        certificateThumbprint:
          description: "The thumbprint of the MTLS certificate bound to this token.\
            \ If this property is set, a certificate\nwith the corresponding value\
            \ MUST be presented with the access token when it is used by a client.\n\
            The value of this property must be a SHA256 certificate thumbprint, base64url\
            \ encoded.\n"
          type: string
        dpopKeyThumbprint:
          description: "The thumbprint of the public key used for DPoP presentation\
            \ of this token. If this property is\nset, a DPoP proof signed with the\
            \ corresponding private key MUST be presented with the access\ntoken when\
            \ it is used by a client. Additionally, the token's `token_type` will\
            \ be set to 'DPoP'.\n"
          type: string
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
      required:
      - accessToken
      type: object
    token_update_response:
      example:
        authorizationDetails:
          elements:
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
          - dataTypes:
            - dataTypes
            - dataTypes
            identifier: identifier
            privileges:
            - privileges
            - privileges
            locations:
            - locations
            - locations
            type: type
            otherFields: otherFields
            actions:
            - actions
            - actions
        accessTokenExpiresAt: 0
        resultCode: resultCode
        action: INTERNAL_SERVER_ERROR
        scopes:
        - scopes
        - scopes
        resultMessage: resultMessage
        accessToken: accessToken
        tokenType: tokenType
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        action:
          description: The next action that the authorization server implementation
            should take.
          enum:
          - INTERNAL_SERVER_ERROR
          - BAD_REQUEST
          - FORBIDDEN
          - NOT_FOUND
          - OK
          type: string
        accessToken:
          description: The access token which has been specified by the request.
          type: string
        accessTokenExpiresAt:
          description: |
            The date at which the access token will expire.
          format: int64
          type: integer
        properties:
          description: |
            The extra properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
        scopes:
          description: |
            The scopes associated with the access token.
          items:
            type: string
          type: array
        authorizationDetails:
          $ref: '#/components/schemas/authorization_details'
        tokenType:
          description: |
            The token type associated with the access token.
          type: string
      type: object
    jose_verify_request:
      properties:
        jose:
          description: |
            A JOSE object.
          type: string
        mandatoryClaims:
          description: |
            Mandatory claims that are required to be included in the JOSE object.
          type: string
        clockSkew:
          description: |
            Allowable clock skew in seconds.
          format: int32
          type: integer
        clientIdentifier:
          description: |
            The identifier of the client application whose keys are required for verification of the JOSE
            object.
          type: string
        signedByClient:
          description: |-
            The flag which indicates whether the signature of the JOSE object has been signed by a client
            application with the client's private key or a shared symmetric key.
          type: boolean
      required:
      - jose
      type: object
    jose_verify_response:
      example:
        valid: true
        invalidClaims:
        - invalidClaims
        - invalidClaims
        signatureValid: true
        missingClaims:
        - missingClaims
        - missingClaims
        errorDescriptions:
        - errorDescriptions
        - errorDescriptions
        resultCode: resultCode
        resultMessage: resultMessage
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        valid:
          description: |
            The result of the verification on the JOSE object.
          type: boolean
        signatureValid:
          description: |
            The result of the signature verification.
          type: boolean
        missingClaims:
          description: |
            The list of missing claims.
          items:
            type: string
          type: array
        invalidClaims:
          description: |
            The list of invalid claims.
          items:
            type: string
          type: array
        errorDescriptions:
          description: |
            The list of error messages.
          items:
            type: string
          type: array
      type: object
    access_token:
      example:
        createdAt: 2
        lastRefreshedAt: 7
        refreshTokenExpiresAt: 5
        clientId: 9
        accessTokenExpiresAt: 5
        subject: subject
        scopes:
        - scopes
        - scopes
        accessTokenHash: accessTokenHash
        refreshTokenHash: refreshTokenHash
        grantType: null
        properties:
        - hidden: true
          value: value
          key: key
        - hidden: true
          value: value
          key: key
      properties:
        accessTokenHash:
          description: The hash of the access token.
          type: string
        accessTokenExpiresAt:
          description: The timestamp at which the access token will expire.
          format: int64
          type: integer
        refreshTokenHash:
          description: The hash of the refresh token.
          type: string
        refreshTokenExpiresAt:
          description: The timestamp at which the refresh token will expire.
          format: int64
          type: integer
        createdAt:
          description: |
            The timestamp at which the access token was first created.
          format: int64
          type: integer
        lastRefreshedAt:
          description: |
            The timestamp at which the access token was last refreshed using the refresh token.
          format: int64
          type: integer
        clientId:
          description: |
            The ID of the client associated with the access token.
          format: int64
          type: integer
        subject:
          description: |
            The subject (= unique user ID) associated with the access token.
          type: string
        grantType:
          $ref: '#/components/schemas/grant_type'
        scopes:
          description: |
            The scopes associated with the access token.
          items:
            type: string
          type: array
        properties:
          description: |
            The properties associated with the access token.
          items:
            $ref: '#/components/schemas/Property'
          type: array
      type: object
    application_type:
      description: |
        The application type. The value of this property affects the validation steps for a redirect URI.
        See the description about `redirectUris` property for more details.
      enum:
      - WEB
      - NATIVE
      - null
      nullable: true
      type: string
    authorization_details:
      description: |
        The authorization details. This represents the value of the `authorization_details`
        request parameter in the preceding device authorization request which is defined in
        "OAuth 2.0 Rich Authorization Requests".
      example:
        elements:
        - dataTypes:
          - dataTypes
          - dataTypes
          identifier: identifier
          privileges:
          - privileges
          - privileges
          locations:
          - locations
          - locations
          type: type
          otherFields: otherFields
          actions:
          - actions
          - actions
        - dataTypes:
          - dataTypes
          - dataTypes
          identifier: identifier
          privileges:
          - privileges
          - privileges
          locations:
          - locations
          - locations
          type: type
          otherFields: otherFields
          actions:
          - actions
          - actions
      properties:
        elements:
          description: |
            Elements of this authorization details.
          items:
            $ref: '#/components/schemas/authorization_details_element'
          type: array
      type: object
    authorization_details_element:
      example:
        dataTypes:
        - dataTypes
        - dataTypes
        identifier: identifier
        privileges:
        - privileges
        - privileges
        locations:
        - locations
        - locations
        type: type
        otherFields: otherFields
        actions:
        - actions
        - actions
      properties:
        type:
          description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization\
            \ Requests\"_: _\"The type of authorization data as a string.\nThis field\
            \ MAY define which other elements are allowed in the request. This element\
            \ is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
          type: string
        locations:
          description: "The resources and/or resource servers. This property may be\
            \ `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array\
            \ of strings representing the location of\nthe resource or resource server.\
            \ This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
          items:
            type: string
          type: array
        actions:
          description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"\
            _: _\"An array of strings representing the kinds of actions\nto be taken\
            \ at the resource. The values of the strings are determined by the API\
            \ being protected.\"_\n\nThis property may be `null`.\n"
          items:
            type: string
          type: array
        dataTypes:
          description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array\
            \ of strings representing the kinds of data being requested\nfrom the\
            \ resource.\"_\n\nThis property may be `null`.\n"
          items:
            type: string
          type: array
        identifier:
          description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0\
            \ Rich Authorization Requests\"_: _\"A string identifier indicating a\
            \ specific resource available at the API.\"_\n\nThis property may be `null`.\n"
          type: string
        privileges:
          description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization\
            \ Requests\": _\"An array of strings representing the types or\nlevels\
            \ of privilege being requested at the resource.\"_\n\nThis property may\
            \ be `null`.\n"
          items:
            type: string
          type: array
        otherFields:
          description: |
            The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.
            The content and semantics are specific to the deployment and the use case implemented.
          type: string
      required:
      - type
      type: object
    claim_type:
      enum:
      - NORMAL
      - AGGREGATED
      - DISTRIBUTED
      type: string
    client_authentication_method:
      description: "The client authentication method that the client application declares\
        \ that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method`\
        \ in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
      enum:
      - NONE
      - CLIENT_SECRET_BASIC
      - CLIENT_SECRET_POST
      - CLIENT_SECRET_JWT
      - PRIVATE_KEY_JWT
      - TLS_CLIENT_AUTH
      - SELF_SIGNED_TLS_CLIENT_AUTH
      type: string
    client_extension:
      example:
        refreshTokenDuration: 9
        requestableScopes:
        - requestableScopes
        - requestableScopes
        requestableScopesEnabled: true
        accessTokenDuration: 7
      properties:
        requestableScopes:
          description: "The set of scopes that the client application is allowed to\
            \ request. This paramter will be one\nof the following.\n\n  - `null`\n\
            \  - an empty set\n  - a set with at least one element\n\nWhen the value\
            \ of this parameter is `null`, it means that the set of scopes that the\
            \ client\napplication is allowed to request is the set of the scopes that\
            \ the service supports. When the\nvalue of this parameter is an empty\
            \ set, it means that the client application is not allowed to\nrequest\
            \ any scopes. When the value of this parameter is a set with at least\
            \ one element, it means\nthat the set is the set of scopes that the client\
            \ application is allowed to request.\n"
          items:
            type: string
          type: array
        requestableScopesEnabled:
          description: "The flag to indicate whether \"Requestable Scopes per Client\"\
            \ is enabled or not. If `true`, you\ncan define the set of scopes which\
            \ this client application can request. If `false`, this client\napplication\
            \ can request any scope which is supported by the authorization server.\n"
          type: boolean
        accessTokenDuration:
          description: "The value of the duration of access tokens per client in seconds.\
            \ In normal cases, the value of\nthe service's `accessTokenDuration` property\
            \ is used as the duration of access tokens issued by\nthe service. However,\
            \ if this `accessTokenDuration` property holds a non-zero positive number\n\
            and its value is less than the duration configured by the service, the\
            \ value is used as the duration\nof access tokens issued to the client\
            \ application.\n\nNote that the duration of access tokens can be controlled\
            \ by the scope attribute `access_token.duration`,\ntoo. Authlete chooses\
            \ the minimum value among the candidates.\n"
          format: int64
          type: integer
        refreshTokenDuration:
          description: "The value of the duration of refresh tokens per client in\
            \ seconds. In normal cases, the value\nof the service's `refreshTokenDuration`\
            \ property is used as the duration of refresh tokens issued\nby the service.\
            \ However, if this `refreshTokenDuration` property holds a non-zero positive\
            \ number\nand its value is less than the duration configured by the service,\
            \ the value is used as the duration\nof refresh tokens issued to the client\
            \ application.\n\nNote that the duration of refresh tokens can be controlled\
            \ by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses\
            \ the minimum value among the candidates."
          format: int64
          type: integer
      type: object
    tagged_value:
      example:
        tag: tag
        value: value
      properties:
        tag:
          description: The language tag part.
          type: string
        value:
          description: The value part.
          type: string
      type: object
    client_type:
      description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749,\
        \ 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\n\
        for details.\n"
      enum:
      - PUBLIC
      - CONFIDENTIAL
      type: string
    grant_type:
      description: |
        The grant type of the access token when the access token was created.
      enum:
      - AUTHORIZATION_CODE
      - IMPLICIT
      - PASSWORD
      - CLIENT_CREDENTIALS
      - REFRESH_TOKEN
      - CIBA
      - DEVICE_CODE
      type: string
    response_type:
      enum:
      - NONE
      - CODE
      - TOKEN
      - ID_TOKEN
      - CODE_TOKEN
      - CODE_ID_TOKEN
      - ID_TOKEN_TOKEN
      - CODE_ID_TOKEN_TOKEN
      type: string
    jws_alg:
      description: "The signature algorithm for JWT. This value is represented on\
        \ 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where\
        \ is this defined, for instance:\n  - as service accessTokenSignAlg value,\
        \ it defines that access token are JWT and the algorithm used to sign it.\
        \ Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n\
        \  - as client authorizationSignAlg value, it represents the signature algorithm\
        \ used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n\
        \  - or as client requestSignAlg value, it specifies which is the expected\
        \ signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
      enum:
      - NONE
      - HS256
      - HS384
      - HS512
      - RS256
      - RS384
      - RS512
      - ES256
      - ES384
      - ES512
      - PS256
      - PS384
      - PS512
      - ES256K
      - EdDSA
      type: string
    jwe_alg:
      description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending\
        \ upon the context, this refers to key transport scheme to be used by the\
        \ client and by the server. For instance:\n- as `authorizationEncryptionAlg`\
        \ value, it refers to the encoding algorithm used by server for transporting\
        \ they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers\
        \ to the expected key transport encoding algorithm that server expect from\
        \ client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value,\
        \ it refers to the algorithm used by the server to key transport of id_tokens\n\
        \n**Please note that some of the algorithms are more secure than others, some\
        \ are not supported very well cross platforms and some (like RSA1_5) is known\
        \ to be weak**.\n"
      enum:
      - RSA1_5
      - RSA_OAEP
      - RSA_OAEP_256
      - A128KW
      - A192KW
      - A256KW
      - DIR
      - ECDH_ES
      - ECDH_ES_A128KW
      - ECDH_ES_A192KW
      - ECDH_ES_A256KW
      - A128GCMKW
      - A192GCMKW
      - A256GCMKW
      - PBES2_HS256_A128KW
      - PBES2_HS384_A192KW
      - PBES2_HS512_A256KW
      type: string
    jwe_enc:
      description: "This is the encryption algorithm to be used when encrypting a\
        \ JWT on client or server side.\nDepending upon the context, this refers to\
        \ encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc`\
        \ value, it refers to the encryption algorithm used by server when creating\
        \ a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected\
        \ encryption algorithm used by the client when encrypting a Request Object\n\
        \  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the\
        \ server to encrypt id_tokens\n"
      enum:
      - A128CBC_HS256
      - A192CBC_HS384
      - A256CBC_HS512
      - A128GCM
      - A192GCM
      - A256GCM
      type: string
    subject_type:
      description: "The subject type that the client application requests. Details\
        \ about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct\
        \ Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\
        \nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic\
        \ Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
      enum:
      - PUBLIC
      - PAIRWISE
      type: string
    delivery_mode:
      description: "Backchannel token delivery mode defined in the specification of\
        \ [CIBA (Client Initiated Backchannel\nAuthentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
      enum:
      - PING
      - POLL
      - PUSH
      type: string
    dynamic_scope:
      example:
        name: name
        value: value
      properties:
        name:
          description: The scope name.
          type: string
        value:
          description: The scope value.
          type: string
      type: object
    named_uri:
      example:
        name: name
        uri: https://openapi-generator.tech
      properties:
        name:
          type: string
        uri:
          format: uri
          type: string
      type: object
    service_profile:
      enum:
      - FAPI
      - OPEN_BANKING
      type: string
    sns_credentials:
      example:
        apiKey: apiKey
        sns: sns
        apiSecret: apiSecret
      properties:
        sns:
          description: SNS.
          type: string
        apiKey:
          description: API key.
          type: string
        apiSecret:
          description: API secret.
          type: string
      type: object
    user_code_charset:
      description: |
        The character set for end-user verification codes (`user_code`) for Device Flow.
      enum:
      - BASE20
      - NUMERIC
      type: string
  securitySchemes:
    ServiceOwnerCredentials:
      description: Set **Service Owner API Key** as **Username** and **Service Owner
        API Secret** as **Password**.
      scheme: basic
      type: http
    ServiceCredentials:
      description: Set **Service API Key** as **Username** and **Service API Secret**
        as **Password**.
      scheme: basic
      type: http
