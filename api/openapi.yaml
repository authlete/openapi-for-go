openapi: 3.0.3
info:
  description: |
    Authlete API Document.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Authlete API
  version: 2.3.0
servers:
- description: Shared production server.
  url: https://api.authlete.com
tags:
- description: desc1
  name: Service Management
- description: desc1
  name: Client Management
- description: desc1
  name: Authorization Endpoint
- description: desc1
  name: Pushed Authorization Endpoint
- description: desc1
  name: Token Endpoint
- description: desc1
  name: Introspection Endpoint
- description: desc1
  name: Revocation Endpoint
- description: desc1
  name: UserInfo Endpoint
- description: desc1
  name: JWK Set Endpoint
- description: desc1
  name: Discovery Endpoint
- description: desc1
  name: Configuration Endpoint
- description: desc1
  name: Dynamic Client Registration
- description: desc1
  name: CIBA
- description: desc1
  name: Grant Management Endpoint
- description: desc1
  name: Token Operations
- description: desc1
  name: Jose Object
- description: desc1
  name: Device Flow
- description: desc1
  name: Federation Endpoint
paths:
  /api/service/get/{serviceApiKey}:
    get:
      description: |
        Get a service.
      operationId: service_get_api
      parameters:
      - description: The API key of a service.
        in: path
        name: serviceApiKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                accessTokenDuration: 3600
                accessTokenType: Bearer
                allowableClockSkew: 0
                apiKey: 21653835348762
                apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authorizationEndpoint: https://my-service.example.com/authz
                authorizationResponseDuration: 0
                backchannelAuthReqIdDuration: 0
                backchannelBindingMessageRequiredInFapi: false
                backchannelPollingInterval: 0
                backchannelUserCodeParameterSupported: false
                claimShortcutRestrictive: false
                clientIdAliasEnabled: true
                clientsPerDeveloper: 0
                createdAt: 1639373421000
                dcrScopeUsedAsRequestable: false
                deviceFlowCodeDuration: 0
                deviceFlowPollingInterval: 0
                directAuthorizationEndpointEnabled: false
                directIntrospectionEndpointEnabled: false
                directJwksEndpointEnabled: false
                directRevocationEndpointEnabled: false
                directTokenEndpointEnabled: false
                directUserInfoEndpointEnabled: false
                dynamicRegistrationSupported: false
                errorDescriptionOmitted: false
                errorUriOmitted: false
                frontChannelRequestObjectEncryptionRequired: false
                grantManagementActionRequired: false
                hsmEnabled: false
                idTokenDuration: 0
                introspectionEndpoint: https://my-service.example.com/introspection
                issSuppressed: false
                issuer: https://my-service.example.com
                metadata:
                - key: clientCount
                  value: "1"
                missingClientIdAllowed: false
                modifiedAt: 1639373421000
                mutualTlsValidatePkiCertChain: false
                nbfOptional: false
                number: 5041
                parRequired: false
                pkceRequired: true
                pkceS256Required: false
                pushedAuthReqDuration: 0
                refreshTokenDuration: 3600
                refreshTokenDurationKept: false
                refreshTokenDurationReset: false
                refreshTokenKept: false
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                revocationEndpoint: https://my-service.example.com/revocation
                scopeRequired: false
                serviceName: My service
                serviceOwnerNumber: 2
                singleAccessTokenPerSubject: false
                supportedClaimTypes:
                - NORMAL
                supportedDisplays:
                - PAGE
                supportedGrantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                supportedIntrospectionAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedResponseTypes:
                - CODE
                supportedRevocationAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedScopes:
                - defaultEntry: false
                  description: A permission to read your history.
                  name: history.read
                - defaultEntry: false
                  description: A permission to read your timeline.
                  name: timeline.read
                supportedTokenAuthMethods:
                - CLIENT_SECRET_BASIC
                tlsClientCertificateBoundAccessTokens: false
                tokenEndpoint: https://my-service.example.com/token
                tokenExpirationLinked: false
                traditionalRequestObjectProcessingApplied: false
                unauthorizedOnClientConfigSupported: false
                userCodeLength: 0
              schema:
                $ref: '#/components/schemas/Service'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: "/api/service/get/{serviceApiKey} API"
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/service/get/21653835348762 \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long serviceApiKey = ...;

          api.getService(serviceApiKey);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long serviceApiKey = ...;

          await api.GetService(serviceApiKey);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $serviceApiKey = ...;

          $api.getService($serviceApiKey);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service_api_key = ...

          api.service_get(service_api_key)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          serviceApiKey = ...

          api.getService(serviceApiKey)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          serviceApiKey := ...

          api.GetService(serviceApiKey)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const serviceApiKey = ...;

          await api.getService(serviceApiKey);
  /api/service/get/list:
    get:
      description: |
        Get a list of services.
      operationId: service_get_list_api
      parameters:
      - description: Start index (inclusive) of the result set. The default value
          is 0. Must not be a negative number.
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
      - description: End index (exclusive) of the result set. The default value is
          5. Must not be a negative number.
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                start: 0
                end: 5
                totalCount: 1
                services:
                - accessTokenDuration: 3600
                  accessTokenType: Bearer
                  allowableClockSkew: 0
                  apiKey: 21653835348762
                  apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authorizationEndpoint: https://as.example.com/authz
                  authorizationResponseDuration: 0
                  backchannelAuthReqIdDuration: 0
                  backchannelBindingMessageRequiredInFapi: false
                  backchannelPollingInterval: 0
                  backchannelUserCodeParameterSupported: false
                  claimShortcutRestrictive: false
                  clientIdAliasEnabled: true
                  clientsPerDeveloper: 0
                  createdAt: 1639373421000
                  dcrScopeUsedAsRequestable: false
                  deviceFlowCodeDuration: 0
                  deviceFlowPollingInterval: 0
                  directAuthorizationEndpointEnabled: false
                  directIntrospectionEndpointEnabled: false
                  directJwksEndpointEnabled: false
                  directRevocationEndpointEnabled: false
                  directTokenEndpointEnabled: false
                  directUserInfoEndpointEnabled: false
                  dynamicRegistrationSupported: false
                  errorDescriptionOmitted: false
                  errorUriOmitted: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantManagementActionRequired: false
                  hsmEnabled: false
                  idTokenDuration: 0
                  introspectionEndpoint: https://my-service.example.com/introspection
                  issSuppressed: false
                  issuer: https://my-service.example.com
                  metadata:
                  - key: clientCount
                    value: "1"
                  missingClientIdAllowed: false
                  modifiedAt: 1639373421000
                  mutualTlsValidatePkiCertChain: false
                  nbfOptional: false
                  number: 5041
                  parRequired: false
                  pkceRequired: true
                  pkceS256Required: false
                  pushedAuthReqDuration: 0
                  refreshTokenDuration: 3600
                  refreshTokenDurationKept: false
                  refreshTokenDurationReset: false
                  refreshTokenKept: false
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  revocationEndpoint: https://my-service.example.com/revocation
                  scopeRequired: false
                  serviceName: My service
                  serviceOwnerNumber: 2
                  singleAccessTokenPerSubject: false
                  supportedClaimTypes:
                  - NORMAL
                  supportedDisplays:
                  - PAGE
                  supportedGrantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  supportedIntrospectionAuthMethods:
                  - CLIENT_SECRET_BASIC
                  supportedResponseTypes:
                  - CODE
                  supportedRevocationAuthMethods:
                  - CLIENT_SECRET_BASIC
                  supportedScopes:
                  - defaultEntry: false
                    description: A permission to read your history.
                    name: history.read
                  - defaultEntry: false
                    description: A permission to read your timeline.
                    name: timeline.read
                  supportedTokenAuthMethods:
                  - CLIENT_SECRET_BASIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenEndpoint: https://my-service.example.com/token
                  tokenExpirationLinked: false
                  traditionalRequestObjectProcessingApplied: false
                  unauthorizedOnClientConfigSupported: false
                  userCodeLength: 0
              schema:
                $ref: '#/components/schemas/service_get_list_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: /api/service/get/list API
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/service/get/list?start=0\&end=5 \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          int start = 0;
          int end = 5;

          api.getServiceList(start, end);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          int start = 0;
          int end = 5;

          await api.GetServiceList(start, end);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $start = 0;
          $end = 5;

          $api.getServiceList($start, $end);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = { start: 0, end: 5 }

          api.service_get_list(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          start = 0
          end = 5

          api.getServiceList(start, end)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          start := 0
          end := 5

          api.GetServiceList(start, end)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const start = 0;
          const end = 5;

          await api.getServiceList(start, end);
  /api/service/create:
    post:
      description: |
        Create a new service.
      operationId: service_create_api
      requestBody:
        content:
          application/json:
            example:
              serviceName: My service
              issuer: https://my-service.example.com
              clientIdAliasEnabled: true
              supportedGrantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              supportedResponseTypes:
              - CODE
              authorizationEndpoint: https://my-service.example.com/authz
              pkceRequired: true
              tokenEndpoint: https://my-service.example.com/token
              supportedTokenAuthMethods:
              - CLIENT_SECRET_BASIC
              revocationEndpoint: https://my-service.example.com/revocation
              supportedRevocationAuthMethods:
              - CLIENT_SECRET_BASIC
              introspectionEndpoint: https://my-service.example.com/introspection
              supportedIntrospectionAuthMethods:
              - CLIENT_SECRET_BASIC
              accessTokenType: Bearer
              accessTokenDuration: 3600
              refreshTokenDuration: 3600
              supportedScopes:
              - name: timeline.read
                defaultEntry: false
                description: A permission to read your timeline.
              - name: history.read
                defaultEntry: false
                description: A permission to read your history.
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                accessTokenDuration: 3600
                accessTokenType: Bearer
                allowableClockSkew: 0
                apiKey: 21653835348762
                apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authorizationEndpoint: https://my-service.example.com/authz
                authorizationResponseDuration: 0
                backchannelAuthReqIdDuration: 0
                backchannelBindingMessageRequiredInFapi: false
                backchannelPollingInterval: 0
                backchannelUserCodeParameterSupported: false
                claimShortcutRestrictive: false
                clientIdAliasEnabled: true
                clientsPerDeveloper: 0
                createdAt: 1639373421000
                dcrScopeUsedAsRequestable: false
                deviceFlowCodeDuration: 0
                deviceFlowPollingInterval: 0
                directAuthorizationEndpointEnabled: false
                directIntrospectionEndpointEnabled: false
                directJwksEndpointEnabled: false
                directRevocationEndpointEnabled: false
                directTokenEndpointEnabled: false
                directUserInfoEndpointEnabled: false
                dynamicRegistrationSupported: false
                errorDescriptionOmitted: false
                errorUriOmitted: false
                frontChannelRequestObjectEncryptionRequired: false
                grantManagementActionRequired: false
                hsmEnabled: false
                idTokenDuration: 0
                introspectionEndpoint: https://my-service.example.com/introspection
                issSuppressed: false
                issuer: https://my-service.example.com
                metadata:
                - key: clientCount
                  value: "0"
                missingClientIdAllowed: false
                modifiedAt: 1639373421000
                mutualTlsValidatePkiCertChain: false
                nbfOptional: false
                number: 5041
                parRequired: false
                pkceRequired: true
                pkceS256Required: false
                pushedAuthReqDuration: 0
                refreshTokenDuration: 3600
                refreshTokenDurationKept: false
                refreshTokenDurationReset: false
                refreshTokenKept: false
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                revocationEndpoint: https://my-service.example.com/revocation
                scopeRequired: false
                serviceName: My service
                serviceOwnerNumber: 2
                singleAccessTokenPerSubject: false
                supportedClaimTypes:
                - NORMAL
                supportedDisplays:
                - PAGE
                supportedGrantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                supportedIntrospectionAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedResponseTypes:
                - CODE
                supportedRevocationAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedScopes:
                - defaultEntry: false
                  description: A permission to read your history.
                  name: history.read
                - defaultEntry: false
                  description: A permission to read your timeline.
                  name: timeline.read
                supportedTokenAuthMethods:
                - CLIENT_SECRET_BASIC
                tlsClientCertificateBoundAccessTokens: false
                tokenEndpoint: https://my-service.example.com/token
                tokenExpirationLinked: false
                traditionalRequestObjectProcessingApplied: false
                unauthorizedOnClientConfigSupported: false
                userCodeLength: 0
              schema:
                $ref: '#/components/schemas/Service'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: /api/service/create API
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X POST https://api.authlete.com/api/service/create \
          -H 'Content-Type:application/json' \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4' \
          -d '{ "serviceName": "My Service", ... }'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          Service service = new Service();
          service.setServiceName("My Service");
          ...

          api.createService(service);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          Service service = new Service();
          service.ServiceName = "My Service";
          ...

          await api.CreateService(service);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $service = new Service();
          $service.setServiceName("My Service");
          ...

          $api.createService($service);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service = Authlete::Model::Service.new
          service.service_name = 'My Service'
          ...

          api.service_create(service)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          service = Service()
          service.serviceName = 'My Service'
          ...

          api.createService(service)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          service := dto.Service{}
          service.ServiceName = "My Service"
          ...

          api.CreateService(&service)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const service = new Service();
          service.serviceName = 'My Service';
          ...

          await api.createService(service);
  /api/service/update/{serviceApiKey}:
    post:
      description: |
        Update a service.
      operationId: service_update_api
      parameters:
      - description: The API key of the target service.
        in: path
        name: serviceApiKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              accessTokenDuration: 3600
              accessTokenType: Bearer
              allowableClockSkew: 0
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
              authorizationEndpoint: https://my-service.example.com/authz
              authorizationResponseDuration: 0
              backchannelAuthReqIdDuration: 0
              backchannelBindingMessageRequiredInFapi: false
              backchannelPollingInterval: 0
              backchannelUserCodeParameterSupported: false
              claimShortcutRestrictive: false
              clientIdAliasEnabled: true
              clientsPerDeveloper: 0
              dcrScopeUsedAsRequestable: false
              deviceFlowCodeDuration: 0
              deviceFlowPollingInterval: 0
              directAuthorizationEndpointEnabled: false
              directIntrospectionEndpointEnabled: false
              directJwksEndpointEnabled: false
              directRevocationEndpointEnabled: false
              directTokenEndpointEnabled: false
              directUserInfoEndpointEnabled: false
              dynamicRegistrationSupported: false
              errorDescriptionOmitted: false
              errorUriOmitted: false
              frontChannelRequestObjectEncryptionRequired: false
              grantManagementActionRequired: false
              hsmEnabled: false
              idTokenDuration: 0
              introspectionEndpoint: https://my-service.example.com/introspection
              issSuppressed: false
              issuer: https://my-service.example.com
              missingClientIdAllowed: false
              mutualTlsValidatePkiCertChain: false
              nbfOptional: false
              parRequired: false
              pkceRequired: true
              pkceS256Required: false
              pushedAuthReqDuration: 0
              refreshTokenDuration: 3600
              refreshTokenDurationKept: false
              refreshTokenDurationReset: false
              refreshTokenKept: false
              requestObjectEncryptionAlgMatchRequired: false
              requestObjectEncryptionEncMatchRequired: false
              requestObjectRequired: false
              revocationEndpoint: https://my-service.example.com/revocation
              scopeRequired: false
              serviceName: My updated service
              singleAccessTokenPerSubject: false
              supportedClaimTypes:
              - NORMAL
              supportedDisplays:
              - PAGE
              supportedGrantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              supportedIntrospectionAuthMethods:
              - CLIENT_SECRET_BASIC
              supportedResponseTypes:
              - CODE
              supportedRevocationAuthMethods:
              - CLIENT_SECRET_BASIC
              supportedScopes:
              - defaultEntry: false
                description: A permission to read your history.
                name: history.read
              - defaultEntry: false
                description: A permission to read your timeline.
                name: timeline.read
              supportedTokenAuthMethods:
              - CLIENT_SECRET_BASIC
              tlsClientCertificateBoundAccessTokens: false
              tokenEndpoint: https://my-service.example.com/token
              tokenExpirationLinked: false
              traditionalRequestObjectProcessingApplied: false
              unauthorizedOnClientConfigSupported: false
              userCodeLength: 0
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                accessTokenDuration: 3600
                accessTokenType: Bearer
                allowableClockSkew: 0
                apiKey: 21653835348762
                apiSecret: uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authorizationEndpoint: https://my-service.example.com/authz
                authorizationResponseDuration: 0
                backchannelAuthReqIdDuration: 0
                backchannelBindingMessageRequiredInFapi: false
                backchannelPollingInterval: 0
                backchannelUserCodeParameterSupported: false
                claimShortcutRestrictive: false
                clientIdAliasEnabled: true
                clientsPerDeveloper: 0
                createdAt: 1639373421000
                dcrScopeUsedAsRequestable: false
                deviceFlowCodeDuration: 0
                deviceFlowPollingInterval: 0
                directAuthorizationEndpointEnabled: false
                directIntrospectionEndpointEnabled: false
                directJwksEndpointEnabled: false
                directRevocationEndpointEnabled: false
                directTokenEndpointEnabled: false
                directUserInfoEndpointEnabled: false
                dynamicRegistrationSupported: false
                errorDescriptionOmitted: false
                errorUriOmitted: false
                frontChannelRequestObjectEncryptionRequired: false
                grantManagementActionRequired: false
                hsmEnabled: false
                idTokenDuration: 0
                introspectionEndpoint: https://my-service.example.com/introspection
                issSuppressed: false
                issuer: https://my-service.example.com
                metadata:
                - key: clientCount
                  value: "1"
                missingClientIdAllowed: false
                modifiedAt: 1639373420725
                mutualTlsValidatePkiCertChain: false
                nbfOptional: false
                number: 5041
                parRequired: false
                pkceRequired: true
                pkceS256Required: false
                pushedAuthReqDuration: 0
                refreshTokenDuration: 3600
                refreshTokenDurationKept: false
                refreshTokenDurationReset: false
                refreshTokenKept: false
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                revocationEndpoint: https://my-service.example.com/revocation
                scopeRequired: false
                serviceName: My updated service
                serviceOwnerNumber: 2
                singleAccessTokenPerSubject: false
                supportedClaimTypes:
                - NORMAL
                supportedDisplays:
                - PAGE
                supportedGrantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                supportedIntrospectionAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedResponseTypes:
                - CODE
                supportedRevocationAuthMethods:
                - CLIENT_SECRET_BASIC
                supportedScopes:
                - defaultEntry: false
                  description: A permission to read your history.
                  name: history.read
                - defaultEntry: false
                  description: A permission to read your timeline.
                  name: timeline.read
                supportedTokenAuthMethods:
                - CLIENT_SECRET_BASIC
                tlsClientCertificateBoundAccessTokens: false
                tokenEndpoint: https://my-service.example.com/token
                tokenExpirationLinked: false
                traditionalRequestObjectProcessingApplied: false
                unauthorizedOnClientConfigSupported: false
                userCodeLength: 0
              schema:
                $ref: '#/components/schemas/Service'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: "/api/service/update/{serviceApiKey} API"
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X POST https://api.authlete.com/api/service/update/21653835348762 \
          -H 'Content-Type:application/json' \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4' \
          -d '{ "serviceName": "My updated service", ... }'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          // Get an existing service.
          long serviceApiKey = ...;
          Service service = api.getService(serviceApiKey);

          // Update "service name".
          service.setAServiceName("My updated service");

          api.updateService(service);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          // Get an existing service.
          long serviceApiKey = ...;
          Service service = api.GetService(serviceApiKey);

          // Update "service name".
          service.ServiceName = "My updated service";

          await api.UpdateService(service);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          // Get an existing service.
          $serviceApiKey = ...;
          $api.getService($serviceApiKey);

          // Update "service name".
          service.setServiceName("My updated service");

          $api.updateService($service);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service_api_key = ...
          api.service_get(service_api_key)

          # Update "service name".
          service.serviceName = 'My updated service';

          api.service_update(service)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          # Get an existing service.
          serviceApiKey = ...
          service = api.getService(serviceApiKey)

          # Update "service name".
          service.serviceName = 'My updated service'

          api.updateService(service)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          // Get an existing service.
          serviceApiKey := ...
          service, _ := api.GetService(serviceApiKey)

          // Update "service name".
          service.ServiceName := "My updated service"

          api.UpdateService(&service)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          // Get an existing service.
          const serviceApiKey = ...;
          const service = await api.getService(serviceApiKey);

          // Update "service name".
          service.serviceName = 'My updated service';

          await api.updateService(service);
  /api/service/delete/{serviceApiKey}:
    delete:
      description: |
        Delete a service.
      operationId: service_delete_api
      parameters:
      - description: The API key of the target service.
        in: path
        name: serviceApiKey
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The service was successfully deleted.
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceOwnerCredentials: []
      summary: "/api/service/delete/{serviceApiKey} API"
      tags:
      - Service Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X DELETE https://api.authlete.com/api/service/delete/21653835348762 \
          -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long serviceApiKey = ...;

          api.deleteService(serviceApiKey);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long serviceApiKey = ...;

          await api.DeleteService(serviceApiKey);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $serviceApiKey = ...;

          $api.deleteService($serviceApiKey);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          service_api_key = ...

          api.service_delete(service_api_key)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          serviceApiKey = ...

          api.deleteService(serviceApiKey)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          serviceApiKey := ...

          api.DeleteService(serviceApiKey)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const serviceApiKey = ...;

          await api.deleteService(serviceApiKey);
  /api/client/get/{clientId}:
    get:
      description: |
        Get a client.
      operationId: client_get_api
      parameters:
      - description: A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                applicationType: WEB
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639468356000
                number: 6164
                parRequired: false
                redirectUris:
                - https://my-client.example.com/cb1
                - https://my-client.example.com/cb2
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                - CODE
                - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
              schema:
                $ref: '#/components/schemas/Client'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/get/{clientId} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/get/26478243745571 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long clientId = ...;

          api.getClient(clientId);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long clientId = ...;

          await api.GetClient(clientId);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $clientId = ...;

          $api.getClient($clientId);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client_id = ...

          api.client_get(client_id)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientId = ...

          api.getClient(clientId)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          clientId := ...

          api.GetClient(clientId)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const clientId = ...;

          await api.getClient(clientId);
  /api/client/get/list:
    get:
      description: |
        Get a list of clients.
      operationId: client_get_list_api
      parameters:
      - description: |
          The developer of client applications. The default value is null. If this parameter is not set
          to `null`, client application of the specified developer are returned. Otherwise, all client
          applications that belong to the service are returned.
        in: query
        name: developer
        required: false
        schema:
          type: string
      - description: Start index (inclusive) of the result set. The default value
          is 0. Must not be a negative number.
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
      - description: End index (exclusive) of the result set. The default value is
          5. Must not be a negative number.
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                clients:
                - applicationType: WEB
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26478243745571
                  clientIdAlias: my-client
                  clientIdAliasEnabled: true
                  clientName: My client
                  clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                  clientType: CONFIDENTIAL
                  createdAt: 1639468356000
                  defaultMaxAge: 0
                  derivedSectorIdentifier: my-client.example.com
                  developer: john
                  dynamicallyRegistered: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  idTokenSignAlg: RS256
                  modifiedAt: 1639468356000
                  number: 6164
                  parRequired: false
                  redirectUris:
                  - https://my-client.example.com/cb1
                  - https://my-client.example.com/cb2
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  responseTypes:
                  - CODE
                  - TOKEN
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                developer: john
                end: 3
                start: 0
                totalCount: 1
              schema:
                $ref: '#/components/schemas/client_get_list_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/get/list API
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/get/list?developer=john\&start=0\&end=5 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          String developer = "john";
          int start = 0;
          int end = 5;

          api.getClientList(developer, start, end);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          String developer = "john";
          int start = 0;
          int end = 5;

          await api.GetClientList(developer, start, end);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $developer = "john";
          $start = 0;
          $end = 5;

          $api.getClientList($developer, $start, $end);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = { developer: 'john', start: 0, end: 5 }

          api.client_list_get(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          developer = 'john'
          start = 0
          end = 5

          api.getClientList(developer, start, end)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          developer = "john"
          start := 0
          end := 5

          api.GetClientList(developer, start, end)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const developer = 'john';
          const start = 0;
          const end = 5;

          await api.getClientList(developer, start, end);
  /api/client/create:
    post:
      description: |
        Create a new client.
      operationId: client_create_api
      requestBody:
        content:
          application/json:
            example:
              developer: john
              clientName: My Client
              clientIdAlias: my-client
              clientIdAliasEnabled: true
              clientType: CONFIDENTIAL
              applicationType: WEB
              grantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              responseTypes:
              - CODE
              - TOKEN
              redirectUris:
              - https://my-client.example.com/cb1
              - https://my-client.example.com/cb2
              tokenAuthMethod: CLIENT_SECRET_BASIC
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
            schema:
              $ref: '#/components/schemas/Client'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                applicationType: WEB
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639468356000
                number: 6164
                parRequired: false
                redirectUris:
                - https://my-client.example.com/cb1
                - https://my-client.example.com/cb2
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                - CODE
                - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
              schema:
                $ref: '#/components/schemas/Client'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/create API
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X POST https://api.authlete.com/api/client/create \
          -H 'Content-Type:application/json' \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
          -d '{ "developer": "john", "clientName": "My Client", ... }'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          Client client = new Client();
          client.setDeveloper("john");
          client.setClientName("My Client");
          ...

          api.createClient(client);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          Client client = new Client();
          client.Developer = "john";
          client.ClientName = "My Client";
          ...

          await api.CreateClient(client);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $client = new Client();
          $client.setDeveloper("john");
          $client.setClientName("My Client");
          ...

          $api.createClient($client);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client = Authlete::Model::Client.new
          client.developer = 'john'
          client.client_name = 'My Client'
          ...

          api.client_create(client)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          client = Client()
          client.developer = 'john'
          client.clientName = 'My Client'
          ...

          api.createClient(client)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          client := dto.Client{}
          client.Developer = "john"
          client.ClientName = "My Client"
          ...

          api.CreateClient(client)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const client = new Client();
          client.developer = 'john';
          client.clientName = 'My Client';
          ...

          await api.createClient(client);
  /api/client/update/{clientId}:
    post:
      description: |
        Update a client.
      operationId: client_update_api
      parameters:
      - description: A client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              applicationType: WEB
              attributes:
              - key: attribute1-key
                value: attribute1-value
              - key: attribute2-key
                value: attribute2-value
              authTimeRequired: false
              bcUserCodeRequired: false
              clientIdAlias: my-client
              clientIdAliasEnabled: true
              clientName: My updated client
              clientType: CONFIDENTIAL
              defaultMaxAge: 0
              derivedSectorIdentifier: my-client.example.com
              developer: john
              dynamicallyRegistered: false
              frontChannelRequestObjectEncryptionRequired: false
              grantTypes:
              - AUTHORIZATION_CODE
              - REFRESH_TOKEN
              idTokenSignAlg: RS256
              parRequired: false
              redirectUris:
              - https://my-client.example.com/cb1
              - https://my-client.example.com/cb2
              requestObjectEncryptionAlgMatchRequired: false
              requestObjectEncryptionEncMatchRequired: false
              requestObjectRequired: false
              responseTypes:
              - CODE
              - TOKEN
              subjectType: PUBLIC
              tlsClientCertificateBoundAccessTokens: false
              tokenAuthMethod: CLIENT_SECRET_BASIC
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
        required: false
      responses:
        "200":
          content:
            application/json:
              example:
                applicationType: WEB
                attributes:
                - key: attribute1-key
                  value: attribute1-value
                - key: attribute2-key
                  value: attribute2-value
                authTimeRequired: false
                bcUserCodeRequired: false
                clientId: 26478243745571
                clientIdAlias: my-client
                clientIdAliasEnabled: true
                clientName: My updated client
                clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                clientType: CONFIDENTIAL
                createdAt: 1639468356000
                defaultMaxAge: 0
                derivedSectorIdentifier: my-client.example.com
                developer: john
                dynamicallyRegistered: false
                frontChannelRequestObjectEncryptionRequired: false
                grantTypes:
                - AUTHORIZATION_CODE
                - REFRESH_TOKEN
                idTokenSignAlg: RS256
                modifiedAt: 1639557082764
                number: 6164
                parRequired: false
                redirectUris:
                - https://my-client.example.com/cb1
                - https://my-client.example.com/cb2
                requestObjectEncryptionAlgMatchRequired: false
                requestObjectEncryptionEncMatchRequired: false
                requestObjectRequired: false
                responseTypes:
                - CODE
                - TOKEN
                serviceNumber: 5041
                subjectType: PUBLIC
                tlsClientCertificateBoundAccessTokens: false
                tokenAuthMethod: CLIENT_SECRET_BASIC
              schema:
                $ref: '#/components/schemas/Client'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/update/{clientId} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X POST https://api.authlete.com/api/client/update/26478243745571 \
          -H 'Content-Type:application/json' \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
          -d '{ "clientName": "My updated client", ... }'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          // Get an existing client.
          long clientId = ...;
          Client client = api.getClient(clientId);

          // Update "client name".
          client.setClientName("My updated client");

          api.updateClient(client);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          // Get an existing client.
          long clientId = ...;
          Client client = api.GetClient(clientId);

          // Update "client name".
          client.ClientName = "My updated client";

          api.UpdateClient(client);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          // Get an existing client.
          $clientId = ...;
          $client = $api.getClient(clientId);

          // Update "client name".
          $client.setClientName("My updated client");

          $api.updateClient($client);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          # Get an existing client.
          client_id = ...
          client = api.client_get(client_id)

          # Update "client name".
          client.client_name = 'My updated client'

          api.client_update(client)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          # Get an existing client.
          clientId = ...
          client = api.getClient(clientId)

          # Update "client name".
          client.clientName = 'My updated client'

          api.updatedClient(client)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          // Get an existing client.
          clientId := ...
          client, _ := api.GetClient(clientId)

          // Update "client name".
          client.ClientName := "My updated client"

          api.UpdateClient(&client)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          // Get an existing client.
          const clientId = ...;
          const client = await api.getClient(clientId);

          // Update "client name".
          client.clientName = 'My updated client';

          await api.updateClient(client);
  /api/client/delete/{clientId}:
    delete:
      description: |
        Delete a client.
      operationId: client_delete_api
      parameters:
      - description: The client ID.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: The client was successfully deleted.
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/delete/{clientId} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v -X DELETE https://api.authlete.com/api/client/delete/26478243745571 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          long clientId = ...;

          api.deleteClient(clientId);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          long clientId = ...;

          await api.DeleteClient(clientId);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $clientId = ...;

          $api.deleteClient($clientId);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client_id = ...

          api.client_delete(client_id)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientId = ...

          api.deleteClient(clientId)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          clientId := ...

          api.DeleteClient(clientId)
      - lang: ts
        label: deno
        source: |
          const conf: AuthleteConfiguration = ...;
          const api: AuthleteApi = new AuthleteApiImpl(conf);

          const clientId = ...

          await api.deleteClient(clientId);
  /api/client/lock_flag/update/{clientIdentifier}:
    post:
      description: |
        Lock and unlock a client
      operationId: client_flag_update_api
      parameters:
      - description: A client ID.
        in: path
        name: clientIdentifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              clientLocked: true
            schema:
              $ref: '#/components/schemas/client_flag_update_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_flag_update_request'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client_flag_update_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/lock_flag/update/{clientIdentifier} API"
      tags:
      - Client Management
  /api/client/secret/refresh/{clientIdentifier}:
    get:
      description: |
        Refresh the client secret of a client. A new value of the client secret will be generated by the
        Authlete server.

        If you want to specify a new value, use `/api/client/secret/update` API.
      operationId: client_secret_refresh_api
      parameters:
      - description: |
          The client ID or the client ID alias of a client.
        in: path
        name: clientIdentifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A148001
                resultMessage: "[A148001] Successfully refreshed the client secret\
                  \ of the client (ID = 26478243745571)."
                newClientSecret: 6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA
                oldClientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
              schema:
                $ref: '#/components/schemas/client_secret_refresh_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/secret/refresh API
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/secret/refresh/26478243745571 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          String clientIdentifier = ...;

          api.refreshClientSecret(clientIdentifier);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          string clientIdentifier = ...;

          await api.RefreshClientSecret(clientIdentifier);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $clientIdentifier = ...;

          $api.refreshClientSecret($clientIdentifier);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client_identifier = ...

          api.refresh_client_secret(client_identifier)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientIdentifier = ...

          api.refreshClientSecret(clientIdentifier)
      - lang: go
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientIdentifier = ...

          api.refreshClientSecret(clientIdentifier)
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/secret/update/{clientIdentifier}:
    post:
      description: |
        Update the client secret of a client.

        If you want to have the Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`
        API.
      operationId: client_secret_update_api
      parameters:
      - description: |
          The client ID or the client ID alias of a client.
        in: path
        name: clientIdentifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              clientSecret: my_updated_client_secret
            schema:
              $ref: '#/components/schemas/client_secret_update_request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/client_secret_update_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                resultCode: A149001
                resultMessage: "[A149001] Successfully updated the client secret of\
                  \ the client (ID = 26478243745571)."
                newClientSecret: my_updated_client_secret
                oldClientSecret: 6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA
              schema:
                $ref: '#/components/schemas/client_secret_update_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: /api/client/secret/update API
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/secret/update/26478243745571 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
          -H 'Content-Type:application/json' \
          -d '{ "clientSecret": "..." }'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          String clientIdentifier = ...;
          String clientSecret = "my_updated_client_secret";

          api.updateClientSecret(clientIdentifier, clientSecret);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = ...;
          IAuthleteApi api = new AuthleteApi(conf);

          string clientIdentifier = ...;
          string clientSecret = "my_new_client_secret";

          await api.UpdateClientSecret(clientIdentifier, clientSecret);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $clientIdentifier = ...;
          $clientSecret = "my_new_client_secret";

          $api.updateClientSecret($clientIdentifier, $clientSecret);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          client_identifier = ...
          client_secret = 'my_new_client_secret'

          api.update_client_secret(client_identifier, client_secret)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          clientIdentifier = ...
          clientSecret = 'my_new_client_secret'

          api.updateClientSecret(clientIdentifier, clientSecret)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          clientIdentifier := ...
          clientSecret := "my_new_client_secret"

          api.UpdateClientSecret(clientIdentifier, clientSecret)
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/authorization/get/list/{subject}:
    get:
      description: |
        Get a list of client applications that an end-user has authorized.

        The subject parameter is required and can be provided either in the path or as a query parameter.
      operationId: client_authorization_get_list_api
      parameters:
      - description: |
          Unique user ID of an end-user.
        in: path
        name: subject
        required: true
        schema:
          type: string
      - description: |
          Unique user ID of an end-user.
        in: query
        name: subject
        required: true
        schema:
          type: string
      - description: |
          Unique ID of a client developer.
        in: query
        name: developer
        required: false
        schema:
          type: string
      - description: Start index of search results (inclusive). The default value
          is 0.
        in: query
        name: start
        required: false
        schema:
          format: int32
          type: integer
      - description: |
          End index of search results (exclusive). The default value is 5.
        in: query
        name: end
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
                clients:
                - applicationType: WEB
                  attributes:
                  - key: attribute1-key
                    value: attribute1-value
                  - key: attribute2-key
                    value: attribute2-value
                  authTimeRequired: false
                  bcUserCodeRequired: false
                  clientId: 26478243745571
                  clientIdAlias: my-client
                  clientIdAliasEnabled: true
                  clientName: My client
                  clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
                  clientType: CONFIDENTIAL
                  createdAt: 1639468356000
                  defaultMaxAge: 0
                  derivedSectorIdentifier: my-client.example.com
                  developer: john
                  dynamicallyRegistered: false
                  frontChannelRequestObjectEncryptionRequired: false
                  grantTypes:
                  - AUTHORIZATION_CODE
                  - REFRESH_TOKEN
                  idTokenSignAlg: RS256
                  modifiedAt: 1639468356000
                  number: 6164
                  parRequired: false
                  redirectUris:
                  - https://my-client.example.com/cb1
                  - https://my-client.example.com/cb2
                  requestObjectEncryptionAlgMatchRequired: false
                  requestObjectEncryptionEncMatchRequired: false
                  requestObjectRequired: false
                  responseTypes:
                  - CODE
                  - TOKEN
                  serviceNumber: 5041
                  subjectType: PUBLIC
                  tlsClientCertificateBoundAccessTokens: false
                  tokenAuthMethod: CLIENT_SECRET_BASIC
                end: 5
                start: 0
                subject: john
                totalCount: 1
              schema:
                $ref: '#/components/schemas/client_authorization_get_list_response'
          description: ""
        "400":
          content:
            application/json:
              example:
                resultCode: A001201
                resultMessage: "[A001201] /auth/authorization, TLS must be used."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "401":
          content:
            application/json:
              example:
                resultCode: A001202
                resultMessage: "[A001202] /auth/authorization, Authorization header\
                  \ is missing."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "403":
          content:
            application/json:
              example:
                resultCode: A001215
                resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
                  \ is locked."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
        "500":
          content:
            application/json:
              example:
                resultCode: A001101
                resultMessage: "[A001101] /auth/authorization, Authlete Server error."
              schema:
                $ref: '#/components/schemas/result'
          description: ""
      security:
      - ServiceCredentials: []
      summary: "/api/client/authorization/get/list/{subject} API"
      tags:
      - Client Management
      x-code-samples:
      - lang: shell
        label: curl
        source: |
          curl -v https://api.authlete.com/api/client/authorization/get/list/john?start=0\&end=5 \
          -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'
      - lang: java
        label: java
        source: |
          AuthleteConfiguration conf = ...;
          AuthleteApi api = AuthleteApiFactory.create(conf);

          ClientAuthorizationGetListRequest req = new ClientAuthorizationGetListRequest();
          req.setSubject("john");
          req.setStart(0);
          req.setEnd(5);

          api.getClientAuthorizationList(req);
      - lang: cs
        label: C#
        source: |
          IAuthleteConfiguration conf = new AuthletePropertiesConfiguration();
          IAuthleteApi api = new AuthleteApi(conf);

          ClientAuthorizationGetListRequest req = new ClientAuthorizationGetListRequest();
          req.Subject = "john";
          req.Start = 0;
          req.End = 5;

          await api.GetClientAuthorizationList(req);
      - lang: php
        label: PHP
        source: |
          $conf = ...;
          $api = new AuthleteApiImpl($conf);

          $req = new ClientAuthorizationGetListRequest();
          $req.setSubject("john");
          $req.setStart(0);
          $req.setEnd(5);

          $api.getClientAuthorizationList($req);
      - lang: ruby
        source: |
          conf = ...
          api = Authlete::Api.new(conf)

          req = Authlete::Model::Request::ClientAuthorizationGetListRequest.new
          req.subject = 'john'
          req.start = 0
          req.end = 5

          api.get_client_authorization_list(req)
      - lang: python
        source: |
          conf = ...
          api = AuthleteApiImpl(conf)

          req = ClientAuthorizationGetListRequest()
          req.subject = 'john'
          req.start = 0
          req.end = 5

          api.getClientAuthorizationList(req)
      - lang: go
        source: |
          conf := ...
          api := api.New(&conf)

          req := dto.ClientAuthorizationGetListRequest{}
          req.Subject = "john"
          req.Start = 0
          req.End = 5

          api.GetClientAuthorizationList(&req)
      - lang: ts
        label: deno
        source: |
          // This API is not supported yet.
  /api/client/authorization/get/list:
    $ref: ./api/client_authorization_get_list_api.yaml
  /api/client/authorization/update/{clientId}:
    $ref: ./api/client_authorization_update_api.yaml
  /api/client/authorization/delete/{clientId}/{subject}:
    $ref: ./api/client_authorization_delete_api.yaml
  /api/client/granted_scopes/get/{clientId}/{subject}:
    $ref: ./api/client_granted_scopes_get_api.yaml
  /api/client/granted_scopes/get/{clientId}:
    $ref: ./api/client_granted_scopes_get_api.yaml
  /api/client/granted_scopes/delete/{clientId}/{subject}:
    $ref: ./api/client_granted_scopes_delete_api.yaml
  /api/auth/authorization:
    $ref: ./api/auth_authorization_api.yaml
  /api/auth/authorization/fail:
    $ref: ./api/auth_authorization_fail_api.yaml
  /api/auth/authorization/issue:
    $ref: ./api/auth_authorization_issue_api.yaml
  /api/pushed_auth_req:
    $ref: ./api/pushed_auth_req_api.yaml
  /api/auth/token:
    $ref: ./api/auth_token_api.yaml
  /api/auth/token/fail:
    $ref: ./api/auth_token_fail_api.yaml
  /api/auth/token/issue:
    $ref: ./api/auth_token_issue_api.yaml
  /api/auth/introspection:
    $ref: ./api/auth_introspection_api.yaml
  /api/auth/introspection/standard:
    $ref: ./api/auth_introspection_standard_api.yaml
  /api/auth/revocation:
    $ref: ./api/auth_revocation_api.yaml
  /api/auth/userinfo:
    $ref: ./api/auth_userinfo_api.yaml
  /api/auth/userinfo/issue:
    $ref: ./api/auth_userinfo_issue_api.yaml
  /api/gm:
    $ref: ./api/grant_m_api.yaml
  /api/service/jwks/get:
    $ref: ./api/service_jwks_get_api.yaml
  /api/service/configuration:
    $ref: ./api/service_configuration_api.yaml
  /api/client/registration:
    $ref: ./api/client_registration_api.yaml
  /api/client/registration/get:
    $ref: ./api/client_registration_get_api.yaml
  /api/client/registration/update:
    $ref: ./api/client_registration_update_api.yaml
  /api/client/registration/delete:
    $ref: ./api/client_registration_delete_api.yaml
  /api/backchannel/authentication:
    $ref: ./api/backchannel_authentication_api.yaml
  /api/backchannel/authentication/issue:
    $ref: ./api/backchannel_authentication_issue_api.yaml
  /api/backchannel/authentication/fail:
    $ref: ./api/backchannel_authentication_fail_api.yaml
  /api/backchannel/authentication/complete:
    $ref: ./api/backchannel_authentication_complete_api.yaml
  /api/device/authorization:
    $ref: ./api/device_authorization_api.yaml
  /api/device/verification:
    $ref: ./api/device_verification_api.yaml
  /api/device/complete:
    $ref: ./api/device_complete_api.yaml
  /api/auth/token/get/list:
    $ref: ./api/auth_token_get_list_api.yaml
  /api/auth/token/create:
    $ref: ./api/auth_token_create_api.yaml
  /api/auth/token/update:
    $ref: ./api/auth_token_update_api.yaml
  /api/auth/token/delete/{accessTokenIdentifier}:
    $ref: ./api/auth_token_delete_api.yaml
  /api/auth/token/revoke:
    $ref: ./api/auth_token_revoke_api.yaml
  /api/jose/verify:
    $ref: ./api/jose_verify_api.yaml
  /api/federation/configuration:
    $ref: ./api/federation_configuration_api.yaml
  /api/info:
    $ref: ./api/info_api.yaml
components:
  responses:
    "400":
      content:
        application/json:
          example:
            resultCode: A001201
            resultMessage: "[A001201] /auth/authorization, TLS must be used."
          schema:
            $ref: '#/components/schemas/result'
      description: ""
    "401":
      content:
        application/json:
          example:
            resultCode: A001202
            resultMessage: "[A001202] /auth/authorization, Authorization header is\
              \ missing."
          schema:
            $ref: '#/components/schemas/result'
      description: ""
    "403":
      content:
        application/json:
          example:
            resultCode: A001215
            resultMessage: "[A001215] /auth/authorization, The client (ID = 26837717140341)\
              \ is locked."
          schema:
            $ref: '#/components/schemas/result'
      description: ""
    "500":
      content:
        application/json:
          example:
            resultCode: A001101
            resultMessage: "[A001101] /auth/authorization, Authlete Server error."
          schema:
            $ref: '#/components/schemas/result'
      description: ""
  schemas:
    AccessToken:
      $ref: ./model/access_token.yaml
    ApplicationType:
      $ref: ./model/application_type.yaml
    AuthorizationDetails:
      $ref: ./model/authorization_details.yaml
    AuthorizationDetailsElement:
      $ref: ./model/authorization_details_element.yaml
    ClaimType:
      $ref: ./model/claim_type.yaml
    ClientAuthenticationMethod:
      $ref: ./model/client_authentication_method.yaml
    ClientExtension:
      $ref: ./model/client_extension.yaml
    Client:
      example:
        serviceNumber: 6
        applicationType: "{}"
        bcNotificationEndpoint: bcNotificationEndpoint
        tlsClientAuthSanEmail: tlsClientAuthSanEmail
        modifiedAt: 5
        logoUris:
        - "{}"
        - "{}"
        singleAccessTokenPerSubject: true
        dpopRequired: true
        signedJwksUri: signedJwksUri
        descriptions:
        - "{}"
        - "{}"
        subjectType: "{}"
        clientNames:
        - "{}"
        - "{}"
        number: 0
        createdAt: 5
        automaticallyRegistered: true
        clientType: "{}"
        tlsClientCertificateBoundAccessTokens: true
        bcDeliveryMode: bcDeliveryMode
        idTokenEncryptionEnc: "{}"
        clientSecret: clientSecret
        selfSignedCertificateKeyId: selfSignedCertificateKeyId
        idTokenSignAlg: "{}"
        clientUri: clientUri
        trustChain:
        - trustChain
        - trustChain
        tlsClientAuthSanDns: tlsClientAuthSanDns
        organizationName: organizationName
        tlsClientAuthSanIp: tlsClientAuthSanIp
        policyUris:
        - "{}"
        - "{}"
        parRequired: true
        derivedSectorIdentifier: derivedSectorIdentifier
        logoUri: logoUri
        requestObjectEncryptionEncMatchRequired: true
        redirectUris:
        - redirectUris
        - redirectUris
        rsResponseSigned: true
        requestEncryptionAlg: "{}"
        defaultAcrs:
        - defaultAcrs
        - defaultAcrs
        requestObjectEncryptionAlgMatchRequired: true
        trustChainExpiresAt: 7
        grantTypes:
        - "{}"
        - "{}"
        authorizationEncryptionEnc: "{}"
        pkceS256Required: true
        tlsClientAuthSubjectDn: tlsClientAuthSubjectDn
        tosUri: tosUri
        requestUris:
        - requestUris
        - requestUris
        explicitlyRegistered: true
        softwareVersion: softwareVersion
        authorizationSignAlg: "{}"
        registrationAccessTokenHash: registrationAccessTokenHash
        extension: "{}"
        jwks: jwks
        clientUris:
        - "{}"
        - "{}"
        clientName: clientName
        requestSignAlg: "{}"
        tosUris:
        - "{}"
        - "{}"
        description: description
        jwksUri: jwksUri
        authorizationDetailsTypes:
        - authorizationDetailsTypes
        - authorizationDetailsTypes
        userInfoEncryptionEnc: "{}"
        clientIdAlias: clientIdAlias
        authorizationEncryptionAlg: "{}"
        clientRegistrationTypes:
        - "{}"
        - "{}"
        loginUri: loginUri
        userInfoSignAlg: "{}"
        policyUri: policyUri
        customMetadata: customMetadata
        tokenAuthSignAlg: "{}"
        authTimeRequired: true
        idTokenEncryptionAlg: "{}"
        clientIdAliasEnabled: true
        bcUserCodeRequired: true
        tokenAuthMethod: "{}"
        defaultMaxAge: 2
        trustAnchorId: trustAnchorId
        responseTypes:
        - "{}"
        - "{}"
        sectorIdentifierUri: sectorIdentifierUri
        clientId: 1
        dynamicallyRegistered: true
        requestObjectRequired: true
        digestAlgorithm: digestAlgorithm
        entityId: entityId
        requestEncryptionEnc: "{}"
        tlsClientAuthSanUri: tlsClientAuthSanUri
        frontChannelRequestObjectEncryptionRequired: true
        softwareId: softwareId
        trustChainUpdatedAt: 9
        userInfoEncryptionAlg: "{}"
        developer: developer
        attributes:
        - "{}"
        - "{}"
        rsSignedRequestKeyId: rsSignedRequestKeyId
        bcRequestSignAlg: "{}"
        pkceRequired: true
        contacts:
        - contacts
        - contacts
      properties:
        number:
          description: |
            The sequential number of the client. The value of this property is assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        serviceNumber:
          description: |
            The sequential number of the service of the client application. The value of this property is
            assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        developer:
          description: |
            The developer of the client application.
          type: string
        clientName:
          description: |
            The name of the client application. This property corresponds to `client_name` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        clientNames:
          description: |
            Client names with language tags. If the client application has different names for different
            languages, this property can be used to register the names.
          items:
            $ref: ./model/tagged_value.yaml
          type: array
        description:
          description: The description about the client application.
          type: string
        descriptions:
          description: |
            Descriptions about the client application with language tags. If the client application has different
            descriptions for different languages, this property can be used to register the descriptions.
          items:
            $ref: ./model/tagged_value.yaml
          type: array
        clientId:
          description: The client ID. The value of this property is assigned by Authlete.
          format: int64
          readOnly: true
          type: integer
        clientSecret:
          description: |
            The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
            property is assigned by Authlete.

            Note that Authlete issues a client secret even to a "public" client application, but the client
            application should not use the client secret unless it changes its client type to "confidential".
            That is, a public client application should behave as if it had not been issued a client secret.
            To be specific, a token request from a public client of Authlete should not come along with a
            client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
            says as follows.

            > Confidential clients or other clients issued client credentials MUST authenticate with the
            authorization server as described in Section 2.3 when making requests to the token endpoint.
          readOnly: true
          type: string
        clientIdAlias:
          description: |
            The alias of the client ID.

            Note that the client ID alias is recognized only when this client's `clientIdAliasEnabled` property
            is set to `true` AND the service's `clientIdAliasEnabled` property is also set to `true`.
          type: string
        clientIdAliasEnabled:
          description: |
            The flag to indicate whether the client ID alias is enabled or not.

            Note that a service also has `clientIdAliasEnabled` property. If the service's `clientIdAliasEnabled`
            property is set to `false`, the client ID alias of this client is not recognized even if this
            client's `clientIdAliasEnabled` property is set to `true`.
          type: boolean
        clientType:
          $ref: ./model/client_type.yaml
        applicationType:
          $ref: ./model/application_type.yaml
        logoUri:
          description: |
            The URL pointing to the logo image of the client application.

            This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        logoUris:
          description: |
            Logo image URLs with language tags. If the client application has different logo images for
            different languages, this property can be used to register URLs of the images.
          items:
            $ref: ./model/tagged_value.yaml
          type: array
        contacts:
          description: |
            An array of email addresses of people responsible for the client application.

            This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
            Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          items:
            type: string
          type: array
        tlsClientCertificateBoundAccessTokens:
          description: |
            The flag to indicate whether this client use TLS client certificate bound access tokens.
          type: boolean
        dynamicallyRegistered:
          description: |
            The flag to indicate whether this client has been registered dynamically.
            For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
          readOnly: true
          type: boolean
        softwareId:
          description: |
            The unique identifier string assigned by the client developer or software publisher used by
            registration endpoints to identify the client software to be dynamically registered.

            This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
            of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
          type: string
        softwareVersion:
          description: |
            The version identifier string for the client software identified by the software ID.

            This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
            of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
          type: string
        registrationAccessTokenHash:
          description: |
            The hash of the registration access token for this client.
          type: string
        createdAt:
          description: The time at which this client was created. The value is represented
            as milliseconds since the UNIX epoch (1970-01-01).
          format: int64
          readOnly: true
          type: integer
        modifiedAt:
          description: The time at which this client was last modified. The value
            is represented as milliseconds since the UNIX epoch (1970-01-01).
          format: int64
          readOnly: true
          type: integer
        grantTypes:
          description: |
            A string array of grant types which the client application declares that it will restrict itself to using.
            This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
            2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          items:
            $ref: ./model/grant_type.yaml
          type: array
        responseTypes:
          description: |
            A string array of response types which the client application declares that it will restrict itself to using.
            This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
            2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          items:
            $ref: ./model/response_type.yaml
          type: array
        redirectUris:
          description: |
            Redirect URIs that the client application uses to receive a response from the authorization endpoint.
            Requirements for a redirect URI are as follows.

            **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))

            - Must be an absolute URI.
            - Must not have a fragment component.

            **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
            application_type")

            - The scheme of the redirect URI used for Implicit Grant by a client application whose application
            is `web` must be `https`. This is checked at runtime by Authlete.
            - The hostname of the redirect URI used for Implicit Grant by a client application whose application
            type is `web` must not be `localhost`. This is checked at runtime by Authlete.
            - The scheme of the redirect URI used by a client application whose application type is `native`
            must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
            is `localhost`. This is checked at runtime by Authlete.

            **Requirements by Authlete**

            - Must consist of printable ASCII letters only.
            - Must not exceed 200 letters.

            Note that Authlete allows the application type to be `null`. In other words, a client application
            does not have to choose `web` or `native` as its application type.
            If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.

            An authorization request from a client application which has not registered any redirect URI
            fails unless at least all the following conditions are satisfied.

            - The client type of the client application is `confidential`.
            - The value of `response_type` request parameter is `code`.
            - The authorization request has the `redirect_uri` request parameter.
            - The value of `scope` request parameter does not contain `openid`.

            RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
            Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
            details), but OpenID Connect requires exact match.
          items:
            type: string
          type: array
        authorizationSignAlg:
          $ref: ./model/jws_alg.yaml
        authorizationEncryptionAlg:
          $ref: ./model/jwe_alg.yaml
        authorizationEncryptionEnc:
          $ref: ./model/jwe_enc.yaml
        tokenAuthMethod:
          $ref: ./model/client_authentication_method.yaml
        tokenAuthSignAlg:
          $ref: ./model/jws_alg.yaml
        selfSignedCertificateKeyId:
          description: |
            The key ID of a JWK containing a self-signed certificate of this client.
          type: string
        tlsClientAuthSubjectDn:
          description: |
            The string representation of the expected subject distinguished name of the certificate this
            client will use in mutual TLS authentication.

            See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
          type: string
        tlsClientAuthSanDns:
          description: |
            The string representation of the expected DNS subject alternative name of the certificate this
            client will use in mutual TLS authentication.

            See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
          type: string
        tlsClientAuthSanUri:
          description: |
            The string representation of the expected URI subject alternative name of the certificate this
            client will use in mutual TLS authentication.

            See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
          type: string
        tlsClientAuthSanIp:
          description: |
            The string representation of the expected IP address subject alternative name of the certificate
            this client will use in mutual TLS authentication.

            See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
          type: string
        tlsClientAuthSanEmail:
          description: |
            The string representation of the expected email address subject alternative name of the certificate
            this client will use in mutual TLS authentication.

            See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
            Registration" for details.
          type: string
        parRequired:
          description: |
            The flag to indicate whether this client is required to use the pushed authorization request endpoint.
            This property corresponds to the `require_pushed_authorization_requests` client metadata defined
            in "OAuth 2.0 Pushed Authorization Requests".
          type: boolean
        requestObjectRequired:
          description: |
            The flag to indicate whether authorization requests from this client are always required to
            utilize a request object by using either `request` or `request_uri` request parameter.

            If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
            set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
            client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
          type: boolean
        requestSignAlg:
          $ref: ./model/jws_alg.yaml
        requestEncryptionAlg:
          $ref: ./model/jwe_alg.yaml
        requestEncryptionEnc:
          $ref: ./model/jwe_enc.yaml
        requestUris:
          description: |
            An array of URLs each of which points to a request object.

            Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
            This property is used for the pre-registration.
            See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
          items:
            type: string
          type: array
        defaultMaxAge:
          description: |
            The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.

            This property corresponds to `default_max_age` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          format: int32
          type: integer
        defaultAcrs:
          description: |
            The default ACRs (Authentication Context Class References). This value is used when an authorization
            request from the client application has neither `acr_values` request parameter nor `acr` claim
            in claims request parameter.
          items:
            type: string
          type: array
        idTokenSignAlg:
          $ref: ./model/jws_alg.yaml
        idTokenEncryptionAlg:
          $ref: ./model/jwe_alg.yaml
        idTokenEncryptionEnc:
          $ref: ./model/jwe_enc.yaml
        authTimeRequired:
          description: |
            The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.

            This property corresponds to `require_auth_time` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: boolean
        subjectType:
          $ref: ./model/subject_type.yaml
        sectorIdentifierUri:
          description: |
            The value of the sector identifier URI.
            This represents the `sector_identifier_uri` client metadata which is defined in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
          type: string
        derivedSectorIdentifier:
          description: |
            The sector identifier host component as derived from either the `sector_identifier_uri` or the
            registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
            are also registered, the value of this property is `null`.
          readOnly: true
          type: string
        jwksUri:
          description: |
            The URL pointing to the JWK Set of the client application.
            The content pointed to by the URL is JSON which complies with the format described in
            [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
            The JWK Set must not include private keys of the client application.

            If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
            and/or signs request objects, it must make available its JWK Set containing public keys for the
            encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
            Set from the URL as necessary.

            [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
            properties to be registered at the same time. However, Authlete does not use the content of `jwks`
            when `jwksUri` is registered.

            This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        jwks:
          description: |
            The content of the JWK Set of the client application.
            The format is described in
            [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
            The JWK Set must not include private keys of the client application.

            [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
            properties to be registered at the same time. However, Authlete does not use the content of `jwks`
            when `jwksUri` is registered.

            This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
            Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        userInfoSignAlg:
          $ref: ./model/jws_alg.yaml
        userInfoEncryptionAlg:
          $ref: ./model/jwe_alg.yaml
        userInfoEncryptionEnc:
          $ref: ./model/jwe_enc.yaml
        loginUri:
          description: |
            The URL which a third party can use to initiate a login by the client application.

            This property corresponds to `initiate_login_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        tosUri:
          description: |
            The URL pointing to the "Terms Of Service" page.

            This property corresponds to `tos_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        tosUris:
          description: |
            URLs of "Terms Of Service" pages with language tags.

            If the client application has different "Terms Of Service" pages for different languages,
            this property can be used to register the URLs.
          items:
            $ref: ./model/tagged_value.yaml
          type: array
        policyUri:
          description: |
            The URL pointing to the page which describes the policy as to how end-user's profile data is used.

            This property corresponds to `policy_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        policyUris:
          description: |
            URLs of policy pages with language tags.
            If the client application has different policy pages for different languages, this property can be used to register the URLs.
          items:
            $ref: ./model/tagged_value.yaml
          type: array
        clientUri:
          description: |
            The URL pointing to the home page of the client application.

            This property corresponds to `client_uri` in
            [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
          type: string
        clientUris:
          description: |
            Home page URLs with language tags.
            If the client application has different home pages for different languages, this property can
            be used to register the URLs.
          items:
            $ref: ./model/tagged_value.yaml
          type: array
        bcDeliveryMode:
          description: |
            The backchannel token delivery mode.

            This property corresponds to the `backchannel_token_delivery_mode` metadata.
            The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
            Backchannel Authentication)".
          type: string
        bcNotificationEndpoint:
          description: |
            The backchannel client notification endpoint.

            This property corresponds to the `backchannel_client_notification_endpoint` metadata.
            The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
            Backchannel Authentication)".
          type: string
        bcRequestSignAlg:
          $ref: ./model/jws_alg.yaml
        bcUserCodeRequired:
          description: |
            The boolean flag to indicate whether a user code is required when this client makes a backchannel
            authentication request.

            This property corresponds to the `backchannel_user_code_parameter` metadata.
          type: boolean
        attributes:
          description: |
            The attributes of this client.
          items:
            $ref: ./model/pair.yaml
          type: array
        extension:
          $ref: ./model/client_extension.yaml
        authorizationDetailsTypes:
          description: |
            The authorization details types that this client may use as values of the `type` field in
            `authorization_details`.

            This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
            Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.

            Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
            to align with the change made by the 5th draft of the RAR specification.
          items:
            type: string
          type: array
        customMetadata:
          description: |
            The custom client metadata in JSON format.

            Standard specifications define client metadata as necessary. The following are such examples.

            * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
            * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
            * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
            * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
            * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
            * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)

            Standard client metadata included in Client Registration Request and Client Update Request (cf.
            [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
            and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
            to corresponding properties of the client application. For example, the value of the `client_name`
            client metadata in Client Registration/Update Request is set to the clientName property. On the
            other hand, unrecognized client metadata are discarded.

            By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
            of Service, Authlete can recognize them and stores their values into the database. The stored
            custom client metadata values can be referenced by this property.
          type: string
        frontChannelRequestObjectEncryptionRequired:
          description: |
            The flag indicating whether encryption of request object is required when the request object
            is passed through the front channel.

            This flag does not affect the processing of request objects at the Pushed Authorization Request
            Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
            Unecrypted request objects are accepted at the endpoint even if this flag is `true`.

            This flag does not indicate whether a request object is always required. There is a different
            flag, `requestObjectRequired`, for the purpose.

            Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
            flag of the service is `true`.
          type: boolean
        requestObjectEncryptionAlgMatchRequired:
          description: |
            The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
            client metadata.

            The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_alg
            >
            > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
              Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
              since this signals to the OP that a client_secret value needs to be returned from which the
              symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
              supported encryption algorithms or send unencrypted Request Objects, even when this parameter
              is present. If both signing and encryption are requested, the Request Object will be signed
              then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
              is that the RP is not declaring whether it might encrypt any Request Objects.

            The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
            Request Objects, even when this parameter is present."

            The property that represents the client metadata is `requestEncryptionAlg`. See the description
            of `requestEncryptionAlg` for details.

            Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
            flag of the service is `true`.
          type: boolean
        requestObjectEncryptionEncMatchRequired:
          description: |
            The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
            client metadata.

            The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_enc
            >
            > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
              Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
              value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
              MUST also be provided.

            The property that represents the client metadata is `requestEncryptionEnc`. See the description
            of `requestEncryptionEnc`  for details.

            Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
            flag of the service is `true`.
          type: boolean
        digestAlgorithm:
          description: |
            The digest algorithm that this client requests the server to use
            when it computes digest values of <a href=
            "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
            >external attachments</a>, which may be referenced from within ID tokens
            or userinfo responses (or any place that can have the `verified_claims` claim).

            Possible values are listed in the <a href=
            "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
            >Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),
            but the server does not necessarily support all the values there. When
            this property is omitted, `sha-256` is used as the default algorithm.

            This property corresponds to the `digest_algorithm` client metadata
            which was defined by the third implementer's draft of
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
          type: string
        singleAccessTokenPerSubject:
          description: |
            If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.

            Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.

            Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
          type: boolean
        pkceRequired:
          description: |
            The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.

            If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.

            See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
          type: boolean
        pkceS256Required:
          description: |
            The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.

            If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
            whenever it includes the `code_challenge` request parameter.
            Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
          type: boolean
        dpopRequired:
          description: |
            If the DPoP is required for this client
          type: boolean
        automaticallyRegistered:
          description: |
            The flag indicating whether this client was registered by the
            "automatic" client registration of OIDC Federation.
          type: boolean
        explicitlyRegistered:
          description: |
            The flag indicating whether this client was registered by the
            "explicit" client registration of OIDC Federation.
          type: boolean
        rsResponseSigned:
          description: |
            The flag indicating whether this service signs responses from the resource server.
          type: boolean
        rsSignedRequestKeyId:
          description: |
            Get the key ID of a JWK containing the public key used by this client to sign requests to the resource server.
          type: string
        clientRegistrationTypes:
          description: |
            Get the client registration types that the client has declared it may use.
          items:
            $ref: ./model/client_registration_type.yaml
          type: array
        organizationName:
          description: "Get the human-readable name representing the organization\
            \ that manages this client. This property corresponds \nto the organization_name\
            \ client metadata that is defined in OpenID Connect Federation 1.0.\n"
          type: string
        signedJwksUri:
          description: "Get the URI of the endpoint that returns this client's JWK\
            \ Set document in the JWT format. This property \ncorresponds to the `signed_jwks_uri`\
            \ client metadata defined in OpenID Connect Federation 1.0.\n"
          type: string
        entityId:
          description: |
            the entity ID of this client.
          type: string
        trustAnchorId:
          description: "The entity ID of the trust anchor of the trust chain that\
            \ was used when this client was registered or updated by \nthe mechanism\
            \ defined in OpenID Connect Federation 1.0\n"
          type: string
        trustChain:
          description: |
            The trust chain that was used when this client was registered or updated by the mechanism defined in
            OpenID Connect Federation 1.0
          items:
            type: string
          type: array
        trustChainExpiresAt:
          description: "the expiration time of the trust chain that was used when\
            \ this client was registered or updated by the mechanism \ndefined in\
            \ OpenID Connect Federation 1.0. The value is represented as milliseconds\
            \ elapsed since the Unix epoch (1970-01-01).\n"
          format: int64
          type: integer
        trustChainUpdatedAt:
          description: |
            the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
          format: int64
          type: integer
      type: object
    DeliveryMode:
      $ref: ./model/delivery_mode.yaml
    Display:
      $ref: ./model/display.yaml
    DynamicScope:
      $ref: ./model/dynamic_scope.yaml
    GrantType:
      $ref: ./model/grant_type.yaml
    JweAlg:
      $ref: ./model/jwe_alg.yaml
    JweEnc:
      $ref: ./model/jwe_enc.yaml
    JwsAlg:
      $ref: ./model/jws_alg.yaml
    NamedUri:
      $ref: ./model/named_uri.yaml
    Pair:
      $ref: ./model/pair.yaml
    Prompt:
      $ref: ./model/prompt.yaml
    Property:
      $ref: ./model/property.yaml
    ResponseType:
      $ref: ./model/response_type.yaml
    Scope:
      $ref: ./model/scope.yaml
    ServiceProfile:
      $ref: ./model/service_profile.yaml
    Service:
      example:
        metadata:
        - "{}"
        - "{}"
        predefinedTransformedClaims: predefinedTransformedClaims
        apiKey: 1
        supportedScopes:
        - "{}"
        - "{}"
        idTokenSignatureKeyId: idTokenSignatureKeyId
        singleAccessTokenPerSubject: true
        signedJwksUri: signedJwksUri
        issuer: issuer
        dynamicRegistrationSupported: true
        number: 0
        supportedServiceProfiles:
        - "{}"
        - "{}"
        authorizationResponseDuration: 7
        refreshTokenIdempotent: true
        supportedDocumentsCheckMethods:
        - supportedDocumentsCheckMethods
        - supportedDocumentsCheckMethods
        supportedClaims:
        - supportedClaims
        - supportedClaims
        registrationManagementEndpoint: https://openapi-generator.tech
        accessTokenForExternalAttachmentEmbedded: true
        missingClientIdAllowed: true
        userCodeLength: 7
        deviceFlowPollingInterval: 6
        developerSnsCredentials: developerSnsCredentials
        deviceFlowCodeDuration: 1
        supportedTrustFrameworks:
        - supportedTrustFrameworks
        - supportedTrustFrameworks
        developerAuthenticationCallbackApiKey: developerAuthenticationCallbackApiKey
        deviceVerificationUriComplete: https://openapi-generator.tech
        refreshTokenKept: true
        authenticationCallbackEndpoint: https://openapi-generator.tech
        apiSecret: apiSecret
        developerAuthenticationCallbackApiSecret: developerAuthenticationCallbackApiSecret
        accessTokenDuration: 3
        federationSignatureKeyId: federationSignatureKeyId
        backchannelUserCodeParameterSupported: true
        supportedVerifiedClaims:
        - supportedVerifiedClaims
        - supportedVerifiedClaims
        clientsPerDeveloper: 5
        unauthorizedOnClientConfigSupported: true
        supportedDigestAlgorithms:
        - supportedDigestAlgorithms
        - supportedDigestAlgorithms
        snsCredentials:
        - "{}"
        - "{}"
        directRevocationEndpointEnabled: true
        federationJwks: federationJwks
        grantManagementActionRequired: true
        requestObjectAudienceChecked: true
        supportedDocuments:
        - supportedDocuments
        - supportedDocuments
        jwks: jwks
        tokenExpirationLinked: true
        supportedCustomClientMetadata:
        - supportedCustomClientMetadata
        - supportedCustomClientMetadata
        directAuthorizationEndpointEnabled: true
        pushedAuthReqEndpoint: https://openapi-generator.tech
        developerAuthenticationCallbackEndpoint: https://openapi-generator.tech
        tokenEndpoint: https://openapi-generator.tech
        supportedIntrospectionAuthMethods:
        - "{}"
        - "{}"
        supportedClaimTypes:
        - "{}"
        - "{}"
        mutualTlsValidatePkiCertChain: true
        scopeRequired: true
        policyUri: https://openapi-generator.tech
        supportedDocumentsVerificationMethods:
        - supportedDocumentsVerificationMethods
        - supportedDocumentsVerificationMethods
        verifiedClaimsValidationSchemaSet: verifiedClaimsValidationSchemaSet
        userInfoEndpoint: https://openapi-generator.tech
        dcrScopeUsedAsRequestable: true
        registrationEndpoint: https://openapi-generator.tech
        supportedElectronicRecords:
        - supportedElectronicRecords
        - supportedElectronicRecords
        deviceVerificationUri: https://openapi-generator.tech
        authenticationCallbackApiSecret: authenticationCallbackApiSecret
        requestObjectRequired: true
        backchannelAuthenticationEndpoint: https://openapi-generator.tech
        serviceOwnerNumber: 6
        authorizationSignatureKeyId: authorizationSignatureKeyId
        endSessionEndpoint: https://openapi-generator.tech
        grantManagementEndpoint: grantManagementEndpoint
        supportedUiLocales:
        - supportedUiLocales
        - supportedUiLocales
        nbfOptional: true
        attributes:
        - "{}"
        - "{}"
        traditionalRequestObjectProcessingApplied: true
        rsSignedRequestKeyId: rsSignedRequestKeyId
        backchannelBindingMessageRequiredInFapi: true
        pkceRequired: true
        claimShortcutRestrictive: true
        directIntrospectionEndpointEnabled: true
        dcrDuplicateSoftwareIdBlocked: true
        hsks:
        - "{}"
        - "{}"
        jwtGrantByIdentifiableClientsOnly: true
        modifiedAt: 2
        introspectionEndpoint: https://openapi-generator.tech
        supportedBackchannelTokenDeliveryModes:
        - "{}"
        - "{}"
        accessTokenType: accessTokenType
        refreshTokenDurationReset: true
        federationRegistrationEndpoint: federationRegistrationEndpoint
        createdAt: 5
        supportedClientRegistrationTypes:
        - "{}"
        - "{}"
        loopbackRedirectionUriVariable: true
        tlsClientCertificateBoundAccessTokens: true
        userCodeCharset: "{}"
        issSuppressed: true
        federationConfigurationDuration: 1
        supportedVerificationMethods:
        - supportedVerificationMethods
        - supportedVerificationMethods
        trustAnchors:
        - "{}"
        - "{}"
        serviceDocumentation: https://openapi-generator.tech
        revocationEndpoint: https://openapi-generator.tech
        hsmEnabled: true
        organizationName: organizationName
        supportedDisplays:
        - "{}"
        - "{}"
        parRequired: true
        errorDescriptionOmitted: true
        refreshTokenDurationKept: true
        requestObjectEncryptionEncMatchRequired: true
        jwtGrantEncryptedJwtRejected: true
        trustedRootCertificates:
        - trustedRootCertificates
        - trustedRootCertificates
        authorizationEndpoint: https://openapi-generator.tech
        supportedDocumentsValidationMethods:
        - supportedDocumentsValidationMethods
        - supportedDocumentsValidationMethods
        rsResponseSigned: true
        supportedClaimLocales:
        - supportedClaimLocales
        - supportedClaimLocales
        requestObjectEncryptionAlgMatchRequired: true
        pkceS256Required: true
        tokenExchangeUnsignedJwtRejected: true
        tosUri: https://openapi-generator.tech
        authorityHints:
        - authorityHints
        - authorityHints
        supportedAttachments:
        - "{}"
        - "{}"
        userInfoSignatureKeyId: userInfoSignatureKeyId
        directUserInfoEndpointEnabled: true
        supportedDocumentsMethods:
        - supportedDocumentsMethods
        - supportedDocumentsMethods
        accessTokenSignatureKeyId: accessTokenSignatureKeyId
        jwtGrantUnsignedJwtRejected: true
        directTokenEndpointEnabled: true
        mtlsEndpointAliases:
        - "{}"
        - "{}"
        tokenExchangeByIdentifiableClientsOnly: true
        description: description
        jwksUri: https://openapi-generator.tech
        pushedAuthReqDuration: 9
        supportedEvidence:
        - supportedEvidence
        - supportedEvidence
        supportedAcrs:
        - supportedAcrs
        - supportedAcrs
        errorUriOmitted: true
        directJwksEndpointEnabled: true
        supportedIdentityDocuments:
        - supportedIdentityDocuments
        - supportedIdentityDocuments
        tokenExchangeByConfidentialClientsOnly: true
        supportedResponseTypes:
        - "{}"
        - "{}"
        clientIdAliasEnabled: true
        supportedTokenAuthMethods:
        - "{}"
        - "{}"
        allowableClockSkew: 7
        deviceAuthorizationEndpoint: https://openapi-generator.tech
        backchannelAuthReqIdDuration: 1
        tokenExchangeByPermittedClientsOnly: true
        tokenExchangeEncryptedJwtRejected: true
        supportedGrantTypes:
        - "{}"
        - "{}"
        supportedAuthorizationDetailsTypes:
        - supportedAuthorizationDetailsTypes
        - supportedAuthorizationDetailsTypes
        backchannelPollingInterval: 1
        serviceName: serviceName
        accessTokenSignAlg: "{}"
        idTokenDuration: 4
        authenticationCallbackApiKey: authenticationCallbackApiKey
        openidDroppedOnRefreshWithoutOfflineAccess: true
        frontChannelRequestObjectEncryptionRequired: true
        federationEnabled: true
        refreshTokenDuration: 2
        supportedRevocationAuthMethods:
        - "{}"
        - "{}"
        supportedSnses:
        - "{}"
        - "{}"
        supportedDeveloperSnses:
        - "{}"
        - "{}"
      properties:
        number:
          description: The sequential number of the service. The value of this property
            is assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        serviceOwnerNumber:
          description: The sequential number of the service owner of the service.
            The value of this property is assigned by Authlete.
          format: int32
          readOnly: true
          type: integer
        serviceName:
          description: The name of this service.
          type: string
        issuer:
          description: |
            The issuer identifier of the service.

            A URL that starts with  https:// and has no query or fragment component.

            The value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)
            and `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          type: string
        description:
          description: The description about the service.
          type: string
        apiKey:
          description: The API key. The value of this property is assigned by Authlete.
          format: int64
          readOnly: true
          type: integer
        apiSecret:
          description: The API secret. A random 256-bit value encoded by base64url
            (43 letters). The value of this property is assigned by Authlete.
          readOnly: true
          type: string
        clientsPerDeveloper:
          description: The maximum number of client applications that a developer
            is allowed to create. `0` means no limit.
          format: int32
          readOnly: true
          type: integer
        clientIdAliasEnabled:
          description: |
            The flag to indicate whether the 'Client ID Alias' feature is enabled or not.
            When a new client is created, Authlete generates a numeric value and assigns it as a client ID to the newly created client. In addition to the client ID, each client can have a client ID alias. The client ID alias is, however, recognized only when this property (`clientIdAliasEnabled`) is set to `true`.
          type: boolean
        metadata:
          description: |
            The `metadata` of the service. The content of the returned array depends on contexts.
            The predefined service metadata is listed in the following table.

              | Key | Description |
              | --- | --- |
              | `clientCount` | The number of client applications which belong to this service.  |
          items:
            $ref: ./model/pair.yaml
          type: array
        createdAt:
          description: |
            The time at which this service was created. The value is represented as milliseconds since the
            UNIX epoch (`1970-01-01`).
          format: int64
          readOnly: true
          type: integer
        modifiedAt:
          description: |
            The time at which this service was last modified. The value is represented as milliseconds since
            the UNIX epoch (1970-01-01).
          format: int64
          readOnly: true
          type: integer
        authenticationCallbackEndpoint:
          description: |
            A Web API endpoint for user authentication which is to be prepared on the service side.

            The endpoint must be implemented if you do not implement the UI at the authorization endpoint
            but use the one provided by Authlete.

            The user authentication at the authorization endpoint provided by Authlete is performed by making
            a `POST` request to this endpoint.
          format: uri
          type: string
        authenticationCallbackApiKey:
          description: |
            API key for basic authentication at the authentication callback endpoint.

            If the value is not empty, Authlete generates Authorization header for Basic authentication when
            making a request to the authentication callback endpoint.
          type: string
        authenticationCallbackApiSecret:
          description: API secret for `basic` authentication at the authentication
            callback endpoint.
          type: string
        supportedSnses:
          description: |
            SNSes you want to support 'social login' in the UI at the
            authorization endpoint provided by Authlete.

            You need to register a `client` application in each SNS that is set
            as this parameter and set Authlete server's `/api/sns/redirection`
            as the redirection endpoint of the client application.
          items:
            $ref: ./model/sns.yaml
          type: array
        snsCredentials:
          description: |
            `SNS` credentials which Authlete uses to make requests to SNSes. The format is JSON.
          items:
            $ref: ./model/sns_credentials.yaml
          type: array
        supportedAcrs:
          description: |
            Values of acrs (authentication context class references) that the service supports.

            The value of this property is used as `acr_values_supported`
            property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            type: string
          readOnly: true
          type: array
        developerAuthenticationCallbackEndpoint:
          description: |
            A Web API endpoint for developer authentication which is to be prepared on the server side.

            The endpoint must be implemented if you use Developer Console.

            The developer authentication at the login page of Developer Console is performed by making a `POST`
            request to this endpoint.
          format: uri
          type: string
        developerAuthenticationCallbackApiKey:
          description: |
            API key for basic authentication at the developer authentication callback endpoint.

            If the value is not empty, Authlete generates Authorization header for Basic authentication when
            making a request to the developer authentication callback endpoint.
          type: string
        developerAuthenticationCallbackApiSecret:
          description: API secret for basic authentication at the developer authentication
            callback endpoint.
          type: string
        supportedDeveloperSnses:
          description: |
            SNSes you want to support 'social login' in the login page of Developer Console provided by Authlete.

            You need to register a client application in each SNS checked here and set Authlete server's
            `/api/developer/sns/redirection` as the redirection endpoint of the client application.
          items:
            $ref: ./model/sns.yaml
          type: array
        developerSnsCredentials:
          description: SNS credentials which Authlete uses to make requests to SNSes.
            The format is JSON.
          type: string
        supportedGrantTypes:
          description: |
            Values of `grant_type` request parameter that the service supports.

            The value of this property is used as `grant_types_supported property` in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            $ref: ./model/grant_type.yaml
          type: array
        supportedResponseTypes:
          description: |
            Values of `response_type` request parameter that
            the service supports. Valid values are listed in Response Type.

            The value of this property is used as `response_types_supported` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            $ref: ./model/response_type.yaml
          type: array
        supportedAuthorizationDetailsTypes:
          description: |
            The supported data types that can be used as values of the type field in `authorization_details`.

            This property corresponds to the `authorization_details_types_supported` metadata. See "OAuth 2.0
            Rich Authorization Requests" (RAR) for details.
          items:
            type: string
          type: array
        supportedServiceProfiles:
          description: |
            The profiles that this service supports.
          items:
            $ref: ./model/service_profile.yaml
          type: array
        errorDescriptionOmitted:
          description: |
            The flag to indicate whether the `error_description` response parameter is omitted.

            According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include
            the `error_description` response parameter in error responses.

            If `true`, Authlete does not embed the `error_description` response parameter in error responses.
          type: boolean
        errorUriOmitted:
          description: |
            The flag to indicate whether the `error_uri` response parameter is omitted.

            According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.

            If `true`, Authlete does not embed the
            `error_uri` response parameter in error responses.
          type: boolean
        authorizationEndpoint:
          description: |
            The authorization endpoint of the service.

            A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.

            The value of this property is used as `authorization_endpoint` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        directAuthorizationEndpointEnabled:
          description: |
            The flag to indicate whether the direct authorization endpoint is enabled or not.

            The path of the endpoint is `/api/auth/authorization/direct/service-api-key`.
          type: boolean
        supportedUiLocales:
          description: |
            UI locales that the service supports.

            Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.

            The value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            type: string
          type: array
        supportedDisplays:
          description: |
            Values of `display` request parameter that service supports.

            The value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            $ref: ./model/display.yaml
          type: array
        pkceRequired:
          description: |
            The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.

            If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.

            See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
          type: boolean
        pkceS256Required:
          description: |
            The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.

            If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
            whenever it includes the `code_challenge` request parameter.
            Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
          type: boolean
        authorizationResponseDuration:
          description: |
            The duration of authorization response JWTs in seconds.

            [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
            `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
            from the authorization endpoint will be packed into a JWT. This property is used to compute the
            value of the `exp` claim of the JWT.
          format: int64
          type: integer
        tokenEndpoint:
          description: |
            The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.

            A URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.

            The value of this property is used as `token_endpoint` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        directTokenEndpointEnabled:
          description: |
            The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint
            is `/api/auth/token/direct/service-api-key`.
          type: boolean
        supportedTokenAuthMethods:
          description: |
            Client authentication methods supported by the token endpoint of the service.

            The value of this property is used as `token_endpoint_auth_methods_supports` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            $ref: ./model/client_authentication_method.yaml
          type: array
        missingClientIdAllowed:
          description: |
            The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.

            This flag should not be set unless you have special reasons.
          type: boolean
        revocationEndpoint:
          description: |
            The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.

            A URL that starts with `https://`. For example, `https://example.com/auth/revocation`.
          format: uri
          type: string
        directRevocationEndpointEnabled:
          description: 'The flag to indicate whether the direct revocation endpoint
            is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. '
          type: boolean
        supportedRevocationAuthMethods:
          description: |
            Client authentication methods supported at the revocation endpoint.
          items:
            $ref: ./model/client_authentication_method.yaml
          type: array
        introspectionEndpoint:
          description: The URI of the introspection endpoint.
          format: uri
          type: string
        directIntrospectionEndpointEnabled:
          description: "The flag to indicate whether the direct userinfo endpoint\
            \ is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
          type: boolean
        supportedIntrospectionAuthMethods:
          description: |
            Client authentication methods supported at the introspection endpoint.
          items:
            $ref: ./model/client_authentication_method.yaml
          type: array
        pushedAuthReqEndpoint:
          description: |
            The URI of the pushed authorization request endpoint.

            This property corresponds to the `pushed_authorization_request_endpoint` metadata defined in "[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)" of OAuth 2.0 Pushed Authorization Requests.
          format: uri
          type: string
        pushedAuthReqDuration:
          description: |
            The duration of pushed authorization requests in seconds.

            [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)
            defines an endpoint (called "pushed authorization request endpoint") which client applications
            can register authorization requests into and get corresponding URIs (called "request URIs") from.
            The issued URIs represent the registered authorization requests. The client applications can use
            the URIs as the value of the `request_uri` request parameter in an authorization request.

            The property represents the duration of registered authorization requests and is used as the value
            of the `expires_in` parameter in responses from the pushed authorization request endpoint.
          format: int64
          type: integer
        parRequired:
          description: |
            The flag to indicate whether this service requires that clients use the pushed authorization
            request endpoint.

            This property corresponds to the `require_pushed_authorization_requests` server metadata defined
            in [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).
          type: boolean
        requestObjectRequired:
          description: |
            The flag to indicate whether this service requires that authorization requests always utilize
            a request object by using either request or `request_uri` request parameter.

            If this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is
            `false`, the value of `require_signed_request_object` server metadata of this service is reported
            as `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).
            That `require_signed_request_object` is `true` means that authorization requests which don't
            conform to the JAR specification are rejected.
          type: boolean
        traditionalRequestObjectProcessingApplied:
          description: |
            The flag to indicate whether a request object is processed based on rules defined in
            [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT
            Secured Authorization Request).

            Differences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.
              - JAR requires that a request object be always -signed.
              - JAR does not allow request parameters outside a request object to be referred to.
              - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.
              - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an
              - OIDC request even if the request object includes the request parameter.

            If this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of
            `require_signed_request_object` server metadata of this service
            is reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured
            Authorization Request). That `require_signed_request_object` is `true` means that authorization
            requests which don't conform to the JAR specification are rejected.
          type: boolean
        mutualTlsValidatePkiCertChain:
          description: |
            The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.
          type: boolean
        trustedRootCertificates:
          description: |
            The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.
          items:
            type: string
          type: array
        mtlsEndpointAliases:
          description: |
            The MTLS endpoint aliases.

            This property corresponds to the mtls_endpoint_aliases metadata defined in "5. Metadata for Mutual TLS Endpoint Aliases" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).

            The aliases will be embedded in the response from the discovery endpoint like the following.

            ```json
            {
              ......,
              "mtls_endpoint_aliases": {
                "token_endpoint":         "https://mtls.example.com/token",
                "revocation_endpoint":    "https://mtls.example.com/revo",
                "introspection_endpoint": "https://mtls.example.com/introspect"
              }
            }
            ```
          items:
            $ref: ./model/named_uri.yaml
          type: array
        accessTokenType:
          description: |
            The access token type.

            This value is used as the value of `token_type` property in access token responses. If this service
            complies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should
            be `Bearer`.

            See [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.
          type: string
        tlsClientCertificateBoundAccessTokens:
          description: |
            The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.
          type: boolean
        accessTokenDuration:
          description: |
            The duration of access tokens in seconds. This value is used as the value of `expires_in` property
            in access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).
          format: int64
          type: integer
        singleAccessTokenPerSubject:
          description: |
            The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.

            If `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.

            Note that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.
          type: boolean
        accessTokenSignAlg:
          $ref: ./model/jws_alg.yaml
        accessTokenSignatureKeyId:
          description: |
            The key ID to identify a JWK used for signing access tokens.

            A JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.
            Authlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based
            access token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions
            for access token signature. If the number of JWK candidates which satisfy the conditions is 1,
            there is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed
            to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.
          type: string
        refreshTokenDuration:
          description: "The duration of refresh tokens in seconds. The related specifications\
            \ have no requirements on refresh token duration, but Authlete sets expiration\
            \ for refresh tokens."
          format: int64
          type: integer
        refreshTokenDurationKept:
          description: |
            The flag to indicate whether the remaining duration of the used refresh token is taken over to
            the newly issued refresh token.
          type: boolean
        refreshTokenDurationReset:
          description: |
            The flag which indicates whether duration of refresh tokens are reset when they are used even
            if the `refreshTokenKept` property of this service set to is `true` (= even if "Refresh Token
            Continuous Use" is "Kept").

            This flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,
            if this service issues a new refresh token on every refresh token request, the refresh token
            will have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this
            `refreshTokenDurationReset` property is not referenced.
          type: boolean
        refreshTokenKept:
          description: |
            The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.

            If `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.

            See [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.
          type: boolean
        supportedScopes:
          description: |
            Scopes supported by the service.

            Authlete strongly recommends that the service register at least the following scopes.

            | Name | Description |
            | --- | --- |
            | openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |
            | profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
            | email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
            | address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |
            | phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
            | offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |

            The value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            $ref: ./model/scope.yaml
          type: array
        scopeRequired:
          description: |
            The flag to indicate whether requests that request no scope are rejected or not.

            When a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,
            the authorization server regards the request requests no scope. When this flag is set to `true`,
            requests that request no scope are rejected.

            The requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)
            does not explicitly mention the case where the default scope set is empty.

            > If the client omits the scope parameter when requesting authorization, the authorization server
            MUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.

            However, if you interpret *"the default scope set exists but is empty"* as *"the default scope set does not exist"*
            and want to strictly conform to the requirement above, this flag has to be `true`.
          type: boolean
        idTokenDuration:
          description: |
            'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s
            in seconds. This value is used to calculate the value of `exp` claim in an ID token.'
          format: int64
          type: integer
        allowableClockSkew:
          description: |
            The allowable clock skew between the server and clients in seconds.

            The clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.
          format: int32
          type: integer
        supportedClaimTypes:
          description: |
            Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete
            currently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.

            The value of this property is used as `claim_types_supported` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            $ref: ./model/claim_type.yaml
          type: array
        supportedClaimLocales:
          description: |
            Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).
            For example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)
            for details.

            The value of this property is used as `claims_locales_supported` property in the
            [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          items:
            type: string
          type: array
        supportedClaims:
          description: |
            Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,
            5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should
            be supported. The following is the list of standard claims.

            - `sub`
            - `name`
            - `given_name`
            - `family_name`
            - `middle_name`
            - `nickname`
            - `preferred_username`
            - `profile`
            - `picture`
            - `website`
            - `email`
            - `email_verified`
            - `gender`
            - `birthdate`
            - `zoneinfo`
            - `locale`
            - `phone_number`
            - `phone_number_verified`
            - `address`
            - `updated_at`

            The value of this property is used as `claims_supported` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).

            The service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional
            Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).
          items:
            type: string
          type: array
        claimShortcutRestrictive:
          description: |
            The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included
            in the issued ID token only when no access token is issued.

            To strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section
            5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.

            > The Claims requested by the profile, email, address, and phone scope values are returned from
            the UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that
            results in an Access Token being issued. However, when no Access Token is issued (which is the
            case for the response_type value id_token), the resulting Claims are returned in the ID Token.
          type: boolean
        jwksUri:
          description: |
            The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For
            example, `http://example.com/auth/jwks`.

            Client applications accesses this URL (1) to get the public key of the service to validate the
            signature of an ID token issued by the service and (2) to get the public key of the service to
            encrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures
            and Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.

            The value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        directJwksEndpointEnabled:
          description: |
            'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint
            is `/api/service/jwks/get/direct/service-api-key`. '
          type: boolean
        jwks:
          description: |
            The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.

            If this property is not `null` in a `/service/create` request or a `/service/update` request,
            Authlete hosts the content in the database. This property must not be `null` and must contain
            pairs of public/private keys if the service wants to support asymmetric signatures for ID tokens
            and asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and
            Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.
          type: string
        idTokenSignatureKeyId:
          description: |
            The key ID to identify a JWK used for ID token signature using an asymmetric key.

            A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
            (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
            to pick up one JWK for signature from the JWK Set when it generates an ID token and signature
            using an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK
            which satisfies conditions for ID token signature. If the number of JWK candidates which satisfy
            the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,
            a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that
            Authlete Server can pick up one JWK from among the JWK candidates.

            This `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation
            (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
            this mechanism is needed.
          type: string
        userInfoSignatureKeyId:
          description: |
            The key ID to identify a JWK used for user info signature using an asymmetric key.

            A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs
            (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has
            to pick up one JWK for signature from the JWK Set when it is required to sign user info (which
            is returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))
            using an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies
            conditions for user info signature. If the number of JWK candidates which satisfy the conditions
            is 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)
            is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.

            This `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation
            (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),
            this mechanism is needed.
          type: string
        authorizationSignatureKeyId:
          description: |
            The key ID to identify a JWK used for signing authorization responses using an asymmetric key.

            [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,
            `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters
            from the authorization endpoint will be packed into a JWT. This property is used to compute the
            value of the `exp` claim of the JWT.

            Authlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response
            signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.
            On the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that
            Authlete Server can pick up one JWK from among the JWK candidates. This property exists to specify
            the key ID.
          type: string
        userInfoEndpoint:
          description: |
            The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the
            service. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.

            The value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        directUserInfoEndpointEnabled:
          description: |
            The flag to indicate whether the direct userinfo endpoint is enabled or not. The path
            of the endpoint is `/api/auth/userinfo/direct/service-api-key`.
          type: boolean
        dynamicRegistrationSupported:
          description: |
            The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)
            is supported.
          type: boolean
        registrationEndpoint:
          description: |
            The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)
            of the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.

            The value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        registrationManagementEndpoint:
          description: |
            The URI of the registration management endpoint. If dynamic client registration is supported,
            and this is set, this URI will be used as the basis of the client's management endpoint by appending
            `/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will
            be used as the URI base instead.
          format: uri
          type: string
        policyUri:
          description: |
            The URL of the "Policy" of the service.

            The value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        tosUri:
          description: |
            The URL of the "Terms Of Service" of the service.

            The value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        serviceDocumentation:
          description: |
            The URL of a page where documents for developers can be found.

            The value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        backchannelAuthenticationEndpoint:
          description: |
            The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA
            (Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
          format: uri
          type: string
        supportedBackchannelTokenDeliveryModes:
          description: |
            The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`
            metadata.

            Backchannel token delivery modes are defined in the specification of [CIBA (Client Initiated
            Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).
          items:
            $ref: ./model/delivery_mode.yaml
          type: array
        backchannelAuthReqIdDuration:
          description: |
            The duration of backchannel authentication request IDs issued from the backchannel authentication
            endpoint in seconds. This is used as the value of the `expires_in` property in responses from
            the backchannel authentication endpoint.
          format: int32
          type: integer
        backchannelPollingInterval:
          description: |
            The minimum interval between polling requests to the token endpoint from client applications in
            seconds. This is used as the value of the `interval` property in responses from the backchannel
            authentication endpoint.
          format: int32
          type: integer
        backchannelUserCodeParameterSupported:
          description: |
            The boolean flag which indicates whether the `user_code` request parameter is supported at the
            backchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`
            metadata.
          type: boolean
        backchannelBindingMessageRequiredInFapi:
          description: |
            The flag to indicate whether the `binding_message` request parameter is always required whenever
            a backchannel authentication request is judged as a request for Financial-grade API.

            The FAPI-CIBA profile requires that the authorization server _"shall ensure unique authorization
            context exists in the authorization request or require a `binding_message` in the authorization
            request"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property
            to `true`.

            If this property is set to `false`, the `binding_message` request parameter remains optional
            even in FAPI context, but in exchange, your authorization server must implement a custom mechanism
            that ensures each backchannel authentication request has unique context.
          type: boolean
        deviceAuthorizationEndpoint:
          description: |
            The URI of the device authorization endpoint.

            Device authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.
          format: uri
          type: string
        deviceVerificationUri:
          description: |
            The verification URI for the device flow. This URI is used as the value of the `verification_uri`
            parameter in responses from the device authorization endpoint.
          format: uri
          type: string
        deviceVerificationUriComplete:
          description: |
            The verification URI for the device flow with a placeholder for a user code. This URI is used
            to build the value of the `verification_uri_complete` parameter in responses from the device
            authorization endpoint.

            It is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for
            a user code. For example, like the following.

            `https://example.com/device?user\_code=USER\_CODE`

            The fixed string is replaced with an actual user code when Authlete builds a verification URI
            with a user code for the `verification_uri_complete` parameter.

            If this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization
            responses.
          format: uri
          type: string
        deviceFlowCodeDuration:
          description: |
            The duration of device verification codes and end-user verification codes issued from the device
            authorization endpoint in seconds. This is used as the value of the `expires_in` property in responses
            from the device authorization endpoint.
          format: int32
          type: integer
        deviceFlowPollingInterval:
          description: |
            The minimum interval between polling requests to the token endpoint from client applications in
            seconds in device flow. This is used as the value of the `interval` property in responses from
            the device authorization endpoint.
          format: int32
          type: integer
        userCodeCharset:
          $ref: ./model/user_code_charset.yaml
        userCodeLength:
          description: |
            The length of end-user verification codes (`user_code`) for Device Flow.
          format: int32
          type: integer
        supportedTrustFrameworks:
          description: |
            Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
          items:
            type: string
          type: array
        supportedEvidence:
          description: |
            Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
          items:
            type: string
          type: array
        supportedIdentityDocuments:
          description: |
            Identity documents supported by this service. This corresponds to the `id_documents_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
          items:
            type: string
          type: array
        supportedVerificationMethods:
          description: |
            Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
          items:
            type: string
          type: array
        supportedVerifiedClaims:
          description: |
            Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`
            [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).
          items:
            type: string
          type: array
        verifiedClaimsValidationSchemaSet:
          $ref: ./model/verified_claims_validation_schema.yaml
        attributes:
          description: |
            The attributes of this service.
          items:
            $ref: ./model/pair.yaml
          type: array
        nbfOptional:
          description: |
            The flag indicating whether the nbf claim in the request object is optional even when the authorization
            request is regarded as a FAPI-Part2 request.

            The final version of Financial-grade API was approved in January, 2021. The Part 2 of the final
            version has new requirements on lifetime of request objects. They require that request objects
            contain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.

            Therefore, when an authorization request is regarded as a FAPI-Part2 request, the request object
            used in the authorization request must contain an nbf claim. Otherwise, the authorization server
            rejects the authorization request.

            When this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization
            request is regarded as a FAPI-Part2 request. That is, the authorization server does not perform
            the validation on lifetime of the request object.

            Skipping the validation is a violation of the FAPI specification. The reason why this flag has
            been prepared nevertheless is that the new requirements (which do not exist in the Implementer's
            Draft 2 released in October, 2018) have big impacts on deployed implementations of client
            applications and Authlete thinks there should be a mechanism whereby to make the migration
            from ID2 to Final smooth without breaking live systems.
          type: boolean
        issSuppressed:
          description: |
            The flag indicating whether generation of the iss response parameter is suppressed.

            "OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response" has defined a new
            authorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.

            The specification requires that the `iss` response parameter always be included in authorization
            responses unless JARM (JWT Secured Authorization Response Mode) is used.

            When this flag is `true`, the authorization server does not include the `iss` response parameter
            in authorization responses. By turning this flag on and off, developers of client applications
            can experiment the mix-up attack and the effect of the `iss` response parameter.

            Note that this flag should not be `true` in production environment unless there are special
            reasons for it.
          type: boolean
        supportedCustomClientMetadata:
          description: |
            custom client metadata supported by this service.

            Standard specifications define client metadata as necessary. The following are such examples.

            * [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
            * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
            * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
            * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
            * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
            * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
            * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
            * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)

            Standard client metadata included in Client Registration Request and Client Update Request (cf.
            [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
            and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored
            into Authlete database. On the other hand, unrecognized client metadata are discarded.

            By listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),
            Authlete can recognize them and stores their values into the database. The stored custom client
            metadata values can be referenced by `customMetadata`.
          items:
            type: string
          type: array
        tokenExpirationLinked:
          description: |
            The flag indicating whether the expiration date of an access token never exceeds that of the
            corresponding refresh token.

            When a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),
            the expiration date of the access token may exceed the expiration date of the corresponding
            refresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is
            `true` and/or when `refreshTokenDurationKept` is `true`.

            When this flag is `true`, the expiration date of an access token never exceeds that of the corresponding
            refresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,
            `accessTokenDuration` in `extension` and `access_token.duration` scope attribute.

            It is technically possible to set a value which is bigger than the duration of refresh tokens
            as the duration of access tokens although it is strange. In the case, the duration of an access
            token becomes longer than the duration of the refresh token which is issued together with the
            access token. Even if the duration values are configured so, if this flag is `true`, the expiration
            date of the access token does not exceed that of the refresh token. That is, the duration of
            the access token will be shortened, and as a result, the access token and the refresh token
            will have the same expiration date.
          type: boolean
        frontChannelRequestObjectEncryptionRequired:
          description: |
            The flag indicating whether encryption of request object is required when the request object
            is passed through the front channel.

            This flag does not affect the processing of request objects at the Pushed Authorization Request
            Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
            Unecrypted request objects are accepted at the endpoint even if this flag is `true`.

            This flag does not indicate whether a request object is always required. There is a different
            flag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`
            for details.

            Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
            flag of the client is `true`.
          type: boolean
        requestObjectEncryptionAlgMatchRequired:
          description: |
            The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
            client metadata of the client that has sent the request object.

            The request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_alg
            >
            > OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting
            Request Objects sent to the OP. This parameter SHOULD be included when symmetric encryption
            will be used, since this signals to the OP that a client_secret value needs to be returned
            from which the symmetric key will be derived, that might not otherwise be returned. The RP
            MAY still use other supported encryption algorithms or send unencrypted Request Objects, even
            when this parameter is present. If both signing and encryption are requested, the Request Object
            will be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The
            default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.

            The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
            Request Objects, even when this parameter is present."

            The Client's property that represents the client metadata is `requestEncryptionAlg`. See the
            description of `requestEncryptionAlg` for details.

            Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
            flag of the client is `true`.
          type: boolean
        requestObjectEncryptionEncMatchRequired:
          description: |
            The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`
            client metadata of the client that has sent the request object.

            The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
            Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.

            > request_object_encryption_enc
            >
            > OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
            Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
            value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
            MUST also be provided.

            The Client's property that represents the client metadata is `requestEncryptionEnc`. See the
            description of `requestEncryptionEnc` for details.

            Even if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`
            flag is `true`.
          type: boolean
        hsmEnabled:
          description: |
            The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.

            When this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,
            `/api/hsk/*` APIs reject all requests.

            Even if this flag is `true`, HSM-related features do not work if the configuration of the Authlete
            server you are using does not support HSM.
          type: boolean
        hsks:
          description: |
            The information about keys managed on HSMs (Hardware Security Modules).

            This `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`
            API and `/api/service/update` API do not have any effect. The contents of this property is controlled
            only by `/api/hsk/*` APIs.
          items:
            $ref: ./model/pair.yaml
          type: array
        grantManagementEndpoint:
          description: |
            The URL of the grant management endpoint.
          type: string
        grantManagementActionRequired:
          description: |
            The flag indicating whether every authorization request (and any request serving as an authorization
            request such as CIBA backchannel authentication request and device authorization request) must
            include the `grant_management_action` request parameter.

            This property corresponds to the `grant_management_action_required` server metadata defined
            in [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).

            Note that setting true to this property will result in blocking all public clients because
            the specification requires that grant management be usable only by confidential clients for
            security reasons.
          type: boolean
        unauthorizedOnClientConfigSupported:
          description: |
            The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as
            a value of the `action` response parameter when appropriate.

            The `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`
            parameter in an `/api/client/registration` API response. This means that implementations of
            client `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)
            strictly.

            For backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`
            API does not return the `UNAUTHORIZED` enum value if this flag is not turned on.

            The steps an existing implementation of client configuration endpoint has to do in order to
            conform to the requirement related to "401 Unauthorized" are as follows.

            1. Update the Authlete library (e.g. authlete-java-common) your system is using.
            2. Update your implementation of client configuration endpoint so that it can handle the
            `UNAUTHORIZED` action.
            3. Turn on this `unauthorizedOnClientConfigSupported` flag.
          type: boolean
        dcrScopeUsedAsRequestable:
          description: |
            The flag indicating whether the `scope` request parameter in dynamic client registration and
            update requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.

            Limiting the range of scopes that a client can request is achieved by listing scopes in the
            `client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`
            property to `true`. This feature is called "requestable scopes".

            This property affects behaviors of `/api/client/registration` and other family APIs.
          type: boolean
        endSessionEndpoint:
          description: |
            The endpoint for clients ending the sessions.

            A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.

            The value of this property is used as `end_session_endpoint` property in the [OpenID Provider
            Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
          format: uri
          type: string
        loopbackRedirectionUriVariable:
          description: |
            The flag indicating whether the port number component of redirection URIs can be variable when
            the host component indicates loopback.

            When this flag is `true`, if the host component of a redirection URI specified in an authorization
            request indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`
            or `::1`), the port number component is ignored when the specified redirection URI is compared
            to pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](
            https://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)
            for Native Apps.

            [3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)
            of [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _"If the client registration
            included the full redirection URI, the authorization server MUST compare the two URIs using
            simple string comparison as defined in [RFC3986] Section 6.2.1."_ Also, the description of
            `redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)
            of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states
            _"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
            at the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]
            (**Simple String Comparison**)."_ These "Simple String Comparison" requirements are preceded
            by this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0
            are satisfied, the port number component of loopback redirection URIs can be variable when this
            flag is `true`.

            [8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)
            of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.

            > While redirect URIs using localhost (i.e., `"http://localhost:{port}/{path}"`) function
            similarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.
            Specifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently
            listening on network interfaces other than the loopback interface. It is also less susceptible
            to client-side firewalls and misconfigured host name resolution on the user's device.

            However, Authlete allows the port number component to be variable in the case of `localhost`,
            too. It is left to client applications whether they use `localhost` or a literal loopback IP
            address (`127.0.0.1` for IPv4 or `::1` for IPv6).

            Section 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state
            that loopback redirection URIs use the `"http"` scheme, but Authlete allows the port number
            component to be variable in other cases (e.g. in the case of the `"https"` scheme), too.
          type: boolean
        requestObjectAudienceChecked:
          description: |
            The flag indicating whether Authlete checks whether the `aud` claim of request objects matches
            the issuer identifier of this service.

            [Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)
            of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following
            statement.

            > The `aud` value SHOULD be or include the OP's Issuer Identifier URL.

            Likewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of
            [RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:
            JWT-Secured Authorization Request (JAR)) has the following statement.

            > The value of aud should be the value of the authorization server (AS) issuer, as defined in
            [RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).

            As excerpted above, validation on the `aud` claim of request objects is optional. However, if
            this flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer
            identifier of this service and raises an error if they are different.
          type: boolean
        accessTokenForExternalAttachmentEmbedded:
          description: |
            The flag indicating whether Authlete generates access tokens for
            external attachments and embeds them in ID tokens and userinfo
            responses.
          type: boolean
        authorityHints:
          description: |
            Identifiers of entities that can issue entity statements for this
            service. This property corresponds to the `authority_hints`
            property that appears in a self-signed entity statement that is
            defined in OpenID Connect Federation 1.0.
          items:
            type: string
          type: array
        federationEnabled:
          description: |
            flag indicating whether this service supports OpenID Connect Federation 1
          type: boolean
        federationJwks:
          description: |
            JWK Set document containing keys that are used to sign (1) self-signed
            entity statement of this service and (2) the response from
            `signed_jwks_uri`.
          type: string
        federationSignatureKeyId:
          description: |
            A key ID to identify a JWK used to sign the entity configuration and
            the signed JWK Set.
          type: string
        federationConfigurationDuration:
          description: |
            The duration of the entity configuration in seconds.
          type: integer
        federationRegistrationEndpoint:
          description: |
            The URI of the federation registration endpoint. This property corresponds
            to the `federation_registration_endpoint` server metadata that is
            defined in OpenID Connect Federation 1.0.
          type: string
        organizationName:
          description: |
            The human-readable name representing the organization that operates
            this service. This property corresponds to the {@code organization_name}
            server metadata that is defined in OpenID Connect Federation 1.0.
          type: string
        predefinedTransformedClaims:
          description: |
            The transformed claims predefined by this service in JSON format.
            This property corresponds to the {@code transformed_claims_predefined}
            server metadata.
          type: string
        refreshTokenIdempotent:
          description: |
            flag indicating whether refresh token requests with the same
            refresh token can be made multiple times in quick succession and
            they can obtain the same renewed refresh token within the short
            period.
          type: boolean
        signedJwksUri:
          description: |
            The URI of the endpoint that returns this service's JWK Set document in
            the JWT format. This property corresponds to the `signed_jwks_uri`
            server metadata defined in OpenID Connect Federation 1.0.
          type: string
        supportedAttachments:
          description: |
            Supported attachment types. This property corresponds to the {@code
            attachments_supported} server metadata which was added by the third
            implementer's draft of OpenID Connect for Identity Assurance 1.0.
          items:
            $ref: ./model/attachment_type.yaml
          type: array
        supportedDigestAlgorithms:
          description: |
            Supported algorithms used to compute digest values of external
            attachments. This property corresponds to the
            `digest_algorithms_supported` server metadata which was added
            by the third implementer's draft of OpenID Connect for Identity
            Assurance 1.0.
          items:
            type: string
          type: array
        supportedDocuments:
          description: |
            Document types supported by this service. This property corresponds
            to the `documents_supported` server metadata.
          items:
            type: string
          type: array
        supportedDocumentsMethods:
          description: |
            validation and verification processes supported by this service.
            This property corresponds to the `documents_methods_supported`
            server metadata.

            The third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
            renamed the
            `id_documents_verification_methods_supported` server metadata to
            `documents_methods_supported`.
          items:
            type: string
          type: array
        supportedDocumentsValidationMethods:
          description: |
            Document validation methods supported by this service. This property
            corresponds to the `documents_validation_methods_supported` server
            metadata which was added by the third implementer's draft of <a href=
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
          items:
            type: string
          type: array
        supportedDocumentsVerificationMethods:
          description: |
            Document verification methods supported by this service. This property
            corresponds to the `documents_verification_methods_supported` server
            metadata which was added by the third implementer's draft of
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
          items:
            type: string
          type: array
        supportedElectronicRecords:
          description: |
            Electronic record types supported by this service. This property
            corresponds to the `electronic_records_supported` server metadata
            which was added by the third implementer's draft of
            [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)
          items:
            type: string
          type: array
        supportedClientRegistrationTypes:
          items:
            $ref: ./model/client_registration_type.yaml
          type: array
        tokenExchangeByIdentifiableClientsOnly:
          description: |
            The flag indicating whether to prohibit unidentifiable clients from
            making token exchange requests.
          type: boolean
        tokenExchangeByConfidentialClientsOnly:
          description: |
            The flag indicating whether to prohibit public clients from making
            token exchange requests.
          type: boolean
        tokenExchangeByPermittedClientsOnly:
          description: |
            The flag indicating whether to prohibit clients that have no explicit
            permission from making token exchange requests.
          type: boolean
        tokenExchangeEncryptedJwtRejected:
          description: |
            The flag indicating whether to reject token exchange requests which
            use encrypted JWTs as input tokens.
          type: boolean
        tokenExchangeUnsignedJwtRejected:
          description: |
            The flag indicating whether to reject token exchange requests which
            use unsigned JWTs as input tokens.
          type: boolean
        jwtGrantByIdentifiableClientsOnly:
          description: |
            The flag indicating whether to prohibit unidentifiable clients from
            using the grant type "urn:ietf:params:oauth:grant-type:jwt-bearer".
          type: boolean
        jwtGrantEncryptedJwtRejected:
          description: |
            The flag indicating whether to reject token requests that use an
            encrypted JWT as an authorization grant with the grant type
            "urn:ietf:params:oauth:grant-type:jwt-bearer".
          type: boolean
        jwtGrantUnsignedJwtRejected:
          description: |
            The flag indicating whether to reject token requests that use an
            unsigned JWT as an authorization grant with the grant type
            "urn:ietf:params:oauth:grant-type:jwt-bearer".
          type: boolean
        dcrDuplicateSoftwareIdBlocked:
          description: |
            The flag indicating whether to block DCR (Dynamic Client Registration)
            requests whose "software_id" has already been used previously.
          type: boolean
        trustAnchors:
          description: |
            The trust anchors that are referenced when this service resolves
            trust chains of relying parties.

            If this property is empty, client registration fails regardless of
            whether its type is `automatic` or `explicit`. It means
            that OpenID Connect Federation 1.0 does not work.
          items:
            $ref: ./model/trust_anchor.yaml
          type: array
        openidDroppedOnRefreshWithoutOfflineAccess:
          description: "The flag indicating whether the openid scope should be dropped\
            \ from \nscopes list assigned to access token issued when a refresh token\
            \ grant \nis used.\n"
          type: boolean
        supportedDocumentsCheckMethods:
          description: |
            Supported document check methods. This property corresponds to the `documents_check_methods_supported`
            server metadata which was added by the fourth implementer's draft of OpenID Connect for Identity
            Assurance 1.0.
          items:
            type: string
          type: array
        rsResponseSigned:
          description: |
            The flag indicating whether this service signs responses from the resource server.
          type: boolean
        rsSignedRequestKeyId:
          description: |
            Get the key ID of a JWK containing the public key used by this client to sign requests to the resource server.
          type: string
      type: object
    SnsCredentials:
      $ref: ./model/sns_credentials.yaml
    Sns:
      $ref: ./model/sns.yaml
    SubjectType:
      $ref: ./model/subject_type.yaml
    TaggedValue:
      $ref: ./model/tagged_value.yaml
    UserCodeCharset:
      $ref: ./model/user_code_charset.yaml
    result:
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
      type: object
    service_get_list_response:
      example:
        start: 0
        end: 6
        services:
        - "{}"
        - "{}"
        totalCount: 1
      properties:
        start:
          description: |
            Start index (inclusive) of the result set. The default value is 0. Must not be a negative
            number.
          format: int32
          type: integer
        end:
          description: |
            Start index (inclusive) of the result set. The default value is 0. Must not be a negative
            number.
          format: int32
          type: integer
        totalCount:
          description: |
            Total number of services owned by the service owner. This doesn't mean the number of services
            contained in the response.
          format: int32
          type: integer
        services:
          description: |
            An array of services.
          items:
            $ref: ./model/service.yaml
          type: array
      type: object
    client_get_list_response:
      example:
        clients:
        - "{}"
        - "{}"
        start: 0
        developer: developer
        end: 6
        totalCount: 1
      properties:
        developer:
          description: |
            The developer of the client applications. If the request did not contain `developer` request
            parameter, this property is set to `null`.
          type: string
        start:
          description: |
            Start index (inclusive) of the result set of the query.
          format: int32
          type: integer
        end:
          description: |
            End index (exclusive) of the result set of the query.
          format: int32
          type: integer
        totalCount:
          description: |
            Total number of clients that belong to the service. This doesn't mean the number of clients
            contained in the response.
          format: int32
          type: integer
        clients:
          description: |
            An array of clients.
          items:
            $ref: ./model/client.yaml
          type: array
      type: object
    client_flag_update_request:
      properties:
        clientLocked:
          description: |
            The flag value to be set
          type: boolean
      required:
      - clientLocked
      type: object
    client_flag_update_response:
      example:
        resultCode: resultCode
        resultMessage: resultMessage
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
      required:
      - resultCode
      - resultMessage
      type: object
    client_secret_refresh_response:
      example:
        newClientSecret: newClientSecret
        resultCode: resultCode
        resultMessage: resultMessage
        oldClientSecret: oldClientSecret
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        newClientSecret:
          description: |
            The new client secret.
          type: string
        oldClientSecret:
          description: |
            The old client secret.
          type: string
      type: object
    client_secret_update_request:
      properties:
        clientSecret:
          description: |-
            The new value of the client secret. Valid characters for a client secret are `A-Z`, `a-z`, `0-9`,
            `-`, and `_`. The maximum length of a client secret is 86.
          type: string
      required:
      - clientSecret
      type: object
    client_secret_update_response:
      example:
        newClientSecret: newClientSecret
        resultCode: resultCode
        resultMessage: resultMessage
        oldClientSecret: oldClientSecret
      properties:
        resultCode:
          description: The code which represents the result of the API call.
          type: string
        resultMessage:
          description: A short message which explains the result of the API call.
          type: string
        newClientSecret:
          description: |
            The new client secret.
          type: string
        oldClientSecret:
          description: |
            The old client secret.
          type: string
      type: object
    client_authorization_get_list_response:
      example:
        clients:
        - "{}"
        - "{}"
        subject: subject
        start: 0
        end: 6
        developer: developer
        totalCount: 1
      properties:
        start:
          description: |
            Start index of search results (inclusive).
          format: int32
          type: integer
        end:
          description: |
            End index of search results (exclusive).
          format: int32
          type: integer
        developer:
          description: |
            Unique ID of a client developer.
          type: string
        subject:
          description: |
            Unique user ID of an end-user.
          type: string
        totalCount:
          description: |
            Unique ID of a client developer.
          format: int32
          type: integer
        clients:
          description: |
            An array of clients.
          items:
            $ref: ./model/client.yaml
          type: array
      type: object
  securitySchemes:
    ServiceOwnerCredentials:
      description: Set **Service Owner API Key** as **Username** and **Service Owner
        API Secret** as **Password**.
      scheme: basic
      type: http
    ServiceCredentials:
      description: Set **Service API Key** as **Username** and **Service API Secret**
        as **Password**.
      scheme: basic
      type: http
